// This file has been automatically generated by "kdu_hyperdoc"
// Do not edit manually.
// Copyright 2001, David Taubman, The University of New South Wales (UNSW)

#include <new>
#include <assert.h>
#include "../kdu_aux/kdu_aux.h"
#include "kdu_jni.h"
#include "kdu_elementary.h"

/*****************************************************************************/
/*              Global mutex used to guard class loading logic               */
/*****************************************************************************/

class kdjni__LOADER_lock {
  public: // Member functions
    kdjni__LOADER_lock() { mutex.create(); }
    ~kdjni__LOADER_lock() { mutex.destroy(); }
    void acquire() { mutex.lock(); }
    void release() { mutex.unlock(); }
  private: // Data members
    kdu_mutex mutex;
  };

static kdjni__LOADER_lock __class_LOADER_lock;


/*****************************************************************************/
/*                             Utility functions                             */
/*****************************************************************************/

static void checkForJavaException(JNIEnv *__env, bool badAlloc, kdu_exception exc)
{
  if (__env->ExceptionOccurred() == NULL)
    {
        const char *exception_class_name;
        if (badAlloc)
            exception_class_name = "java/lang/OutOfMemoryError";
        else
            exception_class_name = "kdu_jni/KduException";
        jclass exception_class = __env->FindClass(exception_class_name);
        if (exception_class==NULL)
            return;
        if (badAlloc)
          __env->ThrowNew(exception_class,
                          "std::bad_alloc exception in Kdu library");
        else
          __env->Throw((jthrowable)
                       __env->NewObject(exception_class,
                                        __env->GetMethodID(exception_class,
                                        "<init>","(I)V"),(int) exc));
    }
}


static void generateJavaNullArgException(JNIEnv *__env)
{
  if (__env->ExceptionOccurred() == NULL)
    {
        jclass exception_class = __env->FindClass("kdu_jni/KduException");
        if (exception_class==NULL)
            return;
        __env->ThrowNew(exception_class,"Null object passed as By-Reference argument to Kakadu API function");
    }
}


/*****************************************************************************/
/*                            Class Loading Logic                            */
/*****************************************************************************/

static jclass Ads_params_CLS = NULL;
static jfieldID Ads_params_PTR = NULL;
static jmethodID Ads_params_INIT_PTR = NULL;
static void Ads_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Ads_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Ads_params_CLS == NULL)
    {
      Ads_params_PTR = kdu_field;
      Ads_params_CLS = kdu_class;
      Ads_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Atk_params_CLS = NULL;
static jfieldID Atk_params_PTR = NULL;
static jmethodID Atk_params_INIT_PTR = NULL;
static void Atk_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Atk_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Atk_params_CLS == NULL)
    {
      Atk_params_PTR = kdu_field;
      Atk_params_CLS = kdu_class;
      Atk_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Cod_params_CLS = NULL;
static jfieldID Cod_params_PTR = NULL;
static jmethodID Cod_params_INIT_PTR = NULL;
static void Cod_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Cod_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Cod_params_CLS == NULL)
    {
      Cod_params_PTR = kdu_field;
      Cod_params_CLS = kdu_class;
      Cod_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Crg_params_CLS = NULL;
static jfieldID Crg_params_PTR = NULL;
static jmethodID Crg_params_INIT_PTR = NULL;
static void Crg_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Crg_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Crg_params_CLS == NULL)
    {
      Crg_params_PTR = kdu_field;
      Crg_params_CLS = kdu_class;
      Crg_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Dfs_params_CLS = NULL;
static jfieldID Dfs_params_PTR = NULL;
static jmethodID Dfs_params_INIT_PTR = NULL;
static void Dfs_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Dfs_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Dfs_params_CLS == NULL)
    {
      Dfs_params_PTR = kdu_field;
      Dfs_params_CLS = kdu_class;
      Dfs_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_box_textualizer_CLS = NULL;
static jfieldID Jp2_box_textualizer_PTR = NULL;
static jmethodID Jp2_box_textualizer_INIT_PTR = NULL;
static void Jp2_box_textualizer_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_box_textualizer");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_box_textualizer_CLS == NULL)
    {
      Jp2_box_textualizer_PTR = kdu_field;
      Jp2_box_textualizer_CLS = kdu_class;
      Jp2_box_textualizer_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_channels_CLS = NULL;
static jfieldID Jp2_channels_PTR = NULL;
static jfieldID Jp2_channels_PARAM = NULL;
static jmethodID Jp2_channels_INIT_PTR_PARAM = NULL;
static void Jp2_channels_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_channels");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(JJ)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  jfieldID kdu_field2 = __env->GetFieldID(kdu_class,"_native_param","J");
  if (kdu_field2==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_channels_CLS == NULL)
    {
      Jp2_channels_PTR = kdu_field;
      Jp2_channels_PARAM = kdu_field2;
      Jp2_channels_CLS = kdu_class;
      Jp2_channels_INIT_PTR_PARAM = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_colour_CLS = NULL;
static jfieldID Jp2_colour_PTR = NULL;
static jmethodID Jp2_colour_INIT_PTR = NULL;
static void Jp2_colour_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_colour");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_colour_CLS == NULL)
    {
      Jp2_colour_PTR = kdu_field;
      Jp2_colour_CLS = kdu_class;
      Jp2_colour_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_colour_converter_CLS = NULL;
static jfieldID Jp2_colour_converter_PTR = NULL;
static jmethodID Jp2_colour_converter_INIT_PTR = NULL;
static void Jp2_colour_converter_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_colour_converter");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_colour_converter_CLS == NULL)
    {
      Jp2_colour_converter_PTR = kdu_field;
      Jp2_colour_converter_CLS = kdu_class;
      Jp2_colour_converter_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_data_references_CLS = NULL;
static jfieldID Jp2_data_references_PTR = NULL;
static jmethodID Jp2_data_references_INIT_PTR = NULL;
static void Jp2_data_references_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_data_references");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_data_references_CLS == NULL)
    {
      Jp2_data_references_PTR = kdu_field;
      Jp2_data_references_CLS = kdu_class;
      Jp2_data_references_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_dimensions_CLS = NULL;
static jfieldID Jp2_dimensions_PTR = NULL;
static jmethodID Jp2_dimensions_INIT_PTR = NULL;
static void Jp2_dimensions_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_dimensions");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_dimensions_CLS == NULL)
    {
      Jp2_dimensions_PTR = kdu_field;
      Jp2_dimensions_CLS = kdu_class;
      Jp2_dimensions_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_family_src_CLS = NULL;
static jfieldID Jp2_family_src_PTR = NULL;
static jmethodID Jp2_family_src_INIT_PTR = NULL;
static void Jp2_family_src_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_family_src");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_family_src_CLS == NULL)
    {
      Jp2_family_src_PTR = kdu_field;
      Jp2_family_src_CLS = kdu_class;
      Jp2_family_src_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_family_tgt_CLS = NULL;
static jfieldID Jp2_family_tgt_PTR = NULL;
static jmethodID Jp2_family_tgt_INIT_PTR = NULL;
static void Jp2_family_tgt_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_family_tgt");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_family_tgt_CLS == NULL)
    {
      Jp2_family_tgt_PTR = kdu_field;
      Jp2_family_tgt_CLS = kdu_class;
      Jp2_family_tgt_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_input_box_CLS = NULL;
static jfieldID Jp2_input_box_PTR = NULL;
static jmethodID Jp2_input_box_INIT_PTR = NULL;
static void Jp2_input_box_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_input_box");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_input_box_CLS == NULL)
    {
      Jp2_input_box_PTR = kdu_field;
      Jp2_input_box_CLS = kdu_class;
      Jp2_input_box_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_locator_CLS = NULL;
static jfieldID Jp2_locator_PTR = NULL;
static jmethodID Jp2_locator_INIT_PTR = NULL;
static void Jp2_locator_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_locator");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_locator_CLS == NULL)
    {
      Jp2_locator_PTR = kdu_field;
      Jp2_locator_CLS = kdu_class;
      Jp2_locator_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_output_box_CLS = NULL;
static jfieldID Jp2_output_box_PTR = NULL;
static jmethodID Jp2_output_box_INIT_PTR = NULL;
static void Jp2_output_box_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_output_box");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_output_box_CLS == NULL)
    {
      Jp2_output_box_PTR = kdu_field;
      Jp2_output_box_CLS = kdu_class;
      Jp2_output_box_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_palette_CLS = NULL;
static jfieldID Jp2_palette_PTR = NULL;
static jmethodID Jp2_palette_INIT_PTR = NULL;
static void Jp2_palette_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_palette");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_palette_CLS == NULL)
    {
      Jp2_palette_PTR = kdu_field;
      Jp2_palette_CLS = kdu_class;
      Jp2_palette_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_resolution_CLS = NULL;
static jfieldID Jp2_resolution_PTR = NULL;
static jmethodID Jp2_resolution_INIT_PTR = NULL;
static void Jp2_resolution_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_resolution");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_resolution_CLS == NULL)
    {
      Jp2_resolution_PTR = kdu_field;
      Jp2_resolution_CLS = kdu_class;
      Jp2_resolution_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_source_CLS = NULL;
static jfieldID Jp2_source_PTR = NULL;
static jmethodID Jp2_source_INIT_PTR = NULL;
static void Jp2_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_source_CLS == NULL)
    {
      Jp2_source_PTR = kdu_field;
      Jp2_source_CLS = kdu_class;
      Jp2_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_target_CLS = NULL;
static jfieldID Jp2_target_PTR = NULL;
static jmethodID Jp2_target_INIT_PTR = NULL;
static void Jp2_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_target_CLS == NULL)
    {
      Jp2_target_PTR = kdu_field;
      Jp2_target_CLS = kdu_class;
      Jp2_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_threadsafe_family_src_CLS = NULL;
static jfieldID Jp2_threadsafe_family_src_PTR = NULL;
static jmethodID Jp2_threadsafe_family_src_INIT_PTR = NULL;
static void Jp2_threadsafe_family_src_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_threadsafe_family_src");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jp2_threadsafe_family_src_CLS == NULL)
    {
      Jp2_threadsafe_family_src_PTR = kdu_field;
      Jp2_threadsafe_family_src_CLS = kdu_class;
      Jp2_threadsafe_family_src_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpb_source_CLS = NULL;
static jfieldID Jpb_source_PTR = NULL;
static jmethodID Jpb_source_INIT_PTR = NULL;
static void Jpb_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpb_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpb_source_CLS == NULL)
    {
      Jpb_source_PTR = kdu_field;
      Jpb_source_CLS = kdu_class;
      Jpb_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpb_target_CLS = NULL;
static jfieldID Jpb_target_PTR = NULL;
static jmethodID Jpb_target_INIT_PTR = NULL;
static void Jpb_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpb_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpb_target_CLS == NULL)
    {
      Jpb_target_PTR = kdu_field;
      Jpb_target_CLS = kdu_class;
      Jpb_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_codestream_source_CLS = NULL;
static jfieldID Jpx_codestream_source_PTR = NULL;
static jfieldID Jpx_codestream_source_PARAM = NULL;
static jmethodID Jpx_codestream_source_INIT_PTR_PARAM = NULL;
static void Jpx_codestream_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_codestream_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(JJ)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  jfieldID kdu_field2 = __env->GetFieldID(kdu_class,"_native_param","J");
  if (kdu_field2==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_codestream_source_CLS == NULL)
    {
      Jpx_codestream_source_PTR = kdu_field;
      Jpx_codestream_source_PARAM = kdu_field2;
      Jpx_codestream_source_CLS = kdu_class;
      Jpx_codestream_source_INIT_PTR_PARAM = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_codestream_target_CLS = NULL;
static jfieldID Jpx_codestream_target_PTR = NULL;
static jmethodID Jpx_codestream_target_INIT_PTR = NULL;
static void Jpx_codestream_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_codestream_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_codestream_target_CLS == NULL)
    {
      Jpx_codestream_target_PTR = kdu_field;
      Jpx_codestream_target_CLS = kdu_class;
      Jpx_codestream_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_compatibility_CLS = NULL;
static jfieldID Jpx_compatibility_PTR = NULL;
static jmethodID Jpx_compatibility_INIT_PTR = NULL;
static void Jpx_compatibility_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_compatibility");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_compatibility_CLS == NULL)
    {
      Jpx_compatibility_PTR = kdu_field;
      Jpx_compatibility_CLS = kdu_class;
      Jpx_compatibility_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_composited_orientation_CLS = NULL;
static jfieldID Jpx_composited_orientation_PTR = NULL;
static jmethodID Jpx_composited_orientation_INIT_PTR = NULL;
static void Jpx_composited_orientation_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_composited_orientation");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_composited_orientation_CLS == NULL)
    {
      Jpx_composited_orientation_PTR = kdu_field;
      Jpx_composited_orientation_CLS = kdu_class;
      Jpx_composited_orientation_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_composition_CLS = NULL;
static jfieldID Jpx_composition_PTR = NULL;
static jmethodID Jpx_composition_INIT_PTR = NULL;
static void Jpx_composition_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_composition");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_composition_CLS == NULL)
    {
      Jpx_composition_PTR = kdu_field;
      Jpx_composition_CLS = kdu_class;
      Jpx_composition_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_container_source_CLS = NULL;
static jfieldID Jpx_container_source_PTR = NULL;
static jmethodID Jpx_container_source_INIT_PTR = NULL;
static void Jpx_container_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_container_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_container_source_CLS == NULL)
    {
      Jpx_container_source_PTR = kdu_field;
      Jpx_container_source_CLS = kdu_class;
      Jpx_container_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_container_target_CLS = NULL;
static jfieldID Jpx_container_target_PTR = NULL;
static jmethodID Jpx_container_target_INIT_PTR = NULL;
static void Jpx_container_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_container_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_container_target_CLS == NULL)
    {
      Jpx_container_target_PTR = kdu_field;
      Jpx_container_target_CLS = kdu_class;
      Jpx_container_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_fragment_list_CLS = NULL;
static jfieldID Jpx_fragment_list_PTR = NULL;
static jmethodID Jpx_fragment_list_INIT_PTR = NULL;
static void Jpx_fragment_list_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_fragment_list");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_fragment_list_CLS == NULL)
    {
      Jpx_fragment_list_PTR = kdu_field;
      Jpx_fragment_list_CLS = kdu_class;
      Jpx_fragment_list_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_frame_CLS = NULL;
static jfieldID Jpx_frame_PTR = NULL;
static jfieldID Jpx_frame_PARAM = NULL;
static jmethodID Jpx_frame_INIT_PTR_PARAM = NULL;
static void Jpx_frame_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_frame");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(JJ)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  jfieldID kdu_field2 = __env->GetFieldID(kdu_class,"_native_param","J");
  if (kdu_field2==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_frame_CLS == NULL)
    {
      Jpx_frame_PTR = kdu_field;
      Jpx_frame_PARAM = kdu_field2;
      Jpx_frame_CLS = kdu_class;
      Jpx_frame_INIT_PTR_PARAM = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_frame_expander_CLS = NULL;
static jfieldID Jpx_frame_expander_PTR = NULL;
static jmethodID Jpx_frame_expander_INIT_PTR = NULL;
static void Jpx_frame_expander_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_frame_expander");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_frame_expander_CLS == NULL)
    {
      Jpx_frame_expander_PTR = kdu_field;
      Jpx_frame_expander_CLS = kdu_class;
      Jpx_frame_expander_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_input_box_CLS = NULL;
static jfieldID Jpx_input_box_PTR = NULL;
static jmethodID Jpx_input_box_INIT_PTR = NULL;
static void Jpx_input_box_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_input_box");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_input_box_CLS == NULL)
    {
      Jpx_input_box_PTR = kdu_field;
      Jpx_input_box_CLS = kdu_class;
      Jpx_input_box_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_layer_source_CLS = NULL;
static jfieldID Jpx_layer_source_PTR = NULL;
static jfieldID Jpx_layer_source_PARAM = NULL;
static jmethodID Jpx_layer_source_INIT_PTR_PARAM = NULL;
static void Jpx_layer_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_layer_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(JJ)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  jfieldID kdu_field2 = __env->GetFieldID(kdu_class,"_native_param","J");
  if (kdu_field2==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_layer_source_CLS == NULL)
    {
      Jpx_layer_source_PTR = kdu_field;
      Jpx_layer_source_PARAM = kdu_field2;
      Jpx_layer_source_CLS = kdu_class;
      Jpx_layer_source_INIT_PTR_PARAM = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_layer_target_CLS = NULL;
static jfieldID Jpx_layer_target_PTR = NULL;
static jmethodID Jpx_layer_target_INIT_PTR = NULL;
static void Jpx_layer_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_layer_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_layer_target_CLS == NULL)
    {
      Jpx_layer_target_PTR = kdu_field;
      Jpx_layer_target_CLS = kdu_class;
      Jpx_layer_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_meta_manager_CLS = NULL;
static jfieldID Jpx_meta_manager_PTR = NULL;
static jmethodID Jpx_meta_manager_INIT_PTR = NULL;
static void Jpx_meta_manager_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_meta_manager");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_meta_manager_CLS == NULL)
    {
      Jpx_meta_manager_PTR = kdu_field;
      Jpx_meta_manager_CLS = kdu_class;
      Jpx_meta_manager_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_metanode_CLS = NULL;
static jfieldID Jpx_metanode_PTR = NULL;
static jmethodID Jpx_metanode_INIT_PTR = NULL;
static void Jpx_metanode_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_metanode");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_metanode_CLS == NULL)
    {
      Jpx_metanode_PTR = kdu_field;
      Jpx_metanode_CLS = kdu_class;
      Jpx_metanode_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_roi_CLS = NULL;
static jfieldID Jpx_roi_PTR = NULL;
static jmethodID Jpx_roi_INIT_PTR = NULL;
static void Jpx_roi_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_roi");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_roi_CLS == NULL)
    {
      Jpx_roi_PTR = kdu_field;
      Jpx_roi_CLS = kdu_class;
      Jpx_roi_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_roi_editor_CLS = NULL;
static jfieldID Jpx_roi_editor_PTR = NULL;
static jmethodID Jpx_roi_editor_INIT_PTR = NULL;
static void Jpx_roi_editor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_roi_editor");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_roi_editor_CLS == NULL)
    {
      Jpx_roi_editor_PTR = kdu_field;
      Jpx_roi_editor_CLS = kdu_class;
      Jpx_roi_editor_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_source_CLS = NULL;
static jfieldID Jpx_source_PTR = NULL;
static jmethodID Jpx_source_INIT_PTR = NULL;
static void Jpx_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_source_CLS == NULL)
    {
      Jpx_source_PTR = kdu_field;
      Jpx_source_CLS = kdu_class;
      Jpx_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_target_CLS = NULL;
static jfieldID Jpx_target_PTR = NULL;
static jmethodID Jpx_target_INIT_PTR = NULL;
static void Jpx_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Jpx_target_CLS == NULL)
    {
      Jpx_target_PTR = kdu_field;
      Jpx_target_CLS = kdu_class;
      Jpx_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_analysis_CLS = NULL;
static jfieldID Kdu_analysis_PTR = NULL;
static jmethodID Kdu_analysis_INIT_PTR = NULL;
static void Kdu_analysis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_analysis");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_analysis_CLS == NULL)
    {
      Kdu_analysis_PTR = kdu_field;
      Kdu_analysis_CLS = kdu_class;
      Kdu_analysis_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_block_CLS = NULL;
static jfieldID Kdu_block_PTR = NULL;
static jmethodID Kdu_block_INIT_PTR = NULL;
static void Kdu_block_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_block");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_block_CLS == NULL)
    {
      Kdu_block_PTR = kdu_field;
      Kdu_block_CLS = kdu_class;
      Kdu_block_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_block_decoder_CLS = NULL;
static jfieldID Kdu_block_decoder_PTR = NULL;
static jmethodID Kdu_block_decoder_INIT_PTR = NULL;
static void Kdu_block_decoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_block_decoder");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_block_decoder_CLS == NULL)
    {
      Kdu_block_decoder_PTR = kdu_field;
      Kdu_block_decoder_CLS = kdu_class;
      Kdu_block_decoder_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_block_encoder_CLS = NULL;
static jfieldID Kdu_block_encoder_PTR = NULL;
static jmethodID Kdu_block_encoder_INIT_PTR = NULL;
static void Kdu_block_encoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_block_encoder");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_block_encoder_CLS == NULL)
    {
      Kdu_block_encoder_PTR = kdu_field;
      Kdu_block_encoder_CLS = kdu_class;
      Kdu_block_encoder_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_cache_CLS = NULL;
static jfieldID Kdu_cache_PTR = NULL;
static jmethodID Kdu_cache_INIT_PTR = NULL;
static void Kdu_cache_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_cache");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_cache_CLS == NULL)
    {
      Kdu_cache_PTR = kdu_field;
      Kdu_cache_CLS = kdu_class;
      Kdu_cache_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_channel_mapping_CLS = NULL;
static jfieldID Kdu_channel_mapping_PTR = NULL;
static jmethodID Kdu_channel_mapping_INIT_PTR = NULL;
static void Kdu_channel_mapping_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_channel_mapping");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_channel_mapping_CLS == NULL)
    {
      Kdu_channel_mapping_PTR = kdu_field;
      Kdu_channel_mapping_CLS = kdu_class;
      Kdu_channel_mapping_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_client_CLS = NULL;
static jfieldID Kdu_client_PTR = NULL;
static jmethodID Kdu_client_INIT_PTR = NULL;
static void Kdu_client_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_client");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_client_CLS == NULL)
    {
      Kdu_client_PTR = kdu_field;
      Kdu_client_CLS = kdu_class;
      Kdu_client_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_client_notifier_CLS = NULL;
static jfieldID Kdu_client_notifier_PTR = NULL;
static jmethodID Kdu_client_notifier_INIT_PTR = NULL;
static void Kdu_client_notifier_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_client_notifier");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_client_notifier_CLS == NULL)
    {
      Kdu_client_notifier_PTR = kdu_field;
      Kdu_client_notifier_CLS = kdu_class;
      Kdu_client_notifier_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_client_translator_CLS = NULL;
static jfieldID Kdu_client_translator_PTR = NULL;
static jmethodID Kdu_client_translator_INIT_PTR = NULL;
static void Kdu_client_translator_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_client_translator");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_client_translator_CLS == NULL)
    {
      Kdu_client_translator_PTR = kdu_field;
      Kdu_client_translator_CLS = kdu_class;
      Kdu_client_translator_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_clientx_CLS = NULL;
static jfieldID Kdu_clientx_PTR = NULL;
static jmethodID Kdu_clientx_INIT_PTR = NULL;
static void Kdu_clientx_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_clientx");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_clientx_CLS == NULL)
    {
      Kdu_clientx_PTR = kdu_field;
      Kdu_clientx_CLS = kdu_class;
      Kdu_clientx_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_codestream_CLS = NULL;
static jfieldID Kdu_codestream_PTR = NULL;
static jmethodID Kdu_codestream_INIT_PTR = NULL;
static void Kdu_codestream_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_codestream");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_codestream_CLS == NULL)
    {
      Kdu_codestream_PTR = kdu_field;
      Kdu_codestream_CLS = kdu_class;
      Kdu_codestream_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_codestream_comment_CLS = NULL;
static jfieldID Kdu_codestream_comment_PTR = NULL;
static jmethodID Kdu_codestream_comment_INIT_PTR = NULL;
static void Kdu_codestream_comment_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_codestream_comment");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_codestream_comment_CLS == NULL)
    {
      Kdu_codestream_comment_PTR = kdu_field;
      Kdu_codestream_comment_CLS = kdu_class;
      Kdu_codestream_comment_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compositor_buf_CLS = NULL;
static jfieldID Kdu_compositor_buf_PTR = NULL;
static jmethodID Kdu_compositor_buf_INIT_PTR = NULL;
static void Kdu_compositor_buf_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compositor_buf");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_compositor_buf_CLS == NULL)
    {
      Kdu_compositor_buf_PTR = kdu_field;
      Kdu_compositor_buf_CLS = kdu_class;
      Kdu_compositor_buf_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_source_CLS = NULL;
static jfieldID Kdu_compressed_source_PTR = NULL;
static jmethodID Kdu_compressed_source_INIT_PTR = NULL;
static void Kdu_compressed_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_source_CLS == NULL)
    {
      Kdu_compressed_source_PTR = kdu_field;
      Kdu_compressed_source_CLS = kdu_class;
      Kdu_compressed_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_source_nonnative_CLS = NULL;
static jfieldID Kdu_compressed_source_nonnative_PTR = NULL;
static jmethodID Kdu_compressed_source_nonnative_INIT_PTR = NULL;
static void Kdu_compressed_source_nonnative_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_source_nonnative");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_source_nonnative_CLS == NULL)
    {
      Kdu_compressed_source_nonnative_PTR = kdu_field;
      Kdu_compressed_source_nonnative_CLS = kdu_class;
      Kdu_compressed_source_nonnative_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_target_CLS = NULL;
static jfieldID Kdu_compressed_target_PTR = NULL;
static jmethodID Kdu_compressed_target_INIT_PTR = NULL;
static void Kdu_compressed_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_target_CLS == NULL)
    {
      Kdu_compressed_target_PTR = kdu_field;
      Kdu_compressed_target_CLS = kdu_class;
      Kdu_compressed_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_target_nonnative_CLS = NULL;
static jfieldID Kdu_compressed_target_nonnative_PTR = NULL;
static jmethodID Kdu_compressed_target_nonnative_INIT_PTR = NULL;
static void Kdu_compressed_target_nonnative_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_target_nonnative");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_target_nonnative_CLS == NULL)
    {
      Kdu_compressed_target_nonnative_PTR = kdu_field;
      Kdu_compressed_target_nonnative_CLS = kdu_class;
      Kdu_compressed_target_nonnative_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_video_source_CLS = NULL;
static jfieldID Kdu_compressed_video_source_PTR = NULL;
static jmethodID Kdu_compressed_video_source_INIT_PTR = NULL;
static void Kdu_compressed_video_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_video_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_video_source_CLS == NULL)
    {
      Kdu_compressed_video_source_PTR = kdu_field;
      Kdu_compressed_video_source_CLS = kdu_class;
      Kdu_compressed_video_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_video_target_CLS = NULL;
static jfieldID Kdu_compressed_video_target_PTR = NULL;
static jmethodID Kdu_compressed_video_target_INIT_PTR = NULL;
static void Kdu_compressed_video_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_video_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_video_target_CLS == NULL)
    {
      Kdu_compressed_video_target_PTR = kdu_field;
      Kdu_compressed_video_target_CLS = kdu_class;
      Kdu_compressed_video_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_coords_CLS = NULL;
static jfieldID Kdu_coords_PTR = NULL;
static jmethodID Kdu_coords_INIT_PTR = NULL;
static void Kdu_coords_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_coords");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_coords_CLS == NULL)
    {
      Kdu_coords_PTR = kdu_field;
      Kdu_coords_CLS = kdu_class;
      Kdu_coords_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_decoder_CLS = NULL;
static jfieldID Kdu_decoder_PTR = NULL;
static jmethodID Kdu_decoder_INIT_PTR = NULL;
static void Kdu_decoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_decoder");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_decoder_CLS == NULL)
    {
      Kdu_decoder_PTR = kdu_field;
      Kdu_decoder_CLS = kdu_class;
      Kdu_decoder_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_dims_CLS = NULL;
static jfieldID Kdu_dims_PTR = NULL;
static jmethodID Kdu_dims_INIT_PTR = NULL;
static void Kdu_dims_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_dims");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_dims_CLS == NULL)
    {
      Kdu_dims_PTR = kdu_field;
      Kdu_dims_CLS = kdu_class;
      Kdu_dims_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_encoder_CLS = NULL;
static jfieldID Kdu_encoder_PTR = NULL;
static jmethodID Kdu_encoder_INIT_PTR = NULL;
static void Kdu_encoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_encoder");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_encoder_CLS == NULL)
    {
      Kdu_encoder_PTR = kdu_field;
      Kdu_encoder_CLS = kdu_class;
      Kdu_encoder_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_ilayer_ref_CLS = NULL;
static jfieldID Kdu_ilayer_ref_PTR = NULL;
static jmethodID Kdu_ilayer_ref_INIT_PTR = NULL;
static void Kdu_ilayer_ref_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_ilayer_ref");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_ilayer_ref_CLS == NULL)
    {
      Kdu_ilayer_ref_PTR = kdu_field;
      Kdu_ilayer_ref_CLS = kdu_class;
      Kdu_ilayer_ref_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_istream_ref_CLS = NULL;
static jfieldID Kdu_istream_ref_PTR = NULL;
static jmethodID Kdu_istream_ref_INIT_PTR = NULL;
static void Kdu_istream_ref_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_istream_ref");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_istream_ref_CLS == NULL)
    {
      Kdu_istream_ref_PTR = kdu_field;
      Kdu_istream_ref_CLS = kdu_class;
      Kdu_istream_ref_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_line_buf_CLS = NULL;
static jfieldID Kdu_line_buf_PTR = NULL;
static jmethodID Kdu_line_buf_INIT_PTR = NULL;
static void Kdu_line_buf_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_line_buf");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_line_buf_CLS == NULL)
    {
      Kdu_line_buf_PTR = kdu_field;
      Kdu_line_buf_CLS = kdu_class;
      Kdu_line_buf_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_message_CLS = NULL;
static jfieldID Kdu_message_PTR = NULL;
static jmethodID Kdu_message_INIT_PTR = NULL;
static void Kdu_message_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_message");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_message_CLS == NULL)
    {
      Kdu_message_PTR = kdu_field;
      Kdu_message_CLS = kdu_class;
      Kdu_message_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_message_formatter_CLS = NULL;
static jfieldID Kdu_message_formatter_PTR = NULL;
static jmethodID Kdu_message_formatter_INIT_PTR = NULL;
static void Kdu_message_formatter_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_message_formatter");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_message_formatter_CLS == NULL)
    {
      Kdu_message_formatter_PTR = kdu_field;
      Kdu_message_formatter_CLS = kdu_class;
      Kdu_message_formatter_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_message_queue_CLS = NULL;
static jfieldID Kdu_message_queue_PTR = NULL;
static jmethodID Kdu_message_queue_INIT_PTR = NULL;
static void Kdu_message_queue_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_message_queue");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_message_queue_CLS == NULL)
    {
      Kdu_message_queue_PTR = kdu_field;
      Kdu_message_queue_CLS = kdu_class;
      Kdu_message_queue_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_metareq_CLS = NULL;
static jfieldID Kdu_metareq_PTR = NULL;
static jmethodID Kdu_metareq_INIT_PTR = NULL;
static void Kdu_metareq_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_metareq");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_metareq_CLS == NULL)
    {
      Kdu_metareq_PTR = kdu_field;
      Kdu_metareq_CLS = kdu_class;
      Kdu_metareq_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_multi_analysis_CLS = NULL;
static jfieldID Kdu_multi_analysis_PTR = NULL;
static jmethodID Kdu_multi_analysis_INIT_PTR = NULL;
static void Kdu_multi_analysis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_multi_analysis");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_multi_analysis_CLS == NULL)
    {
      Kdu_multi_analysis_PTR = kdu_field;
      Kdu_multi_analysis_CLS = kdu_class;
      Kdu_multi_analysis_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_multi_synthesis_CLS = NULL;
static jfieldID Kdu_multi_synthesis_PTR = NULL;
static jmethodID Kdu_multi_synthesis_INIT_PTR = NULL;
static void Kdu_multi_synthesis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_multi_synthesis");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_multi_synthesis_CLS == NULL)
    {
      Kdu_multi_synthesis_PTR = kdu_field;
      Kdu_multi_synthesis_CLS = kdu_class;
      Kdu_multi_synthesis_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_nc_coords_CLS = NULL;
static jfieldID Kdu_nc_coords_PTR = NULL;
static jmethodID Kdu_nc_coords_INIT_PTR = NULL;
static void Kdu_nc_coords_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_nc_coords");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_nc_coords_CLS == NULL)
    {
      Kdu_nc_coords_PTR = kdu_field;
      Kdu_nc_coords_CLS = kdu_class;
      Kdu_nc_coords_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_node_CLS = NULL;
static jfieldID Kdu_node_PTR = NULL;
static jmethodID Kdu_node_INIT_PTR = NULL;
static void Kdu_node_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_node");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_node_CLS == NULL)
    {
      Kdu_node_PTR = kdu_field;
      Kdu_node_CLS = kdu_class;
      Kdu_node_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_output_CLS = NULL;
static jfieldID Kdu_output_PTR = NULL;
static jmethodID Kdu_output_INIT_PTR = NULL;
static void Kdu_output_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_output");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_output_CLS == NULL)
    {
      Kdu_output_PTR = kdu_field;
      Kdu_output_CLS = kdu_class;
      Kdu_output_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_overlay_params_CLS = NULL;
static jfieldID Kdu_overlay_params_PTR = NULL;
static jmethodID Kdu_overlay_params_INIT_PTR = NULL;
static void Kdu_overlay_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_overlay_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_overlay_params_CLS == NULL)
    {
      Kdu_overlay_params_PTR = kdu_field;
      Kdu_overlay_params_CLS = kdu_class;
      Kdu_overlay_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_params_CLS = NULL;
static jfieldID Kdu_params_PTR = NULL;
static jmethodID Kdu_params_INIT_PTR = NULL;
static void Kdu_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_params_CLS == NULL)
    {
      Kdu_params_PTR = kdu_field;
      Kdu_params_CLS = kdu_class;
      Kdu_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_precinct_CLS = NULL;
static jfieldID Kdu_precinct_PTR = NULL;
static jmethodID Kdu_precinct_INIT_PTR = NULL;
static void Kdu_precinct_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_precinct");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_precinct_CLS == NULL)
    {
      Kdu_precinct_PTR = kdu_field;
      Kdu_precinct_CLS = kdu_class;
      Kdu_precinct_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_pull_ifc_CLS = NULL;
static jfieldID Kdu_pull_ifc_PTR = NULL;
static jmethodID Kdu_pull_ifc_INIT_PTR = NULL;
static void Kdu_pull_ifc_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_pull_ifc");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_pull_ifc_CLS == NULL)
    {
      Kdu_pull_ifc_PTR = kdu_field;
      Kdu_pull_ifc_CLS = kdu_class;
      Kdu_pull_ifc_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_push_ifc_CLS = NULL;
static jfieldID Kdu_push_ifc_PTR = NULL;
static jmethodID Kdu_push_ifc_INIT_PTR = NULL;
static void Kdu_push_ifc_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_push_ifc");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_push_ifc_CLS == NULL)
    {
      Kdu_push_ifc_PTR = kdu_field;
      Kdu_push_ifc_CLS = kdu_class;
      Kdu_push_ifc_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_range_set_CLS = NULL;
static jfieldID Kdu_range_set_PTR = NULL;
static jmethodID Kdu_range_set_INIT_PTR = NULL;
static void Kdu_range_set_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_range_set");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_range_set_CLS == NULL)
    {
      Kdu_range_set_PTR = kdu_field;
      Kdu_range_set_CLS = kdu_class;
      Kdu_range_set_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_region_compositor_CLS = NULL;
static jfieldID Kdu_region_compositor_PTR = NULL;
static jmethodID Kdu_region_compositor_INIT_PTR = NULL;
static void Kdu_region_compositor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_region_compositor");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_region_compositor_CLS == NULL)
    {
      Kdu_region_compositor_PTR = kdu_field;
      Kdu_region_compositor_CLS = kdu_class;
      Kdu_region_compositor_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_region_decompressor_CLS = NULL;
static jfieldID Kdu_region_decompressor_PTR = NULL;
static jmethodID Kdu_region_decompressor_INIT_PTR = NULL;
static void Kdu_region_decompressor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_region_decompressor");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_region_decompressor_CLS == NULL)
    {
      Kdu_region_decompressor_PTR = kdu_field;
      Kdu_region_decompressor_CLS = kdu_class;
      Kdu_region_decompressor_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_resolution_CLS = NULL;
static jfieldID Kdu_resolution_PTR = NULL;
static jmethodID Kdu_resolution_INIT_PTR = NULL;
static void Kdu_resolution_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_resolution");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_resolution_CLS == NULL)
    {
      Kdu_resolution_PTR = kdu_field;
      Kdu_resolution_CLS = kdu_class;
      Kdu_resolution_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_roi_image_CLS = NULL;
static jfieldID Kdu_roi_image_PTR = NULL;
static jmethodID Kdu_roi_image_INIT_PTR = NULL;
static void Kdu_roi_image_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_roi_image");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_roi_image_CLS == NULL)
    {
      Kdu_roi_image_PTR = kdu_field;
      Kdu_roi_image_CLS = kdu_class;
      Kdu_roi_image_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_roi_node_CLS = NULL;
static jfieldID Kdu_roi_node_PTR = NULL;
static jmethodID Kdu_roi_node_INIT_PTR = NULL;
static void Kdu_roi_node_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_roi_node");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_roi_node_CLS == NULL)
    {
      Kdu_roi_node_PTR = kdu_field;
      Kdu_roi_node_CLS = kdu_class;
      Kdu_roi_node_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_run_queue_CLS = NULL;
static jfieldID Kdu_run_queue_PTR = NULL;
static jmethodID Kdu_run_queue_INIT_PTR = NULL;
static void Kdu_run_queue_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_run_queue");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_run_queue_CLS == NULL)
    {
      Kdu_run_queue_PTR = kdu_field;
      Kdu_run_queue_CLS = kdu_class;
      Kdu_run_queue_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_sample_allocator_CLS = NULL;
static jfieldID Kdu_sample_allocator_PTR = NULL;
static jmethodID Kdu_sample_allocator_INIT_PTR = NULL;
static void Kdu_sample_allocator_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_sample_allocator");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_sample_allocator_CLS == NULL)
    {
      Kdu_sample_allocator_PTR = kdu_field;
      Kdu_sample_allocator_CLS = kdu_class;
      Kdu_sample_allocator_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_sampled_range_CLS = NULL;
static jfieldID Kdu_sampled_range_PTR = NULL;
static jmethodID Kdu_sampled_range_INIT_PTR = NULL;
static void Kdu_sampled_range_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_sampled_range");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_sampled_range_CLS == NULL)
    {
      Kdu_sampled_range_PTR = kdu_field;
      Kdu_sampled_range_CLS = kdu_class;
      Kdu_sampled_range_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_serve_CLS = NULL;
static jfieldID Kdu_serve_PTR = NULL;
static jmethodID Kdu_serve_INIT_PTR = NULL;
static void Kdu_serve_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_serve");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_serve_CLS == NULL)
    {
      Kdu_serve_PTR = kdu_field;
      Kdu_serve_CLS = kdu_class;
      Kdu_serve_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_serve_target_CLS = NULL;
static jfieldID Kdu_serve_target_PTR = NULL;
static jmethodID Kdu_serve_target_INIT_PTR = NULL;
static void Kdu_serve_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_serve_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_serve_target_CLS == NULL)
    {
      Kdu_serve_target_PTR = kdu_field;
      Kdu_serve_target_CLS = kdu_class;
      Kdu_serve_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_servex_CLS = NULL;
static jfieldID Kdu_servex_PTR = NULL;
static jmethodID Kdu_servex_INIT_PTR = NULL;
static void Kdu_servex_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_servex");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_servex_CLS == NULL)
    {
      Kdu_servex_PTR = kdu_field;
      Kdu_servex_CLS = kdu_class;
      Kdu_servex_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_file_source_CLS = NULL;
static jfieldID Kdu_simple_file_source_PTR = NULL;
static jmethodID Kdu_simple_file_source_INIT_PTR = NULL;
static void Kdu_simple_file_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_file_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_file_source_CLS == NULL)
    {
      Kdu_simple_file_source_PTR = kdu_field;
      Kdu_simple_file_source_CLS = kdu_class;
      Kdu_simple_file_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_file_target_CLS = NULL;
static jfieldID Kdu_simple_file_target_PTR = NULL;
static jmethodID Kdu_simple_file_target_INIT_PTR = NULL;
static void Kdu_simple_file_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_file_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_file_target_CLS == NULL)
    {
      Kdu_simple_file_target_PTR = kdu_field;
      Kdu_simple_file_target_CLS = kdu_class;
      Kdu_simple_file_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_video_source_CLS = NULL;
static jfieldID Kdu_simple_video_source_PTR = NULL;
static jmethodID Kdu_simple_video_source_INIT_PTR = NULL;
static void Kdu_simple_video_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_video_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_video_source_CLS == NULL)
    {
      Kdu_simple_video_source_PTR = kdu_field;
      Kdu_simple_video_source_CLS = kdu_class;
      Kdu_simple_video_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_video_target_CLS = NULL;
static jfieldID Kdu_simple_video_target_PTR = NULL;
static jmethodID Kdu_simple_video_target_INIT_PTR = NULL;
static void Kdu_simple_video_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_video_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_video_target_CLS == NULL)
    {
      Kdu_simple_video_target_PTR = kdu_field;
      Kdu_simple_video_target_CLS = kdu_class;
      Kdu_simple_video_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_stripe_compressor_CLS = NULL;
static jfieldID Kdu_stripe_compressor_PTR = NULL;
static jmethodID Kdu_stripe_compressor_INIT_PTR = NULL;
static void Kdu_stripe_compressor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_stripe_compressor");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_stripe_compressor_CLS == NULL)
    {
      Kdu_stripe_compressor_PTR = kdu_field;
      Kdu_stripe_compressor_CLS = kdu_class;
      Kdu_stripe_compressor_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_stripe_decompressor_CLS = NULL;
static jfieldID Kdu_stripe_decompressor_PTR = NULL;
static jmethodID Kdu_stripe_decompressor_INIT_PTR = NULL;
static void Kdu_stripe_decompressor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_stripe_decompressor");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_stripe_decompressor_CLS == NULL)
    {
      Kdu_stripe_decompressor_PTR = kdu_field;
      Kdu_stripe_decompressor_CLS = kdu_class;
      Kdu_stripe_decompressor_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_subband_CLS = NULL;
static jfieldID Kdu_subband_PTR = NULL;
static jmethodID Kdu_subband_INIT_PTR = NULL;
static void Kdu_subband_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_subband");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_subband_CLS == NULL)
    {
      Kdu_subband_PTR = kdu_field;
      Kdu_subband_CLS = kdu_class;
      Kdu_subband_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_synthesis_CLS = NULL;
static jfieldID Kdu_synthesis_PTR = NULL;
static jmethodID Kdu_synthesis_INIT_PTR = NULL;
static void Kdu_synthesis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_synthesis");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_synthesis_CLS == NULL)
    {
      Kdu_synthesis_PTR = kdu_field;
      Kdu_synthesis_CLS = kdu_class;
      Kdu_synthesis_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_entity_CLS = NULL;
static jfieldID Kdu_thread_entity_PTR = NULL;
static jmethodID Kdu_thread_entity_INIT_PTR = NULL;
static void Kdu_thread_entity_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_entity");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_entity_CLS == NULL)
    {
      Kdu_thread_entity_PTR = kdu_field;
      Kdu_thread_entity_CLS = kdu_class;
      Kdu_thread_entity_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_entity_condition_CLS = NULL;
static jfieldID Kdu_thread_entity_condition_PTR = NULL;
static jmethodID Kdu_thread_entity_condition_INIT_PTR = NULL;
static void Kdu_thread_entity_condition_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_entity_condition");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_entity_condition_CLS == NULL)
    {
      Kdu_thread_entity_condition_PTR = kdu_field;
      Kdu_thread_entity_condition_CLS = kdu_class;
      Kdu_thread_entity_condition_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_env_CLS = NULL;
static jfieldID Kdu_thread_env_PTR = NULL;
static jmethodID Kdu_thread_env_INIT_PTR = NULL;
static void Kdu_thread_env_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_env");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_env_CLS == NULL)
    {
      Kdu_thread_env_PTR = kdu_field;
      Kdu_thread_env_CLS = kdu_class;
      Kdu_thread_env_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_queue_CLS = NULL;
static jfieldID Kdu_thread_queue_PTR = NULL;
static jmethodID Kdu_thread_queue_INIT_PTR = NULL;
static void Kdu_thread_queue_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_queue");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_queue_CLS == NULL)
    {
      Kdu_thread_queue_PTR = kdu_field;
      Kdu_thread_queue_CLS = kdu_class;
      Kdu_thread_queue_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_safe_message_CLS = NULL;
static jfieldID Kdu_thread_safe_message_PTR = NULL;
static jmethodID Kdu_thread_safe_message_INIT_PTR = NULL;
static void Kdu_thread_safe_message_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_safe_message");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_safe_message_CLS == NULL)
    {
      Kdu_thread_safe_message_PTR = kdu_field;
      Kdu_thread_safe_message_CLS = kdu_class;
      Kdu_thread_safe_message_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_tiffdir_CLS = NULL;
static jfieldID Kdu_tiffdir_PTR = NULL;
static jmethodID Kdu_tiffdir_INIT_PTR = NULL;
static void Kdu_tiffdir_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_tiffdir");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_tiffdir_CLS == NULL)
    {
      Kdu_tiffdir_PTR = kdu_field;
      Kdu_tiffdir_CLS = kdu_class;
      Kdu_tiffdir_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_tile_CLS = NULL;
static jfieldID Kdu_tile_PTR = NULL;
static jmethodID Kdu_tile_INIT_PTR = NULL;
static void Kdu_tile_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_tile");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_tile_CLS == NULL)
    {
      Kdu_tile_PTR = kdu_field;
      Kdu_tile_CLS = kdu_class;
      Kdu_tile_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_tile_comp_CLS = NULL;
static jfieldID Kdu_tile_comp_PTR = NULL;
static jmethodID Kdu_tile_comp_INIT_PTR = NULL;
static void Kdu_tile_comp_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_tile_comp");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_tile_comp_CLS == NULL)
    {
      Kdu_tile_comp_PTR = kdu_field;
      Kdu_tile_comp_CLS = kdu_class;
      Kdu_tile_comp_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_window_CLS = NULL;
static jfieldID Kdu_window_PTR = NULL;
static jmethodID Kdu_window_INIT_PTR = NULL;
static void Kdu_window_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_window");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_window_CLS == NULL)
    {
      Kdu_window_PTR = kdu_field;
      Kdu_window_CLS = kdu_class;
      Kdu_window_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_window_context_CLS = NULL;
static jfieldID Kdu_window_context_PTR = NULL;
static jfieldID Kdu_window_context_PARAM = NULL;
static jmethodID Kdu_window_context_INIT_PTR_PARAM = NULL;
static void Kdu_window_context_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_window_context");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(JJ)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  jfieldID kdu_field2 = __env->GetFieldID(kdu_class,"_native_param","J");
  if (kdu_field2==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_window_context_CLS == NULL)
    {
      Kdu_window_context_PTR = kdu_field;
      Kdu_window_context_PARAM = kdu_field2;
      Kdu_window_context_CLS = kdu_class;
      Kdu_window_context_INIT_PTR_PARAM = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_window_model_CLS = NULL;
static jfieldID Kdu_window_model_PTR = NULL;
static jmethodID Kdu_window_model_INIT_PTR = NULL;
static void Kdu_window_model_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_window_model");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_window_model_CLS == NULL)
    {
      Kdu_window_model_PTR = kdu_field;
      Kdu_window_model_CLS = kdu_class;
      Kdu_window_model_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_window_prefs_CLS = NULL;
static jfieldID Kdu_window_prefs_PTR = NULL;
static jmethodID Kdu_window_prefs_INIT_PTR = NULL;
static void Kdu_window_prefs_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_window_prefs");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Kdu_window_prefs_CLS == NULL)
    {
      Kdu_window_prefs_PTR = kdu_field;
      Kdu_window_prefs_CLS = kdu_class;
      Kdu_window_prefs_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mcc_params_CLS = NULL;
static jfieldID Mcc_params_PTR = NULL;
static jmethodID Mcc_params_INIT_PTR = NULL;
static void Mcc_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mcc_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Mcc_params_CLS == NULL)
    {
      Mcc_params_PTR = kdu_field;
      Mcc_params_CLS = kdu_class;
      Mcc_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mco_params_CLS = NULL;
static jfieldID Mco_params_PTR = NULL;
static jmethodID Mco_params_INIT_PTR = NULL;
static void Mco_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mco_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Mco_params_CLS == NULL)
    {
      Mco_params_PTR = kdu_field;
      Mco_params_CLS = kdu_class;
      Mco_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mct_params_CLS = NULL;
static jfieldID Mct_params_PTR = NULL;
static jmethodID Mct_params_INIT_PTR = NULL;
static void Mct_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mct_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Mct_params_CLS == NULL)
    {
      Mct_params_PTR = kdu_field;
      Mct_params_CLS = kdu_class;
      Mct_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_source_CLS = NULL;
static jfieldID Mj2_source_PTR = NULL;
static jmethodID Mj2_source_INIT_PTR = NULL;
static void Mj2_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Mj2_source_CLS == NULL)
    {
      Mj2_source_PTR = kdu_field;
      Mj2_source_CLS = kdu_class;
      Mj2_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_target_CLS = NULL;
static jfieldID Mj2_target_PTR = NULL;
static jmethodID Mj2_target_INIT_PTR = NULL;
static void Mj2_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Mj2_target_CLS == NULL)
    {
      Mj2_target_PTR = kdu_field;
      Mj2_target_CLS = kdu_class;
      Mj2_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_video_source_CLS = NULL;
static jfieldID Mj2_video_source_PTR = NULL;
static jmethodID Mj2_video_source_INIT_PTR = NULL;
static void Mj2_video_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_video_source");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Mj2_video_source_CLS == NULL)
    {
      Mj2_video_source_PTR = kdu_field;
      Mj2_video_source_CLS = kdu_class;
      Mj2_video_source_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_video_target_CLS = NULL;
static jfieldID Mj2_video_target_PTR = NULL;
static jmethodID Mj2_video_target_INIT_PTR = NULL;
static void Mj2_video_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_video_target");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Mj2_video_target_CLS == NULL)
    {
      Mj2_video_target_PTR = kdu_field;
      Mj2_video_target_CLS = kdu_class;
      Mj2_video_target_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Org_params_CLS = NULL;
static jfieldID Org_params_PTR = NULL;
static jmethodID Org_params_INIT_PTR = NULL;
static void Org_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Org_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Org_params_CLS == NULL)
    {
      Org_params_PTR = kdu_field;
      Org_params_CLS = kdu_class;
      Org_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Poc_params_CLS = NULL;
static jfieldID Poc_params_PTR = NULL;
static jmethodID Poc_params_INIT_PTR = NULL;
static void Poc_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Poc_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Poc_params_CLS == NULL)
    {
      Poc_params_PTR = kdu_field;
      Poc_params_CLS = kdu_class;
      Poc_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Qcd_params_CLS = NULL;
static jfieldID Qcd_params_PTR = NULL;
static jmethodID Qcd_params_INIT_PTR = NULL;
static void Qcd_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Qcd_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Qcd_params_CLS == NULL)
    {
      Qcd_params_PTR = kdu_field;
      Qcd_params_CLS = kdu_class;
      Qcd_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Rgn_params_CLS = NULL;
static jfieldID Rgn_params_PTR = NULL;
static jmethodID Rgn_params_INIT_PTR = NULL;
static void Rgn_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Rgn_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Rgn_params_CLS == NULL)
    {
      Rgn_params_PTR = kdu_field;
      Rgn_params_CLS = kdu_class;
      Rgn_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Siz_params_CLS = NULL;
static jfieldID Siz_params_PTR = NULL;
static jmethodID Siz_params_INIT_PTR = NULL;
static void Siz_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Siz_params");
  if (kdu_class==NULL) throw KDU_NULL_EXCEPTION;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  jmethodID kdu_method = __env->GetMethodID(kdu_class,"<init>","(J)V");
  if (kdu_field==NULL) throw KDU_NULL_EXCEPTION;
  if (kdu_method==NULL) throw KDU_NULL_EXCEPTION;
  __class_LOADER_lock.acquire();
  if (Siz_params_CLS == NULL)
    {
      Siz_params_PTR = kdu_field;
      Siz_params_CLS = kdu_class;
      Siz_params_INIT_PTR = kdu_method;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

/*****************************************************************************/
/*                                Kdu_global                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Ceil_1ratio(JNIEnv *__env, jclass this_class, jint _num, jint _den)
{
  try {
    int num = (int) _num;
    int den = (int) _den;
    int Result;
    Result = ceil_ratio(num,den);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Floor_1ratio(JNIEnv *__env, jclass this_class, jint _num, jint _den)
{
  try {
    int num = (int) _num;
    int den = (int) _den;
    int Result;
    Result = floor_ratio(num,den);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Jp2_14cc_1to_1int__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    kdu_uint32 Result;
    try { // So we can clean up temporary arrays
    Result = jp2_4cc_to_int(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    jlong _Result = (jlong) Result;
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Jp2_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer)
{
  try {
    if (_textualizer == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    jp2_box_textualizer *textualizer = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_textualizer,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    jp2_add_box_descriptions(*textualizer);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1global_Jp2_1is_1superbox(JNIEnv *__env, jobject _self, jlong _box_type)
{
  try {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool Result;
    Result = jp2_is_superbox(box_type);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Jpb_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer)
{
  try {
    if (_textualizer == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    jp2_box_textualizer *textualizer = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_textualizer,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    jpb_add_box_descriptions(*textualizer);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Jpx_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer)
{
  try {
    if (_textualizer == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    jp2_box_textualizer *textualizer = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_textualizer,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    jpx_add_box_descriptions(*textualizer);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1convert_1rgb_1to_1ycc(JNIEnv *__env, jclass this_class, jobject _c1, jobject _c2, jobject _c3)
{
  try {
    if ((_c1 == NULL) || (_c2 == NULL) || (_c3 == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *c1 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c1,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c2 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c2,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c3 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c3,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_convert_rgb_to_ycc(*c1,*c2,*c3);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1convert_1ycc_1to_1rgb(JNIEnv *__env, jclass this_class, jobject _c1, jobject _c2, jobject _c3, jint _width)
{
  try {
    if ((_c1 == NULL) || (_c2 == NULL) || (_c3 == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *c1 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c1,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c2 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c2,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c3 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c3,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    kdu_convert_ycc_to_rgb(*c1,*c2,*c3,width);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1errors(JNIEnv *__env, jobject _self, jobject _handler)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *handler = (kdu_message *)
      _kdu_long_to_addr((_handler==NULL)?((jlong) 0):(__env->GetLongField(_handler,Kdu_message_PTR) & ~((jlong) 1)));
    kdu_customize_errors(handler);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1text__Ljava_lang_String_2JLjava_lang_String_2Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _context, jlong _id, jstring _lead_in, jstring _text)
{
  try {
    const char *context = NULL;
    if (_context != NULL)
      {
        context = __env->GetStringUTFChars(_context,NULL);
      }
    kdu_uint32 id = (kdu_uint32) _id;
    const char *lead_in = NULL;
    if (_lead_in != NULL)
      {
        lead_in = __env->GetStringUTFChars(_lead_in,NULL);
      }
    const char *text = NULL;
    if (_text != NULL)
      {
        text = __env->GetStringUTFChars(_text,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_customize_text(context,id,lead_in,text);
    } catch (...) {
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        __env->ReleaseStringUTFChars(_lead_in,lead_in);
      }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    throw;
    }
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        __env->ReleaseStringUTFChars(_lead_in,lead_in);
      }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1text__Ljava_lang_String_2J_3I_3I(JNIEnv *__env, jobject _self, jstring _context, jlong _id, jintArray _lead_in, jintArray _text)
{
  try {
    const char *context = NULL;
    if (_context != NULL)
      {
        context = __env->GetStringUTFChars(_context,NULL);
      }
    kdu_uint32 id = (kdu_uint32) _id;
    kdu_uint16 *lead_in = NULL;
    jint *lead_in_ELTS = NULL;
    jsize lead_in_L = 0;
    if (_lead_in != NULL)
      {
        lead_in_ELTS = __env->GetIntArrayElements(_lead_in,NULL);
        lead_in_L = __env->GetArrayLength(_lead_in);
        lead_in = new kdu_uint16[lead_in_L];
        { for (int i=0; i<lead_in_L; i++) lead_in[i] = (kdu_uint16)(lead_in_ELTS[i]); }
      }
    kdu_uint16 *text = NULL;
    jint *text_ELTS = NULL;
    jsize text_L = 0;
    if (_text != NULL)
      {
        text_ELTS = __env->GetIntArrayElements(_text,NULL);
        text_L = __env->GetArrayLength(_text);
        text = new kdu_uint16[text_L];
        { for (int i=0; i<text_L; i++) text[i] = (kdu_uint16)(text_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_customize_text(context,id,lead_in,text);
    } catch (...) {
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        delete[] lead_in;
        __env->ReleaseIntArrayElements(_lead_in,lead_in_ELTS,0);
      }
    if (_text != NULL)
      {
        delete[] text;
        __env->ReleaseIntArrayElements(_text,text_ELTS,0);
      }
    throw;
    }
    if (_lead_in != NULL)
      {
        for (int i=0; i<lead_in_L; i++) lead_in_ELTS[i] = (jint)(lead_in[i]);
      }
    if (_text != NULL)
      {
        for (int i=0; i<text_L; i++) text_ELTS[i] = (jint)(text[i]);
      }
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        delete[] lead_in;
        __env->ReleaseIntArrayElements(_lead_in,lead_in_ELTS,0);
      }
    if (_text != NULL)
      {
        delete[] text;
        __env->ReleaseIntArrayElements(_text,text_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1warnings(JNIEnv *__env, jobject _self, jobject _handler)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *handler = (kdu_message *)
      _kdu_long_to_addr((_handler==NULL)?((jlong) 0):(__env->GetLongField(_handler,Kdu_message_PTR) & ~((jlong) 1)));
    kdu_customize_warnings(handler);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1fseek__JJ(JNIEnv *__env, jobject _self, jlong _fp, jlong _offset)
{
  try {
    FILE *fp = (FILE *) _kdu_long_to_addr(_fp);
    kdu_long offset = (kdu_long) _offset;
    int Result;
    Result = kdu_fseek(fp,offset);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1fseek__JJI(JNIEnv *__env, jobject _self, jlong _fp, jlong _offset, jint _origin)
{
  try {
    FILE *fp = (FILE *) _kdu_long_to_addr(_fp);
    kdu_long offset = (kdu_long) _offset;
    int origin = (int) _origin;
    int Result;
    Result = kdu_fseek(fp,offset,origin);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1ftell(JNIEnv *__env, jobject _self, jlong _fp)
{
  try {
    FILE *fp = (FILE *) _kdu_long_to_addr(_fp);
    kdu_long Result;
    Result = kdu_ftell(fp);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1altivec_1exists(JNIEnv *__env, jobject _self)
{
  try {
    bool Result;
    Result = kdu_get_altivec_exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1core_1version(JNIEnv *__env, jobject _self)
{
  try {
    const char * Result;
    Result = kdu_get_core_version();
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1mmx_1level(JNIEnv *__env, jobject _self)
{
  try {
    int Result;
    Result = kdu_get_mmx_level();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1num_1processors(JNIEnv *__env, jobject _self)
{
  try {
    int Result;
    Result = kdu_get_num_processors();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1sparcvis_1exists(JNIEnv *__env, jobject _self)
{
  try {
    bool Result;
    Result = kdu_get_sparcvis_exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1parse_1type_1code(JNIEnv *__env, jclass this_class, jstring _string, jintArray _num_chars)
{
  try {
    if (_num_chars == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    jint num_chars_ELT; __env->GetIntArrayRegion(_num_chars,0,1,&num_chars_ELT);
    int num_chars = (int) num_chars_ELT;
    kdu_uint32 Result;
    try { // So we can clean up temporary arrays
    Result = kdu_parse_type_code(string,num_chars);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    num_chars_ELT = (jint) num_chars;
  __env->SetIntArrayRegion(_num_chars,0,1,&num_chars_ELT);
    jlong _Result = (jlong) Result;
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1print_1error(JNIEnv *__env, jobject _self, jstring _message)
{
  try {
    const char *message = NULL;
    if (_message != NULL)
      {
        message = __env->GetStringUTFChars(_message,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_print_error(message);
    } catch (...) {
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
    throw;
    }
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1print_1warning(JNIEnv *__env, jobject _self, jstring _message)
{
  try {
    const char *message = NULL;
    if (_message != NULL)
      {
        message = __env->GetStringUTFChars(_message,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_print_warning(message);
    } catch (...) {
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
    throw;
    }
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1rethrow(JNIEnv *__env, jclass this_class, jint _exc)
{
  try {
    kdu_exception exc = (kdu_exception) _exc;
    kdu_rethrow(exc);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1round(JNIEnv *__env, jclass this_class, jdouble _x)
{
  try {
    double x = (double) _x;
    double Result;
    Result = kdu_round(x);
    jdouble _Result = (jdouble) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jdouble) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Long_1ceil_1ratio(JNIEnv *__env, jclass this_class, jlong _num, jlong _den)
{
  try {
    kdu_long num = (kdu_long) _num;
    kdu_long den = (kdu_long) _den;
    int Result;
    Result = long_ceil_ratio(num,den);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Long_1floor_1ratio(JNIEnv *__env, jclass this_class, jlong _num, jlong _den)
{
  try {
    kdu_long num = (kdu_long) _num;
    kdu_long den = (kdu_long) _den;
    int Result;
    Result = long_floor_ratio(num,den);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Mj2_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer)
{
  try {
    if (_textualizer == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    jp2_box_textualizer *textualizer = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_textualizer,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    mj2_add_box_descriptions(*textualizer);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                Ads_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Ads_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Ads_params_CLS != NULL) return;
  try {
    Ads_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Ads_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Ads_params_CLS==NULL)
      Ads_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Ads_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Ads_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        ads_params *self = (ads_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Ads_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    ads_params *self =
      new ads_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Atk_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Atk_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Atk_params_CLS != NULL) return;
  try {
    Atk_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Atk_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Atk_params_CLS==NULL)
      Atk_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Atk_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Atk_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        atk_params *self = (atk_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Atk_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    atk_params *self =
      new atk_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Cod_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Cod_params_CLS != NULL) return;
  try {
    Cod_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Cod_params_CLS==NULL)
      Cod_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Cod_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Cod_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        cod_params *self = (cod_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Cod_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    cod_params *self =
      new cod_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Cod_1params_Is_1valid_1decomp_1terminator(JNIEnv *__env, jclass this_class, jint _val)
{
  try {
    int val = (int) _val;
    bool Result;
    Result = cod_params::is_valid_decomp_terminator(val);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Cod_1params_Transpose_1decomp(JNIEnv *__env, jclass this_class, jint _val)
{
  try {
    int val = (int) _val;
    int Result;
    Result = cod_params::transpose_decomp(val);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Cod_1params_Expand_1decomp_1bands(JNIEnv *__env, jclass this_class, jint _decomp_val, jshortArray _band_descriptors)
{
  try {
    int decomp_val = (int) _decomp_val;
    kdu_int16 *band_descriptors = NULL;
    jshort *band_descriptors_ELTS = NULL;
    if (_band_descriptors != NULL)
      {
        band_descriptors_ELTS = __env->GetShortArrayElements(_band_descriptors,NULL);
        band_descriptors = (kdu_int16 *) band_descriptors_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    Result = cod_params::expand_decomp_bands(decomp_val,band_descriptors);
    } catch (...) {
    if (_band_descriptors != NULL)
      {
        __env->ReleaseShortArrayElements(_band_descriptors,band_descriptors_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_band_descriptors != NULL)
      {
        __env->ReleaseShortArrayElements(_band_descriptors,band_descriptors_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Get_1max_1decomp_1levels(JNIEnv *__env, jclass this_class, jint _decomp_val, jintArray _max_horizontal_levels, jintArray _max_vertical_levels)
{
  try {
    if ((_max_horizontal_levels == NULL) || (_max_vertical_levels == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    int decomp_val = (int) _decomp_val;
    jint max_horizontal_levels_ELT; __env->GetIntArrayRegion(_max_horizontal_levels,0,1,&max_horizontal_levels_ELT);
    int max_horizontal_levels = (int) max_horizontal_levels_ELT;
    jint max_vertical_levels_ELT; __env->GetIntArrayRegion(_max_vertical_levels,0,1,&max_vertical_levels_ELT);
    int max_vertical_levels = (int) max_vertical_levels_ELT;
    cod_params::get_max_decomp_levels(decomp_val,max_horizontal_levels,max_vertical_levels);
    max_horizontal_levels_ELT = (jint) max_horizontal_levels;
  __env->SetIntArrayRegion(_max_horizontal_levels,0,1,&max_horizontal_levels_ELT);
    max_vertical_levels_ELT = (jint) max_vertical_levels;
  __env->SetIntArrayRegion(_max_vertical_levels,0,1,&max_vertical_levels_ELT);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                Crg_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Crg_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Crg_params_CLS != NULL) return;
  try {
    Crg_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Crg_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Crg_params_CLS==NULL)
      Crg_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Crg_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Crg_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        crg_params *self = (crg_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Crg_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    crg_params *self =
      new crg_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Dfs_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Dfs_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Dfs_params_CLS != NULL) return;
  try {
    Dfs_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Dfs_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Dfs_params_CLS==NULL)
      Dfs_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Dfs_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Dfs_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        dfs_params *self = (dfs_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Dfs_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    dfs_params *self =
      new dfs_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                            Jp2_box_textualizer                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_box_textualizer_CLS != NULL) return;
  try {
    Jp2_box_textualizer_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_box_textualizer_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_box_textualizer_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_box_textualizer *self = (jp2_box_textualizer *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_box_textualizer *self =
      new jp2_box_textualizer();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Add_1box_1type(JNIEnv *__env, jobject _self, jlong _box_type, jstring _box_name)
{
  try {
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    const char *box_name = NULL;
    if (_box_name != NULL)
      {
        box_name = __env->GetStringUTFChars(_box_name,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    jp2_box_textualizer *self = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->add_box_type(box_type,box_name);
    } catch (...) {
    if (_box_name != NULL)
      {
        __env->ReleaseStringUTFChars(_box_name,box_name);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_box_name != NULL)
      {
        __env->ReleaseStringUTFChars(_box_name,box_name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Get_1box_1name(JNIEnv *__env, jobject _self, jlong _box_type)
{
  try {
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    const char * Result;
    jp2_box_textualizer *self = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_box_name(box_type);
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Check_1textualizer_1function(JNIEnv *__env, jobject _self, jlong _box_type)
{
  try {
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool Result;
    jp2_box_textualizer *self = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_textualizer_function(box_type);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Textualize_1box(JNIEnv *__env, jobject _self, jobject _box, jobject _tgt, jboolean _xml_embedded, jint _max_len)
{
  try {
    if (_tgt == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_box_textualizer_CLS==NULL)
      Jp2_box_textualizer_LOADER(__env);
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jp2_input_box *box = (jp2_input_box *)
      _kdu_long_to_addr((_box==NULL)?((jlong) 0):(__env->GetLongField(_box,Jp2_input_box_PTR) & ~((jlong) 1)));
    kdu_message *tgt = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_tgt,Kdu_message_PTR) & ~((jlong) 1));
    bool xml_embedded = (_xml_embedded)?true:false;
    int max_len = (int) _max_len;
    bool Result;
    jp2_box_textualizer *self = (jp2_box_textualizer *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_box_textualizer_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->textualize_box(box,*tgt,xml_embedded,max_len);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                               Jp2_channels                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_channels_CLS != NULL) return;
  try {
    Jp2_channels_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_channels_PTR) & ~((jlong) 1)));
    kdu_int64 src_P = (kdu_int64)((_src==NULL)?((jlong) 0):__env->GetLongField(_src,Jp2_channels_PARAM));
    jp2_channels src;
    ((void **) &src)[0] = src_S;
    ((kdu_int64 *) &src)[1] = src_P;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Init(JNIEnv *__env, jobject _self, jint _num_colours)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int num_colours = (int) _num_colours;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    self.init(num_colours);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1colour_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    self.set_colour_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1opacity_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    self.set_opacity_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1premult_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    self.set_premult_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1chroma_1key(JNIEnv *__env, jobject _self, jint _colour_idx, jint _key_val)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    kdu_int32 key_val = (kdu_int32) _key_val;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    self.set_chroma_key(colour_idx,key_val);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1channels_Get_1num_1colours(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_num_colours();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1colour_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx)
{
  try {
    if ((_codestream_component == NULL) || (_lut_idx == NULL) || (_codestream_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint codestream_component_ELT; __env->GetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    int codestream_component = (int) codestream_component_ELT;
    jint lut_idx_ELT; __env->GetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    int lut_idx = (int) lut_idx_ELT;
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_colour_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
    codestream_component_ELT = (jint) codestream_component;
  __env->SetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    lut_idx_ELT = (jint) lut_idx;
  __env->SetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1opacity_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx)
{
  try {
    if ((_codestream_component == NULL) || (_lut_idx == NULL) || (_codestream_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint codestream_component_ELT; __env->GetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    int codestream_component = (int) codestream_component_ELT;
    jint lut_idx_ELT; __env->GetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    int lut_idx = (int) lut_idx_ELT;
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_opacity_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
    codestream_component_ELT = (jint) codestream_component;
  __env->SetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    lut_idx_ELT = (jint) lut_idx;
  __env->SetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1premult_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx)
{
  try {
    if ((_codestream_component == NULL) || (_lut_idx == NULL) || (_codestream_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint codestream_component_ELT; __env->GetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    int codestream_component = (int) codestream_component_ELT;
    jint lut_idx_ELT; __env->GetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    int lut_idx = (int) lut_idx_ELT;
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_premult_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
    codestream_component_ELT = (jint) codestream_component;
  __env->SetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    lut_idx_ELT = (jint) lut_idx;
  __env->SetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1chroma_1key(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _key_val)
{
  try {
    if (_key_val == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint key_val_ELT; __env->GetIntArrayRegion(_key_val,0,1,&key_val_ELT);
    kdu_int32 key_val = (kdu_int32) key_val_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jp2_channels_PARAM);
    jp2_channels self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_chroma_key(colour_idx,key_val);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jp2_channels_PARAM,(jlong)(self_P));
    key_val_ELT = (jint) key_val;
  __env->SetIntArrayRegion(_key_val,0,1,&key_val_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Jp2_colour                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_colour_CLS != NULL) return;
  try {
    Jp2_colour_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_colour_PTR)));
    jp2_colour src = *((jp2_colour *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__I(JNIEnv *__env, jobject _self, jint _space)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour_space space = (jp2_colour_space) _space;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(space);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__IIIIIIIIIIJI(JNIEnv *__env, jobject _self, jint _space, jint _Lrange, jint _Loff, jint _Lbits, jint _Arange, jint _Aoff, jint _Abits, jint _Brange, jint _Boff, jint _Bbits, jlong _illuminant, jint _temperature)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour_space space = (jp2_colour_space) _space;
    int Lrange = (int) _Lrange;
    int Loff = (int) _Loff;
    int Lbits = (int) _Lbits;
    int Arange = (int) _Arange;
    int Aoff = (int) _Aoff;
    int Abits = (int) _Abits;
    int Brange = (int) _Brange;
    int Boff = (int) _Boff;
    int Bbits = (int) _Bbits;
    kdu_uint32 illuminant = (kdu_uint32) _illuminant;
    kdu_uint16 temperature = (kdu_uint16) _temperature;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(space,Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits,illuminant,temperature);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3B(JNIEnv *__env, jobject _self, jbyteArray _icc_profile)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte *icc_profile = NULL;
    jbyte *icc_profile_ELTS = NULL;
    if (_icc_profile != NULL)
      {
        icc_profile_ELTS = __env->GetByteArrayElements(_icc_profile,NULL);
        icc_profile = (kdu_byte *) icc_profile_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(icc_profile);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_icc_profile != NULL)
      {
        __env->ReleaseByteArrayElements(_icc_profile,icc_profile_ELTS,0);
      }
    throw;
    }
    if (_icc_profile != NULL)
      {
        __env->ReleaseByteArrayElements(_icc_profile,icc_profile_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3BI_3B(JNIEnv *__env, jobject _self, jbyteArray _uuid, jint _data_bytes, jbyteArray _data)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    int data_bytes = (int) _data_bytes;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(uuid,data_bytes,data);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__DDI(JNIEnv *__env, jobject _self, jdouble _gamma, jdouble _beta, jint _num_points)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    int num_points = (int) _num_points;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(gamma,beta,num_points);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3D_3D_3DDDIZ(JNIEnv *__env, jobject _self, jdoubleArray _xy_red, jdoubleArray _xy_green, jdoubleArray _xy_blue, jdouble _gamma, jdouble _beta, jint _num_points, jboolean _reference_is_D50)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    double *xy_red = NULL;
    jdouble *xy_red_ELTS = NULL;
    if (_xy_red != NULL)
      {
        xy_red_ELTS = __env->GetDoubleArrayElements(_xy_red,NULL);
        xy_red = (double *) xy_red_ELTS;
      }
    double *xy_green = NULL;
    jdouble *xy_green_ELTS = NULL;
    if (_xy_green != NULL)
      {
        xy_green_ELTS = __env->GetDoubleArrayElements(_xy_green,NULL);
        xy_green = (double *) xy_green_ELTS;
      }
    double *xy_blue = NULL;
    jdouble *xy_blue_ELTS = NULL;
    if (_xy_blue != NULL)
      {
        xy_blue_ELTS = __env->GetDoubleArrayElements(_xy_blue,NULL);
        xy_blue = (double *) xy_blue_ELTS;
      }
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    int num_points = (int) _num_points;
    bool reference_is_D50 = (_reference_is_D50)?true:false;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(xy_red,xy_green,xy_blue,gamma,beta,num_points,reference_is_D50);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_xy_red != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_red,xy_red_ELTS,0);
      }
    if (_xy_green != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_green,xy_green_ELTS,0);
      }
    if (_xy_blue != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_blue,xy_blue_ELTS,0);
      }
    throw;
    }
    if (_xy_red != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_red,xy_red_ELTS,0);
      }
    if (_xy_green != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_green,xy_green_ELTS,0);
      }
    if (_xy_blue != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_blue,xy_blue_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1num_1colours(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_num_colours();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1space(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour_space Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_space();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Is_1opponent_1space(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.is_opponent_space();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1precedence(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_precedence();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jbyte JNICALL Java_kdu_1jni_Jp2_1colour_Get_1approximation_1level(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_approximation_level();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    jbyte _Result = (jbyte) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jbyte) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_Get_1icc_1profile___3I(JNIEnv *__env, jobject _self, jintArray _num_bytes)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int *num_bytes = NULL;
    jint *num_bytes_ELTS = NULL;
    if (_num_bytes != NULL)
      {
        num_bytes_ELTS = __env->GetIntArrayElements(_num_bytes,NULL);
        num_bytes = (int *) num_bytes_ELTS;
      }
    const kdu_byte *Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_icc_profile(num_bytes);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    throw;
    }
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1icc_1profile___3BI(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _buf_len)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int buf_len = (int) _buf_len;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_icc_profile(buffer,buf_len);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1lab_1params(JNIEnv *__env, jobject _self, jintArray _Lrange, jintArray _Loff, jintArray _Lbits, jintArray _Arange, jintArray _Aoff, jintArray _Abits, jintArray _Brange, jintArray _Boff, jintArray _Bbits, jlongArray _illuminant, jintArray _temperature)
{
  try {
    if ((_Lrange == NULL) || (_Loff == NULL) || (_Lbits == NULL) || (_Arange == NULL) || (_Aoff == NULL) || (_Abits == NULL) || (_Brange == NULL) || (_Boff == NULL) || (_Bbits == NULL) || (_illuminant == NULL) || (_temperature == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jint Lrange_ELT; __env->GetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    int Lrange = (int) Lrange_ELT;
    jint Loff_ELT; __env->GetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    int Loff = (int) Loff_ELT;
    jint Lbits_ELT; __env->GetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    int Lbits = (int) Lbits_ELT;
    jint Arange_ELT; __env->GetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    int Arange = (int) Arange_ELT;
    jint Aoff_ELT; __env->GetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    int Aoff = (int) Aoff_ELT;
    jint Abits_ELT; __env->GetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    int Abits = (int) Abits_ELT;
    jint Brange_ELT; __env->GetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    int Brange = (int) Brange_ELT;
    jint Boff_ELT; __env->GetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    int Boff = (int) Boff_ELT;
    jint Bbits_ELT; __env->GetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    int Bbits = (int) Bbits_ELT;
    jlong illuminant_ELT; __env->GetLongArrayRegion(_illuminant,0,1,&illuminant_ELT);
    kdu_uint32 illuminant = (kdu_uint32) illuminant_ELT;
    jint temperature_ELT; __env->GetIntArrayRegion(_temperature,0,1,&temperature_ELT);
    kdu_uint16 temperature = (kdu_uint16) temperature_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_lab_params(Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits,illuminant,temperature);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    Lrange_ELT = (jint) Lrange;
  __env->SetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    Loff_ELT = (jint) Loff;
  __env->SetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    Lbits_ELT = (jint) Lbits;
  __env->SetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    Arange_ELT = (jint) Arange;
  __env->SetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    Aoff_ELT = (jint) Aoff;
  __env->SetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    Abits_ELT = (jint) Abits;
  __env->SetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    Brange_ELT = (jint) Brange;
  __env->SetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    Boff_ELT = (jint) Boff;
  __env->SetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    Bbits_ELT = (jint) Bbits;
  __env->SetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    illuminant_ELT = (jlong) illuminant;
  __env->SetLongArrayRegion(_illuminant,0,1,&illuminant_ELT);
    temperature_ELT = (jint) temperature;
  __env->SetIntArrayRegion(_temperature,0,1,&temperature_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1jab_1params(JNIEnv *__env, jobject _self, jintArray _Lrange, jintArray _Loff, jintArray _Lbits, jintArray _Arange, jintArray _Aoff, jintArray _Abits, jintArray _Brange, jintArray _Boff, jintArray _Bbits)
{
  try {
    if ((_Lrange == NULL) || (_Loff == NULL) || (_Lbits == NULL) || (_Arange == NULL) || (_Aoff == NULL) || (_Abits == NULL) || (_Brange == NULL) || (_Boff == NULL) || (_Bbits == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jint Lrange_ELT; __env->GetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    int Lrange = (int) Lrange_ELT;
    jint Loff_ELT; __env->GetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    int Loff = (int) Loff_ELT;
    jint Lbits_ELT; __env->GetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    int Lbits = (int) Lbits_ELT;
    jint Arange_ELT; __env->GetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    int Arange = (int) Arange_ELT;
    jint Aoff_ELT; __env->GetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    int Aoff = (int) Aoff_ELT;
    jint Abits_ELT; __env->GetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    int Abits = (int) Abits_ELT;
    jint Brange_ELT; __env->GetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    int Brange = (int) Brange_ELT;
    jint Boff_ELT; __env->GetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    int Boff = (int) Boff_ELT;
    jint Bbits_ELT; __env->GetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    int Bbits = (int) Bbits_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_jab_params(Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    Lrange_ELT = (jint) Lrange;
  __env->SetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    Loff_ELT = (jint) Loff;
  __env->SetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    Lbits_ELT = (jint) Lbits;
  __env->SetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    Arange_ELT = (jint) Arange;
  __env->SetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    Aoff_ELT = (jint) Aoff;
  __env->SetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    Abits_ELT = (jint) Abits;
  __env->SetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    Brange_ELT = (jint) Brange;
  __env->SetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    Boff_ELT = (jint) Boff;
  __env->SetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    Bbits_ELT = (jint) Bbits;
  __env->SetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Check_1cie_1default(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.check_cie_default();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1vendor_1uuid(JNIEnv *__env, jobject _self, jbyteArray _uuid)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_vendor_uuid(uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_Get_1vendor_1data(JNIEnv *__env, jobject _self, jintArray _num_bytes)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int *num_bytes = NULL;
    jint *num_bytes_ELTS = NULL;
    if (_num_bytes != NULL)
      {
        num_bytes_ELTS = __env->GetIntArrayElements(_num_bytes,NULL);
        num_bytes = (int *) num_bytes_ELTS;
      }
    kdu_byte *Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_vendor_data(num_bytes);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    throw;
    }
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                           Jp2_colour_converter                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_colour_converter_CLS != NULL) return;
  try {
    Jp2_colour_converter_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_colour_converter_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_colour_converter_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_colour_converter *self = (jp2_colour_converter *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_colour_converter *self =
      new jp2_colour_converter();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Clear(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->clear();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Init(JNIEnv *__env, jobject _self, jobject _colour, jboolean _use_wide_gamut, jboolean _prefer_fast_approximations)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    void *colour_S = _kdu_long_to_addr((_colour==NULL)?((jlong) 0):(__env->GetLongField(_colour,Jp2_colour_PTR)));
    jp2_colour colour = *((jp2_colour *)(&colour_S));
    bool use_wide_gamut = (_use_wide_gamut)?true:false;
    bool prefer_fast_approximations = (_prefer_fast_approximations)?true:false;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->init(colour,use_wide_gamut,prefer_fast_approximations);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Get_1wide_1gamut(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_wide_gamut();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Is_1approximate(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_approximate();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Is_1non_1trivial(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_non_trivial();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1lum(JNIEnv *__env, jobject _self, jobject _line, jint _width)
{
  try {
    if (_line == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->convert_lum(*line,width);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1rgb(JNIEnv *__env, jobject _self, jobject _red, jobject _green, jobject _blue, jint _width)
{
  try {
    if ((_red == NULL) || (_green == NULL) || (_blue == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *red = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_red,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *green = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_green,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *blue = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_blue,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->convert_rgb(*red,*green,*blue,width);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1rgb4(JNIEnv *__env, jobject _self, jobject _red, jobject _green, jobject _blue, jobject _extra, jint _width)
{
  try {
    if ((_red == NULL) || (_green == NULL) || (_blue == NULL) || (_extra == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *red = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_red,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *green = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_green,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *blue = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_blue,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *extra = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_extra,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->convert_rgb4(*red,*green,*blue,*extra,width);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                            Jp2_data_references                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1data_1references_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_data_references_CLS != NULL) return;
  try {
    Jp2_data_references_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1data_1references_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Add_1url(JNIEnv *__env, jobject _self, jstring _url, jint _url_idx)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    const char *url = NULL;
    if (_url != NULL)
      {
        url = __env->GetStringUTFChars(_url,NULL);
      }
    int url_idx = (int) _url_idx;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.add_url(url,url_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Add_1file_1url(JNIEnv *__env, jobject _self, jstring _pathname, jint _url_idx)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    const char *pathname = NULL;
    if (_pathname != NULL)
      {
        pathname = __env->GetStringUTFChars(_pathname,NULL);
      }
    int url_idx = (int) _url_idx;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.add_file_url(pathname,url_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_pathname != NULL)
      {
        __env->ReleaseStringUTFChars(_pathname,pathname);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_pathname != NULL)
      {
        __env->ReleaseStringUTFChars(_pathname,pathname);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1num_1urls(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.get_num_urls();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Find_1url(JNIEnv *__env, jobject _self, jstring _url)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    const char *url = NULL;
    if (_url != NULL)
      {
        url = __env->GetStringUTFChars(_url,NULL);
      }
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.find_url(url);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1url(JNIEnv *__env, jobject _self, jint _idx)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    int idx = (int) _idx;
    const char * Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.get_url(idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1file_1url(JNIEnv *__env, jobject _self, jint _idx)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    int idx = (int) _idx;
    const char * Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.get_file_url(idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                              Jp2_dimensions                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_dimensions_CLS != NULL) return;
  try {
    Jp2_dimensions_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_dimensions_PTR)));
    jp2_dimensions src = *((jp2_dimensions *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Init__Lkdu_1jni_Kdu_1coords_2IZI(JNIEnv *__env, jobject _self, jobject _size, jint _num_components, jboolean _unknown_space, jint _compression_type)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_size,Kdu_coords_PTR) & ~((jlong) 1));
    int num_components = (int) _num_components;
    bool unknown_space = (_unknown_space)?true:false;
    int compression_type = (int) _compression_type;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.init(*size,num_components,unknown_space,compression_type);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Init__Lkdu_1jni_Siz_1params_2Z(JNIEnv *__env, jobject _self, jobject _siz, jboolean _unknown_space)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    siz_params *siz = (siz_params *)
      _kdu_long_to_addr((_siz==NULL)?((jlong) 0):(__env->GetLongField(_siz,Siz_params_PTR) & ~((jlong) 1)));
    bool unknown_space = (_unknown_space)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.init(siz,unknown_space);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__Lkdu_1jni_Kdu_1params_2(JNIEnv *__env, jobject _self, jobject _root)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *root = (kdu_params *)
      _kdu_long_to_addr((_root==NULL)?((jlong) 0):(__env->GetLongField(_root,Kdu_params_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.finalize_compatibility(root);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__IZ(JNIEnv *__env, jobject _self, jint _profile, jboolean _is_jpx_baseline)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int profile = (int) _profile;
    bool is_jpx_baseline = (_is_jpx_baseline)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.finalize_compatibility(profile,is_jpx_baseline);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__Lkdu_1jni_Jp2_1dimensions_2(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_dimensions_PTR)));
    jp2_dimensions src = *((jp2_dimensions *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.finalize_compatibility(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Set_1precision(JNIEnv *__env, jobject _self, jint _component_idx, jint _bit_depth, jboolean _is_signed)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int component_idx = (int) _component_idx;
    int bit_depth = (int) _bit_depth;
    bool is_signed = (_is_signed)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.set_precision(component_idx,bit_depth,is_signed);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Set_1ipr_1box_1available(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.set_ipr_box_available();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result_copy = self.get_size();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1num_1components(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_num_components();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Colour_1space_1known(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.colour_space_known();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _component_idx)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int component_idx = (int) _component_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_bit_depth(component_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1signed(JNIEnv *__env, jobject _self, jint _component_idx)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int component_idx = (int) _component_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_signed(component_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1compression_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_compression_type();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Is_1ipr_1box_1available(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.is_ipr_box_available();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                              Jp2_family_src                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_family_src_CLS != NULL) return;
  try {
    Jp2_family_src_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_family_src_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_family_src_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_family_src *self = (jp2_family_src *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_family_src *self =
      new jp2_family_src();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    bool Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Ljava_lang_String_2Z(JNIEnv *__env, jobject _self, jstring _fname, jboolean _allow_seeks)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool allow_seeks = (_allow_seeks)?true:false;
    try { // So we can clean up temporary arrays
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(fname,allow_seeks);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Lkdu_1jni_Kdu_1compressed_1source_2(JNIEnv *__env, jobject _self, jobject _indirect)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *indirect = (kdu_compressed_source *)
      _kdu_long_to_addr((_indirect==NULL)?((jlong) 0):(__env->GetLongField(_indirect,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(indirect);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Lkdu_1jni_Kdu_1cache_2(JNIEnv *__env, jobject _self, jobject _cache)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *cache = (kdu_cache *)
      _kdu_long_to_addr((_cache==NULL)?((jlong) 0):(__env->GetLongField(_cache,Kdu_cache_PTR) & ~((jlong) 1)));
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(cache);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Uses_1cache(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    bool Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->uses_cache();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Is_1top_1level_1complete(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    bool Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_top_level_complete();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Is_1codestream_1main_1header_1complete(JNIEnv *__env, jobject _self, jlong _logical_codestream_idx)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    kdu_long logical_codestream_idx = (kdu_long) _logical_codestream_idx;
    bool Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_codestream_main_header_complete(logical_codestream_idx);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1family_1src_Get_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    int Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_id();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1family_1src_Get_1filename(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    const char * Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_filename();
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Acquire_1lock(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->acquire_lock();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Release_1lock(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->release_lock();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Synch_1with_1cache(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->synch_with_cache();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                              Jp2_family_tgt                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_family_tgt_CLS != NULL) return;
  try {
    Jp2_family_tgt_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_family_tgt_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_family_tgt_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_family_tgt *self = (jp2_family_tgt *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_family_tgt *self =
      new jp2_family_tgt();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    bool Result;
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _fname)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    try { // So we can clean up temporary arrays
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(fname);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__Lkdu_1jni_Kdu_1compressed_1target_2(JNIEnv *__env, jobject _self, jobject _indirect)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *indirect = (kdu_compressed_target *)
      _kdu_long_to_addr((_indirect==NULL)?((jlong) 0):(__env->GetLongField(_indirect,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(indirect);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__J(JNIEnv *__env, jobject _self, jlong _simulated_start_pos)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    kdu_long simulated_start_pos = (kdu_long) _simulated_start_pos;
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(simulated_start_pos);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Get_1bytes_1written(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    kdu_long Result;
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_bytes_written();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                               Jp2_input_box                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_input_box_CLS != NULL) return;
  try {
    Jp2_input_box_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_input_box_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_input_box_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_input_box *self = (jp2_input_box *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_input_box *self =
      new jp2_input_box();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1jpx_1box(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    jpx_input_box *Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_jpx_box();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jpx_input_box_CLS,Jpx_input_box_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open__Lkdu_1jni_Jp2_1family_1src_2Lkdu_1jni_Jp2_1locator_2(JNIEnv *__env, jobject _self, jobject _src, jobject _locator)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_family_src *src = (jp2_family_src *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    jp2_locator *locator = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_locator,Jp2_locator_PTR) & ~((jlong) 1));
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open(src,*locator);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open__Lkdu_1jni_Jp2_1input_1box_2(JNIEnv *__env, jobject _self, jobject _super_box)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *super_box = (jp2_input_box *)
      _kdu_long_to_addr((_super_box==NULL)?((jlong) 0):(__env->GetLongField(_super_box,Jp2_input_box_PTR) & ~((jlong) 1)));
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open(super_box);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open_1next(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open_next();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open_1as(JNIEnv *__env, jobject _self, jlong _box_type, jobject _ultimate_src, jobject _box_locator, jobject _contents_locator, jlong _contents_length)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    jp2_family_src *ultimate_src = (jp2_family_src *)
      _kdu_long_to_addr((_ultimate_src==NULL)?((jlong) 0):(__env->GetLongField(_ultimate_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    jp2_locator *box_locator = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_box_locator,Jp2_locator_PTR) & ~((jlong) 1));
    jp2_locator *contents_locator = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_contents_locator,Jp2_locator_PTR) & ~((jlong) 1));
    kdu_long contents_length = (kdu_long) _contents_length;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open_as(box_type,ultimate_src,*box_locator,*contents_locator,contents_length);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Close_1without_1checking(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close_without_checking();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Transplant(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *src = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_src,Jp2_input_box_PTR) & ~((jlong) 1));
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->transplant(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Fork(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *src = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_src,Jp2_input_box_PTR) & ~((jlong) 1));
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->fork(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Has_1caching_1source(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->has_caching_source();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_uint32 Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_box_type();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1locator(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_locator Result_copy;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_locator();
    jobject _Result = NULL;
      {
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        _Result = __env->NewObject(Jp2_locator_CLS,Jp2_locator_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1contents_1locator(JNIEnv *__env, jobject _self, jintArray _class_id)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_int32 *class_id = NULL;
    jint *class_id_ELTS = NULL;
    if (_class_id != NULL)
      {
        class_id_ELTS = __env->GetIntArrayElements(_class_id,NULL);
        class_id = (kdu_int32 *) class_id_ELTS;
      }
    jp2_locator Result_copy;
    try { // So we can clean up temporary arrays
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_contents_locator(class_id);
    } catch (...) {
    if (_class_id != NULL)
      {
        __env->ReleaseIntArrayElements(_class_id,class_id_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
      {
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        _Result = __env->NewObject(Jp2_locator_CLS,Jp2_locator_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    if (_class_id != NULL)
      {
        __env->ReleaseIntArrayElements(_class_id,class_id_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1header_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    int Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_box_header_length();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1remaining_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_long Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_remaining_bytes();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_long Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_box_bytes();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Is_1complete(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_complete();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Load_1in_1memory(JNIEnv *__env, jobject _self, jint _max_bytes)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    int max_bytes = (int) _max_bytes;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->load_in_memory(max_bytes);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3J(JNIEnv *__env, jobject _self, jlongArray _dword)
{
  try {
    if (_dword == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jlong dword_ELT; __env->GetLongArrayRegion(_dword,0,1,&dword_ELT);
    kdu_uint32 dword = (kdu_uint32) dword_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read(dword);
    dword_ELT = (jlong) dword;
  __env->SetLongArrayRegion(_dword,0,1,&dword_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3I(JNIEnv *__env, jobject _self, jintArray _dword)
{
  try {
    if (_dword == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jint dword_ELT; __env->GetIntArrayRegion(_dword,0,1,&dword_ELT);
    kdu_int32 dword = (kdu_int32) dword_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read(dword);
    dword_ELT = (jint) dword;
  __env->SetIntArrayRegion(_dword,0,1,&dword_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3S(JNIEnv *__env, jobject _self, jshortArray _word)
{
  try {
    if (_word == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jshort word_ELT; __env->GetShortArrayRegion(_word,0,1,&word_ELT);
    kdu_int16 word = (kdu_int16) word_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read(word);
    word_ELT = (jshort) word;
  __env->SetShortArrayRegion(_word,0,1,&word_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3B(JNIEnv *__env, jobject _self, jbyteArray _byte)
{
  try {
    if (_byte == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jbyte byte_ELT; __env->GetByteArrayRegion(_byte,0,1,&byte_ELT);
    kdu_byte byte = (kdu_byte) byte_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read(byte);
    byte_ELT = (jbyte) byte;
  __env->SetByteArrayRegion(_byte,0,1,&byte_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Set_1codestream_1scope(JNIEnv *__env, jobject _self, jlong _logical_codestream_id, jboolean _need_main_header)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_long logical_codestream_id = (kdu_long) _logical_codestream_id;
    bool need_main_header = (_need_main_header)?true:false;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_codestream_scope(logical_codestream_id,need_main_header);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1codestream_1scope(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_long Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_codestream_scope();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Jp2_locator                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_locator_CLS != NULL) return;
  try {
    Jp2_locator_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_locator_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_locator_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_locator *self = (jp2_locator *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_locator *self =
      new jp2_locator();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1locator_Is_1null(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    bool Result;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_null();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Get_1file_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_long Result;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_file_pos();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Set_1file_1pos(JNIEnv *__env, jobject _self, jlong _pos)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_long pos = (kdu_long) _pos;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_file_pos(pos);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Get_1databin_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_long Result;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_databin_id();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Get_1databin_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_long Result;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_databin_pos();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                              Jp2_output_box                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_output_box_CLS != NULL) return;
  try {
    Jp2_output_box_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_output_box_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_output_box_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_output_box *self = (jp2_output_box *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_output_box *self =
      new jp2_output_box();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__Lkdu_1jni_Jp2_1family_1tgt_2JZZ(JNIEnv *__env, jobject _self, jobject _tgt, jlong _box_type, jboolean _rubber_length, jboolean _headerless)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    bool headerless = (_headerless)?true:false;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(tgt,box_type,rubber_length,headerless);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__Lkdu_1jni_Jp2_1output_1box_2JZZ(JNIEnv *__env, jobject _self, jobject _super_box, jlong _box_type, jboolean _rubber_length, jboolean _headerless)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *super_box = (jp2_output_box *)
      _kdu_long_to_addr((_super_box==NULL)?((jlong) 0):(__env->GetLongField(_super_box,Jp2_output_box_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    bool headerless = (_headerless)?true:false;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(super_box,box_type,rubber_length,headerless);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__J(JNIEnv *__env, jobject _self, jlong _box_type)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(box_type);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open_1next(JNIEnv *__env, jobject _self, jlong _box_type, jboolean _rubber_length, jboolean _headerless)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    bool headerless = (_headerless)?true:false;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open_next(box_type,rubber_length,headerless);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_box_type();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1box_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_long Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_box_length();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1start_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_long Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_start_pos();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1header_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    int Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_header_length();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1output_1box_Use_1long_1header(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    int Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->use_long_header();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1contents(JNIEnv *__env, jobject _self, jlongArray _contents_length)
{
  try {
    if (_contents_length == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jlong contents_length_ELT; __env->GetLongArrayRegion(_contents_length,0,1,&contents_length_ELT);
    kdu_long contents_length = (kdu_long) contents_length_ELT;
    const kdu_byte *Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_contents(contents_length);
    contents_length_ELT = (jlong) contents_length;
  __env->SetLongArrayRegion(_contents_length,0,1,&contents_length_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Write_1box(JNIEnv *__env, jobject _self, jobject _tgt, jboolean _force_headerless)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    bool force_headerless = (_force_headerless)?true:false;
    kdu_long Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write_box(tgt,force_headerless);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Set_1rubber_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_rubber_length();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Write_1header_1last(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_header_last();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Reopen(JNIEnv *__env, jobject _self, jlong _box_type, jlong _offset)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    kdu_long offset = (kdu_long) _offset;
    kdu_long Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->reopen(box_type,offset);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write_1free_1and_1close(JNIEnv *__env, jobject _self, jlong _free_bytes)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_long free_bytes = (kdu_long) _free_bytes;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write_free_and_close(free_bytes);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__J(JNIEnv *__env, jobject _self, jlong _dword)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 dword = (kdu_uint32) _dword;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write(dword);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__I(JNIEnv *__env, jobject _self, jint _dword)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_int32 dword = (kdu_int32) _dword;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write(dword);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__S(JNIEnv *__env, jobject _self, jshort _word)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_int16 word = (kdu_int16) _word;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write(word);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__B(JNIEnv *__env, jobject _self, jbyte _byte)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_byte byte = (kdu_byte) _byte;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write(byte);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Jp2_palette                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_palette_CLS != NULL) return;
  try {
    Jp2_palette_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1palette_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_palette_PTR)));
    jp2_palette src = *((jp2_palette *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Init(JNIEnv *__env, jobject _self, jint _num_luts, jint _num_entries)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int num_luts = (int) _num_luts;
    int num_entries = (int) _num_entries;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.init(num_luts,num_entries);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Set_1lut(JNIEnv *__env, jobject _self, jint _lut_idx, jintArray _lut, jint _bit_depth, jboolean _is_signed)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    kdu_int32 *lut = NULL;
    jint *lut_ELTS = NULL;
    if (_lut != NULL)
      {
        lut_ELTS = __env->GetIntArrayElements(_lut,NULL);
        lut = (kdu_int32 *) lut_ELTS;
      }
    int bit_depth = (int) _bit_depth;
    bool is_signed = (_is_signed)?true:false;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.set_lut(lut_idx,lut,bit_depth,is_signed);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_lut != NULL)
      {
        __env->ReleaseIntArrayElements(_lut,lut_ELTS,0);
      }
    throw;
    }
    if (_lut != NULL)
      {
        __env->ReleaseIntArrayElements(_lut,lut_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1num_1entries(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_num_entries();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1num_1luts(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_num_luts();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _lut_idx)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_bit_depth(lut_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1palette_Get_1signed(JNIEnv *__env, jobject _self, jint _lut_idx)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_signed(lut_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Get_1lut__I_3F(JNIEnv *__env, jobject _self, jint _lut_idx, jfloatArray _lut)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    float *lut = NULL;
    jfloat *lut_ELTS = NULL;
    if (_lut != NULL)
      {
        lut_ELTS = __env->GetFloatArrayElements(_lut,NULL);
        lut = (float *) lut_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.get_lut(lut_idx,lut);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_lut != NULL)
      {
        __env->ReleaseFloatArrayElements(_lut,lut_ELTS,0);
      }
    throw;
    }
    if (_lut != NULL)
      {
        __env->ReleaseFloatArrayElements(_lut,lut_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                              Jp2_resolution                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_resolution_CLS != NULL) return;
  try {
    Jp2_resolution_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1resolution_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_resolution_PTR)));
    jp2_resolution src = *((jp2_resolution *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Init(JNIEnv *__env, jobject _self, jfloat _aspect_ratio)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    float aspect_ratio = (float) _aspect_ratio;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.init(aspect_ratio);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Set_1different_1capture_1aspect_1ratio(JNIEnv *__env, jobject _self, jfloat _aspect_ratio)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    float aspect_ratio = (float) _aspect_ratio;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.set_different_capture_aspect_ratio(aspect_ratio);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Set_1resolution(JNIEnv *__env, jobject _self, jfloat _resolution, jboolean _for_display)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    float resolution = (float) _resolution;
    bool for_display = (_for_display)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.set_resolution(resolution,for_display);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Jp2_1resolution_Get_1aspect_1ratio(JNIEnv *__env, jobject _self, jboolean _for_display)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    bool for_display = (_for_display)?true:false;
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    Result = self.get_aspect_ratio(for_display);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jfloat _Result = (jfloat) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jfloat) 0;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Jp2_1resolution_Get_1resolution(JNIEnv *__env, jobject _self, jboolean _for_display)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    bool for_display = (_for_display)?true:false;
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    Result = self.get_resolution(for_display);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jfloat _Result = (jfloat) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jfloat) 0;
}

/*****************************************************************************/
/*                                Jp2_source                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_source_CLS != NULL) return;
  try {
    Jp2_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_source *self = (jp2_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1source_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_source *self =
      new jp2_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1source_Read_1header(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    bool Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read_header();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1source_Get_1header_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    kdu_long Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_header_bytes();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_dimensions();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_dimensions_CLS,Jp2_dimensions_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_palette_CLS,Jp2_palette_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jp2_channels_CLS,Jp2_channels_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_colour_CLS,Jp2_colour_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_resolution_CLS,Jp2_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                                Jp2_target                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_target_CLS != NULL) return;
  try {
    Jp2_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_target *self = (jp2_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1target_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_target *self =
      new jp2_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open__Lkdu_1jni_Jp2_1family_1tgt_2(JNIEnv *__env, jobject _self, jobject _tgt)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(tgt);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open__Lkdu_1jni_Jp2_1family_1tgt_2JZ(JNIEnv *__env, jobject _self, jobject _tgt, jlong _box_type, jboolean _rubber_length)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(tgt,box_type,rubber_length);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open__Lkdu_1jni_Jp2_1output_1box_2JZ(JNIEnv *__env, jobject _self, jobject _super_box, jlong _box_type, jboolean _rubber_length)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *super_box = (jp2_output_box *)
      _kdu_long_to_addr((_super_box==NULL)?((jlong) 0):(__env->GetLongField(_super_box,Jp2_output_box_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(super_box,box_type,rubber_length);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Write_1header(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_header();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open_1codestream(JNIEnv *__env, jobject _self, jboolean _rubber_length)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    bool rubber_length = (_rubber_length)?true:false;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open_codestream(rubber_length);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_dimensions();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_dimensions_CLS,Jp2_dimensions_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_colour_CLS,Jp2_colour_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_palette_CLS,Jp2_palette_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jp2_channels_CLS,Jp2_channels_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_resolution_CLS,Jp2_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                         Jp2_threadsafe_family_src                         */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1threadsafe_1family_1src_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_threadsafe_family_src_CLS != NULL) return;
  try {
    Jp2_threadsafe_family_src_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1threadsafe_1family_1src_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_threadsafe_family_src_CLS==NULL)
      Jp2_threadsafe_family_src_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_threadsafe_family_src_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_threadsafe_family_src_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_threadsafe_family_src *self = (jp2_threadsafe_family_src *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1threadsafe_1family_1src_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_threadsafe_family_src *self =
      new jp2_threadsafe_family_src();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Jpb_source                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpb_source_CLS != NULL) return;
  try {
    Jpb_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpb_source_CLS==NULL)
      Jpb_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpb_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpb_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpb_source *self = (jpb_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1source_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    jpb_source *self =
      new jpb_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpb_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpb_source_CLS==NULL)
      Jpb_source_LOADER(__env);
    bool Result;
    jpb_source *self = (jpb_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpb_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible)
{
  try {
    if (Jpb_source_CLS==NULL)
      Jpb_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *src = (jp2_family_src *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    bool return_if_incompatible = (_return_if_incompatible)?true:false;
    int Result;
    jpb_source *self = (jpb_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open(src,return_if_incompatible);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpb_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpb_source_CLS==NULL)
      Jpb_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *Result;
    jpb_source *self = (jpb_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ultimate_src();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_family_src_CLS,Jp2_family_src_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jbyte JNICALL Java_kdu_1jni_Jpb_1source_Get_1frame_1space(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpb_source_CLS==NULL)
      Jpb_source_LOADER(__env);
    kdu_byte Result;
    jpb_source *self = (jpb_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_frame_space();
    jbyte _Result = (jbyte) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jbyte) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1source_Get_1frame_1timecode(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpb_source_CLS==NULL)
      Jpb_source_LOADER(__env);
    kdu_uint32 Result;
    jpb_source *self = (jpb_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_frame_timecode();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Jpb_target                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpb_target_CLS != NULL) return;
  try {
    Jpb_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpb_target_CLS==NULL)
      Jpb_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpb_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpb_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpb_target *self = (jpb_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1target_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    jpb_target *self =
      new jpb_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpb_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpb_target_CLS==NULL)
      Jpb_target_LOADER(__env);
    bool Result;
    jpb_target *self = (jpb_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt, jint _timescale, jint _frame_duration, jint _field_order, jbyte _frame_space, jlong _max_bitrate, jlong _initial_timecode, jint _timecode_flags)
{
  try {
    if (Jpb_target_CLS==NULL)
      Jpb_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    kdu_uint16 timescale = (kdu_uint16) _timescale;
    kdu_uint16 frame_duration = (kdu_uint16) _frame_duration;
    kdu_field_order field_order = (kdu_field_order) _field_order;
    kdu_byte frame_space = (kdu_byte) _frame_space;
    kdu_uint32 max_bitrate = (kdu_uint32) _max_bitrate;
    kdu_uint32 initial_timecode = (kdu_uint32) _initial_timecode;
    int timecode_flags = (int) _timecode_flags;
    jpb_target *self = (jpb_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(tgt,timescale,frame_duration,field_order,frame_space,max_bitrate,initial_timecode,timecode_flags);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Set_1next_1timecode(JNIEnv *__env, jobject _self, jlong _timecode)
{
  try {
    if (Jpb_target_CLS==NULL)
      Jpb_target_LOADER(__env);
    kdu_uint32 timecode = (kdu_uint32) _timecode;
    jpb_target *self = (jpb_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_next_timecode(timecode);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1target_Get_1next_1timecode(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpb_target_CLS==NULL)
      Jpb_target_LOADER(__env);
    kdu_uint32 Result;
    jpb_target *self = (jpb_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_next_timecode();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1target_Get_1last_1timecode(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpb_target_CLS==NULL)
      Jpb_target_LOADER(__env);
    kdu_uint32 Result;
    jpb_target *self = (jpb_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpb_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_last_timecode();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                           Jpx_codestream_source                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_codestream_source_CLS != NULL) return;
  try {
    Jpx_codestream_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Get_1codestream_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_codestream_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Get_1header_1loc(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_locator Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result_copy = self.get_header_loc();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        _Result = __env->NewObject(Jp2_locator_CLS,Jp2_locator_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1dimensions(JNIEnv *__env, jobject _self, jboolean _finalize_compatibility)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool finalize_compatibility = (_finalize_compatibility)?true:false;
    jp2_dimensions Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_dimensions(finalize_compatibility);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_dimensions_CLS,Jp2_dimensions_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_palette();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_palette_CLS,Jp2_palette_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Enum_1layer_1ids(JNIEnv *__env, jobject _self, jint _last_layer_id)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    int last_layer_id = (int) _last_layer_id;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.enum_layer_ids(last_layer_id);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Stream_1ready(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.stream_ready();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1fragment_1list(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    jpx_fragment_list Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_fragment_list();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_fragment_list_CLS,Jpx_fragment_list_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Open_1stream(JNIEnv *__env, jobject _self, jobject _my_resource)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    jpx_input_box *my_resource = (jpx_input_box *)
      _kdu_long_to_addr((_my_resource==NULL)?((jlong) 0):(__env->GetLongField(_my_resource,Jpx_input_box_PTR) & ~((jlong) 1)));
    jpx_input_box *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_codestream_source_PARAM);
    jpx_codestream_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.open_stream(my_resource);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_codestream_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jpx_input_box_CLS,Jpx_input_box_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                           Jpx_codestream_target                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_codestream_target_CLS != NULL) return;
  try {
    Jpx_codestream_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Get_1codestream_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.get_codestream_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_dimensions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_dimensions_CLS,Jp2_dimensions_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_palette();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_palette_CLS,Jp2_palette_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Copy_1attributes(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_codestream_source_PTR) & ~((jlong) 1)));
    kdu_int64 src_P = (kdu_int64)((_src==NULL)?((jlong) 0):__env->GetLongField(_src,Jpx_codestream_source_PARAM));
    jpx_codestream_source src;
    ((void **) &src)[0] = src_S;
    ((kdu_int64 *) &src)[1] = src_P;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    self.copy_attributes(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1fragment_1list(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    jpx_fragment_list Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_fragment_list();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_fragment_list_CLS,Jpx_fragment_list_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Add_1fragment(JNIEnv *__env, jobject _self, jstring _url_or_path, jlong _offset, jlong _length, jboolean _is_path)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    const char *url_or_path = NULL;
    if (_url_or_path != NULL)
      {
        url_or_path = __env->GetStringUTFChars(_url_or_path,NULL);
      }
    kdu_long offset = (kdu_long) _offset;
    kdu_long length = (kdu_long) _length;
    bool is_path = (_is_path)?true:false;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    self.add_fragment(url_or_path,offset,length,is_path);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_url_or_path != NULL)
      {
        __env->ReleaseStringUTFChars(_url_or_path,url_or_path);
      }
    throw;
    }
    if (_url_or_path != NULL)
      {
        __env->ReleaseStringUTFChars(_url_or_path,url_or_path);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Write_1fragment_1table(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    self.write_fragment_table();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Open_1stream(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.open_stream();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_output_box_CLS,Jp2_output_box_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1stream(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_stream();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_compressed_target_CLS,Kdu_compressed_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                             Jpx_compatibility                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_compatibility_CLS != NULL) return;
  try {
    Jpx_compatibility_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jp2(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.is_jp2();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jp2_1compatible(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.is_jp2_compatible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jpxb_1compatible(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.is_jpxb_compatible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Has_1reader_1requirements_1box(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.has_reader_requirements_box();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Check_1standard_1feature(JNIEnv *__env, jobject _self, jint _feature_id)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.check_standard_feature(feature_id);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Check_1vendor_1feature(JNIEnv *__env, jobject _self, jbyteArray _uuid)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.check_vendor_feature(uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1standard_1feature__I_3I(JNIEnv *__env, jobject _self, jint _which, jintArray _feature_id)
{
  try {
    if (_feature_id == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    jint feature_id_ELT; __env->GetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    kdu_uint16 feature_id = (kdu_uint16) feature_id_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_standard_feature(which,feature_id);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    feature_id_ELT = (jint) feature_id;
  __env->SetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1standard_1feature__I_3I_3Z(JNIEnv *__env, jobject _self, jint _which, jintArray _feature_id, jbooleanArray _is_supported)
{
  try {
    if ((_feature_id == NULL) || (_is_supported == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    jint feature_id_ELT; __env->GetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    kdu_uint16 feature_id = (kdu_uint16) feature_id_ELT;
    jboolean is_supported_ELT; __env->GetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    bool is_supported = (is_supported_ELT)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_standard_feature(which,feature_id,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    feature_id_ELT = (jint) feature_id;
  __env->SetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    is_supported_ELT = (jboolean) is_supported;
  __env->SetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1vendor_1feature__I_3B(JNIEnv *__env, jobject _self, jint _which, jbyteArray _uuid)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_vendor_feature(which,uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1vendor_1feature__I_3B_3Z(JNIEnv *__env, jobject _self, jint _which, jbyteArray _uuid, jbooleanArray _is_supported)
{
  try {
    if (_is_supported == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    jboolean is_supported_ELT; __env->GetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    bool is_supported = (is_supported_ELT)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_vendor_feature(which,uuid,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    is_supported_ELT = (jboolean) is_supported;
  __env->SetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    jboolean _Result = (jboolean) Result;
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1standard_1feature_1support(JNIEnv *__env, jobject _self, jint _feature_id, jboolean _is_supported)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    bool is_supported = (_is_supported)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_standard_feature_support(feature_id,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1vendor_1feature_1support(JNIEnv *__env, jobject _self, jbyteArray _uuid, jboolean _is_supported)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool is_supported = (_is_supported)?true:false;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_vendor_feature_support(uuid,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Test_1fully_1understand(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.test_fully_understand();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Test_1decode_1completely(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.test_decode_completely();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_compatibility_PTR)));
    jpx_compatibility src = *((jpx_compatibility *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1used_1standard_1feature(JNIEnv *__env, jobject _self, jint _feature_id, jbyte _fully_understand_sub_expression, jbyte _decode_completely_sub_expression)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    kdu_byte decode_completely_sub_expression = (kdu_byte) _decode_completely_sub_expression;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_used_standard_feature(feature_id,fully_understand_sub_expression,decode_completely_sub_expression);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1used_1vendor_1feature(JNIEnv *__env, jobject _self, jbyteArray _uuid, jbyte _fully_understand_sub_expression, jbyte _decode_completely_sub_expression)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    kdu_byte decode_completely_sub_expression = (kdu_byte) _decode_completely_sub_expression;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_used_vendor_feature(uuid,fully_understand_sub_expression,decode_completely_sub_expression);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                        Jpx_composited_orientation                         */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_composited_orientation_CLS != NULL) return;
  try {
    Jpx_composited_orientation_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_composited_orientation_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_composited_orientation_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_composited_orientation *self = (jpx_composited_orientation *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_composited_orientation *self =
      new jpx_composited_orientation();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1create__ZZZ(JNIEnv *__env, jclass this_class, jboolean _transpose_first, jboolean _flip_vert, jboolean _flip_horz)
{
  try {
    bool transpose_first = (_transpose_first)?true:false;
    bool flip_vert = (_flip_vert)?true:false;
    bool flip_horz = (_flip_horz)?true:false;
    jpx_composited_orientation *self =
      new jpx_composited_orientation(transpose_first,flip_vert,flip_horz);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Is_1non_1trivial(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    bool Result;
    jpx_composited_orientation *self = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_non_trivial();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    jpx_composited_orientation *rhs = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    bool Result;
    jpx_composited_orientation *self = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Init__ZZZ(JNIEnv *__env, jobject _self, jboolean _transpose_first, jboolean _flip_vert, jboolean _flip_horz)
{
  try {
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    bool transpose_first = (_transpose_first)?true:false;
    bool flip_vert = (_flip_vert)?true:false;
    bool flip_horz = (_flip_horz)?true:false;
    jpx_composited_orientation *self = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(transpose_first,flip_vert,flip_horz);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Init__IZ(JNIEnv *__env, jobject _self, jint _rotation, jboolean _flip)
{
  try {
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    int rotation = (int) _rotation;
    bool flip = (_flip)?true:false;
    jpx_composited_orientation *self = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(rotation,flip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Append(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    jpx_composited_orientation *rhs = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    jpx_composited_orientation *self = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->append(*rhs);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                              Jpx_composition                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_composition_CLS != NULL) return;
  try {
    Jpx_composition_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_composition_PTR)));
    jpx_composition src = *((jpx_composition *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Get_1global_1info(JNIEnv *__env, jobject _self, jobject _size)
{
  try {
    if (_size == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_size,Kdu_coords_PTR) & ~((jlong) 1));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_global_info(*size);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1track_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    kdu_uint32 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_track_idx();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1timescale(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    kdu_uint32 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_timescale();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1tracks(JNIEnv *__env, jobject _self, jlongArray _count, jboolean _global_only)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jlong count_ELT; __env->GetLongArrayRegion(_count,0,1,&count_ELT);
    kdu_uint32 count = (kdu_uint32) count_ELT;
    bool global_only = (_global_only)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.count_tracks(count,global_only);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jlong) count;
  __env->SetLongArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1track_1frames(JNIEnv *__env, jobject _self, jlong _track_idx, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.count_track_frames(track_idx,count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1track_1time(JNIEnv *__env, jobject _self, jlong _track_idx, jlongArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    jlong count_ELT; __env->GetLongArrayRegion(_count,0,1,&count_ELT);
    kdu_long count = (kdu_long) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.count_track_time(track_idx,count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jlong) count;
  __env->SetLongArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1track_1frames_1before_1time(JNIEnv *__env, jobject _self, jlong _track_idx, jlong _max_end_time, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    kdu_long max_end_time = (kdu_long) _max_end_time;
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.count_track_frames_before_time(track_idx,max_end_time,count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1composition_Access_1frame(JNIEnv *__env, jobject _self, jlong _track_idx, jint _frame_idx, jboolean _must_exist, jboolean _include_persistents)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    int frame_idx = (int) _frame_idx;
    bool must_exist = (_must_exist)?true:false;
    bool include_persistents = (_include_persistents)?true:false;
    jpx_frame Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.access_frame(track_idx,frame_idx,must_exist,include_persistents);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_frame_CLS,Jpx_frame_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Find_1layer_1match(JNIEnv *__env, jobject _self, jobject _frame, jintArray _inst_idx, jlong _track_idx, jintArray _layers, jint _num_layers, jint _container_id, jboolean _include_persistents, jint _flags)
{
  try {
    if ((_frame == NULL) || (_inst_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    void *frame_S = _kdu_long_to_addr(__env->GetLongField(_frame,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 frame_P = (kdu_int64)__env->GetLongField(_frame,Jpx_frame_PARAM);
    jpx_frame frame;
    ((void **) &frame)[0] = frame_S;
    ((kdu_int64 *) &frame)[1] = frame_P;
    jint inst_idx_ELT; __env->GetIntArrayRegion(_inst_idx,0,1,&inst_idx_ELT);
    int inst_idx = (int) inst_idx_ELT;
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    int *layers = NULL;
    jint *layers_ELTS = NULL;
    if (_layers != NULL)
      {
        layers_ELTS = __env->GetIntArrayElements(_layers,NULL);
        layers = (int *) layers_ELTS;
      }
    int num_layers = (int) _num_layers;
    int container_id = (int) _container_id;
    bool include_persistents = (_include_persistents)?true:false;
    int flags = (int) _flags;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.find_layer_match(frame,inst_idx,track_idx,layers,num_layers,container_id,include_persistents,flags);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layers != NULL)
      {
        __env->ReleaseIntArrayElements(_layers,layers_ELTS,0);
      }
    throw;
    }
    frame_S = *((void **)(&(frame)));
      __env->SetLongField(_frame,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(frame_S));
frame_P = ((kdu_int64 *)(&(frame)))[1];
      __env->SetLongField(_frame,Jpx_frame_PARAM,(jlong)(frame_P));
    inst_idx_ELT = (jint) inst_idx;
  __env->SetIntArrayRegion(_inst_idx,0,1,&inst_idx_ELT);
    jint _Result = (jint) Result;
    if (_layers != NULL)
      {
        __env->ReleaseIntArrayElements(_layers,layers_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Find_1numlist_1match(JNIEnv *__env, jobject _self, jobject _frame, jintArray _inst_idx, jlong _track_idx, jobject _numlist, jint _max_inferred_layers, jboolean _include_persistents, jint _flags)
{
  try {
    if ((_frame == NULL) || (_inst_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *frame_S = _kdu_long_to_addr(__env->GetLongField(_frame,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 frame_P = (kdu_int64)__env->GetLongField(_frame,Jpx_frame_PARAM);
    jpx_frame frame;
    ((void **) &frame)[0] = frame_S;
    ((kdu_int64 *) &frame)[1] = frame_P;
    jint inst_idx_ELT; __env->GetIntArrayRegion(_inst_idx,0,1,&inst_idx_ELT);
    int inst_idx = (int) inst_idx_ELT;
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    void *numlist_S = _kdu_long_to_addr((_numlist==NULL)?((jlong) 0):(__env->GetLongField(_numlist,Jpx_metanode_PTR)));
    jpx_metanode numlist = *((jpx_metanode *)(&numlist_S));
    int max_inferred_layers = (int) _max_inferred_layers;
    bool include_persistents = (_include_persistents)?true:false;
    int flags = (int) _flags;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.find_numlist_match(frame,inst_idx,track_idx,numlist,max_inferred_layers,include_persistents,flags);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    frame_S = *((void **)(&(frame)));
      __env->SetLongField(_frame,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(frame_S));
frame_P = ((kdu_int64 *)(&(frame)))[1];
      __env->SetLongField(_frame,Jpx_frame_PARAM,(jlong)(frame_P));
    inst_idx_ELT = (jint) inst_idx;
  __env->SetIntArrayRegion(_inst_idx,0,1,&inst_idx_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1next_1frame(JNIEnv *__env, jobject _self, jlong _last_frame)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *last_frame = (jx_frame *) _kdu_long_to_addr(_last_frame);
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_next_frame(last_frame);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1prev_1frame(JNIEnv *__env, jobject _self, jlong _last_frame)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *last_frame = (jx_frame *) _kdu_long_to_addr(_last_frame);
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_prev_frame(last_frame);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1composition_Access_1owner(JNIEnv *__env, jobject _self, jlong _frame_ref)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    jpx_composition Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.access_owner(frame_ref);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_composition_CLS,Jpx_composition_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1composition_Get_1interface_1for_1frame(JNIEnv *__env, jclass this_class, jlong _frame, jint _iteration_idx, jboolean _include_persistents)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    jx_frame *frame = (jx_frame *) _kdu_long_to_addr(_frame);
    int iteration_idx = (int) _iteration_idx;
    bool include_persistents = (_include_persistents)?true:false;
    jpx_frame Result;
    Result = jpx_composition::get_interface_for_frame(frame,iteration_idx,include_persistents);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_frame_CLS,Jpx_frame_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Get_1frame_1info(JNIEnv *__env, jobject _self, jlong _frame_ref, jintArray _num_instructions, jintArray _duration, jintArray _repeat_count, jbooleanArray _is_persistent)
{
  try {
    if ((_num_instructions == NULL) || (_duration == NULL) || (_repeat_count == NULL) || (_is_persistent == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    jint num_instructions_ELT; __env->GetIntArrayRegion(_num_instructions,0,1,&num_instructions_ELT);
    int num_instructions = (int) num_instructions_ELT;
    jint duration_ELT; __env->GetIntArrayRegion(_duration,0,1,&duration_ELT);
    int duration = (int) duration_ELT;
    jint repeat_count_ELT; __env->GetIntArrayRegion(_repeat_count,0,1,&repeat_count_ELT);
    int repeat_count = (int) repeat_count_ELT;
    jboolean is_persistent_ELT; __env->GetBooleanArrayRegion(_is_persistent,0,1,&is_persistent_ELT);
    bool is_persistent = (is_persistent_ELT)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    self.get_frame_info(frame_ref,num_instructions,duration,repeat_count,is_persistent);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_instructions_ELT = (jint) num_instructions;
  __env->SetIntArrayRegion(_num_instructions,0,1,&num_instructions_ELT);
    duration_ELT = (jint) duration;
  __env->SetIntArrayRegion(_duration,0,1,&duration_ELT);
    repeat_count_ELT = (jint) repeat_count;
  __env->SetIntArrayRegion(_repeat_count,0,1,&repeat_count_ELT);
    is_persistent_ELT = (jboolean) is_persistent;
  __env->SetBooleanArrayRegion(_is_persistent,0,1,&is_persistent_ELT);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1last_1persistent_1frame(JNIEnv *__env, jobject _self, jlong _frame_ref)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_last_persistent_frame(frame_ref);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Get_1instruction(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _instruction_idx, jintArray _rel_layer_idx, jintArray _rel_increment, jbooleanArray _is_reused, jobject _source_dims, jobject _target_dims, jobject _orientation)
{
  try {
    if ((_rel_layer_idx == NULL) || (_rel_increment == NULL) || (_is_reused == NULL) || (_source_dims == NULL) || (_target_dims == NULL) || (_orientation == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    int instruction_idx = (int) _instruction_idx;
    jint rel_layer_idx_ELT; __env->GetIntArrayRegion(_rel_layer_idx,0,1,&rel_layer_idx_ELT);
    int rel_layer_idx = (int) rel_layer_idx_ELT;
    jint rel_increment_ELT; __env->GetIntArrayRegion(_rel_increment,0,1,&rel_increment_ELT);
    int rel_increment = (int) rel_increment_ELT;
    jboolean is_reused_ELT; __env->GetBooleanArrayRegion(_is_reused,0,1,&is_reused_ELT);
    bool is_reused = (is_reused_ELT)?true:false;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jpx_composited_orientation *orientation = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_orientation,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_instruction(frame_ref,instruction_idx,rel_layer_idx,rel_increment,is_reused,*source_dims,*target_dims,*orientation);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    rel_layer_idx_ELT = (jint) rel_layer_idx;
  __env->SetIntArrayRegion(_rel_layer_idx,0,1,&rel_layer_idx_ELT);
    rel_increment_ELT = (jint) rel_increment;
  __env->SetIntArrayRegion(_rel_increment,0,1,&rel_increment_ELT);
    is_reused_ELT = (jboolean) is_reused;
  __env->SetBooleanArrayRegion(_is_reused,0,1,&is_reused_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Get_1original_1iset(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _instruction_idx, jintArray _iset_idx, jintArray _inum_idx)
{
  try {
    if ((_iset_idx == NULL) || (_inum_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    int instruction_idx = (int) _instruction_idx;
    jint iset_idx_ELT; __env->GetIntArrayRegion(_iset_idx,0,1,&iset_idx_ELT);
    int iset_idx = (int) iset_idx_ELT;
    jint inum_idx_ELT; __env->GetIntArrayRegion(_inum_idx,0,1,&inum_idx_ELT);
    int inum_idx = (int) inum_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_original_iset(frame_ref,instruction_idx,iset_idx,inum_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    iset_idx_ELT = (jint) iset_idx;
  __env->SetIntArrayRegion(_iset_idx,0,1,&iset_idx_ELT);
    inum_idx_ELT = (jint) inum_idx;
  __env->SetIntArrayRegion(_inum_idx,0,1,&inum_idx_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Map_1rel_1layer_1idx(JNIEnv *__env, jobject _self, jint _rel_layer_idx)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    int rel_layer_idx = (int) _rel_layer_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.map_rel_layer_idx(rel_layer_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Add_1frame(JNIEnv *__env, jobject _self, jint _duration, jint _repeat_count, jboolean _is_persistent)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    int duration = (int) _duration;
    int repeat_count = (int) _repeat_count;
    bool is_persistent = (_is_persistent)?true:false;
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.add_frame(duration,repeat_count,is_persistent);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Add_1instruction(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _rel_layer_idx, jint _rel_increment, jobject _source_dims, jobject _target_dims, jobject _orient)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    int rel_layer_idx = (int) _rel_layer_idx;
    int rel_increment = (int) _rel_increment;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jpx_composited_orientation *orient = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_orient,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.add_instruction(frame_ref,rel_layer_idx,rel_increment,*source_dims,*target_dims,*orient);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Set_1loop_1count(JNIEnv *__env, jobject _self, jint _count)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    int count = (int) _count;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    self.set_loop_count(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                           Jpx_container_source                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1container_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_container_source_CLS != NULL) return;
  try {
    Jpx_container_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1container_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.get_container_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1num_1top_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.get_num_top_codestreams();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1num_1top_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.get_num_top_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1base_1codestreams(JNIEnv *__env, jobject _self, jintArray _num_base_codestreams)
{
  try {
    if (_num_base_codestreams == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    jint num_base_codestreams_ELT; __env->GetIntArrayRegion(_num_base_codestreams,0,1,&num_base_codestreams_ELT);
    int num_base_codestreams = (int) num_base_codestreams_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.get_base_codestreams(num_base_codestreams);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_base_codestreams_ELT = (jint) num_base_codestreams;
  __env->SetIntArrayRegion(_num_base_codestreams,0,1,&num_base_codestreams_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1base_1layers(JNIEnv *__env, jobject _self, jintArray _num_base_layers)
{
  try {
    if (_num_base_layers == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    jint num_base_layers_ELT; __env->GetIntArrayRegion(_num_base_layers,0,1,&num_base_layers_ELT);
    int num_base_layers = (int) num_base_layers_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.get_base_layers(num_base_layers);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_base_layers_ELT = (jint) num_base_layers;
  __env->SetIntArrayRegion(_num_base_layers,0,1,&num_base_layers_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1source_Count_1repetitions(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.count_repetitions(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1source_Access_1layer(JNIEnv *__env, jobject _self, jint _base_idx, jint _rep_idx, jboolean _need_stream_headers, jboolean _find_first_rep)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int base_idx = (int) _base_idx;
    int rep_idx = (int) _rep_idx;
    bool need_stream_headers = (_need_stream_headers)?true:false;
    bool find_first_rep = (_find_first_rep)?true:false;
    jpx_layer_source Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.access_layer(base_idx,rep_idx,need_stream_headers,find_first_rep);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_layer_source_CLS,Jpx_layer_source_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1source_Access_1codestream(JNIEnv *__env, jobject _self, jint _base_idx, jint _rep_idx, jboolean _need_main_header, jboolean _find_first_rep)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    int base_idx = (int) _base_idx;
    int rep_idx = (int) _rep_idx;
    bool need_main_header = (_need_main_header)?true:false;
    bool find_first_rep = (_find_first_rep)?true:false;
    jpx_codestream_source Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.access_codestream(base_idx,rep_idx,need_main_header,find_first_rep);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_codestream_source_CLS,Jpx_codestream_source_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1source_Check_1compatibility(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _any_repetition)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    bool any_repetition = (_any_repetition)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.check_compatibility(num_codestreams,codestream_indices,num_compositing_layers,layer_indices,any_repetition);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1num_1tracks(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    kdu_uint32 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.get_num_tracks();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1track_1base_1layers(JNIEnv *__env, jobject _self, jlong _track_idx, jintArray _num_track_base_layers)
{
  try {
    if (_num_track_base_layers == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    jint num_track_base_layers_ELT; __env->GetIntArrayRegion(_num_track_base_layers,0,1,&num_track_base_layers_ELT);
    int num_track_base_layers = (int) num_track_base_layers_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.get_track_base_layers(track_idx,num_track_base_layers);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_track_base_layers_ELT = (jint) num_track_base_layers;
  __env->SetIntArrayRegion(_num_track_base_layers,0,1,&num_track_base_layers_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1source_Access_1presentation_1track(JNIEnv *__env, jobject _self, jlong _track_idx)
{
  try {
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    jpx_composition Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_source_PTR));
    jpx_container_source self = *((jpx_container_source *)(&self_S));
    Result = self.access_presentation_track(track_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_composition_CLS,Jpx_composition_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                           Jpx_container_target                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1container_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_container_target_CLS != NULL) return;
  try {
    Jpx_container_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1container_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.get_container_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1num_1top_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.get_num_top_codestreams();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1num_1top_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.get_num_top_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1base_1codestreams(JNIEnv *__env, jobject _self, jintArray _num_base_codestreams)
{
  try {
    if (_num_base_codestreams == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    jint num_base_codestreams_ELT; __env->GetIntArrayRegion(_num_base_codestreams,0,1,&num_base_codestreams_ELT);
    int num_base_codestreams = (int) num_base_codestreams_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.get_base_codestreams(num_base_codestreams);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_base_codestreams_ELT = (jint) num_base_codestreams;
  __env->SetIntArrayRegion(_num_base_codestreams,0,1,&num_base_codestreams_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1base_1layers(JNIEnv *__env, jobject _self, jintArray _num_base_layers)
{
  try {
    if (_num_base_layers == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    jint num_base_layers_ELT; __env->GetIntArrayRegion(_num_base_layers,0,1,&num_base_layers_ELT);
    int num_base_layers = (int) num_base_layers_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.get_base_layers(num_base_layers);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_base_layers_ELT = (jint) num_base_layers;
  __env->SetIntArrayRegion(_num_base_layers,0,1,&num_base_layers_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1target_Access_1layer(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    int which = (int) _which;
    jpx_layer_target Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.access_layer(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_layer_target_CLS,Jpx_layer_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1target_Access_1codestream(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    int which = (int) _which;
    jpx_codestream_target Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.access_codestream(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_codestream_target_CLS,Jpx_codestream_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1target_Add_1presentation_1track(JNIEnv *__env, jobject _self, jint _track_layers)
{
  try {
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    int track_layers = (int) _track_layers;
    jpx_composition Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_container_target_PTR));
    jpx_container_target self = *((jpx_container_target *)(&self_S));
    Result = self.add_presentation_track(track_layers);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_container_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_composition_CLS,Jpx_composition_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                             Jpx_fragment_list                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_fragment_list_CLS != NULL) return;
  try {
    Jpx_fragment_list_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Add_1fragment(JNIEnv *__env, jobject _self, jint _url_idx, jlong _offset, jlong _length)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    int url_idx = (int) _url_idx;
    kdu_long offset = (kdu_long) _offset;
    kdu_long length = (kdu_long) _length;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    self.add_fragment(url_idx,offset,length);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1total_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.get_total_length();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1num_1fragments(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.get_num_fragments();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1fragment(JNIEnv *__env, jobject _self, jint _frag_idx, jintArray _url_idx, jlongArray _offset, jlongArray _length)
{
  try {
    if ((_url_idx == NULL) || (_offset == NULL) || (_length == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    int frag_idx = (int) _frag_idx;
    jint url_idx_ELT; __env->GetIntArrayRegion(_url_idx,0,1,&url_idx_ELT);
    int url_idx = (int) url_idx_ELT;
    jlong offset_ELT; __env->GetLongArrayRegion(_offset,0,1,&offset_ELT);
    kdu_long offset = (kdu_long) offset_ELT;
    jlong length_ELT; __env->GetLongArrayRegion(_length,0,1,&length_ELT);
    kdu_long length = (kdu_long) length_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.get_fragment(frag_idx,url_idx,offset,length);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    url_idx_ELT = (jint) url_idx;
  __env->SetIntArrayRegion(_url_idx,0,1,&url_idx_ELT);
    offset_ELT = (jlong) offset;
  __env->SetLongArrayRegion(_offset,0,1,&offset_ELT);
    length_ELT = (jlong) length;
  __env->SetLongArrayRegion(_length,0,1,&length_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Locate_1fragment(JNIEnv *__env, jobject _self, jlong _pos, jlongArray _bytes_into_fragment)
{
  try {
    if (_bytes_into_fragment == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    kdu_long pos = (kdu_long) _pos;
    jlong bytes_into_fragment_ELT; __env->GetLongArrayRegion(_bytes_into_fragment,0,1,&bytes_into_fragment_ELT);
    kdu_long bytes_into_fragment = (kdu_long) bytes_into_fragment_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.locate_fragment(pos,bytes_into_fragment);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    bytes_into_fragment_ELT = (jlong) bytes_into_fragment;
  __env->SetLongArrayRegion(_bytes_into_fragment,0,1,&bytes_into_fragment_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Any_1local_1fragments(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.any_local_fragments();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                 Jpx_frame                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_frame_CLS != NULL) return;
  try {
    Jpx_frame_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    void *rhs_S = _kdu_long_to_addr(__env->GetLongField(_rhs,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 rhs_P = (kdu_int64)__env->GetLongField(_rhs,Jpx_frame_PARAM);
    jpx_frame rhs;
    ((void **) &rhs)[0] = rhs_S;
    ((kdu_int64 *) &rhs)[1] = rhs_P;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.equals(rhs);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    rhs_S = *((void **)(&(rhs)));
      __env->SetLongField(_rhs,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(rhs_S));
rhs_P = ((kdu_int64 *)(&(rhs)))[1];
      __env->SetLongField(_rhs,Jpx_frame_PARAM,(jlong)(rhs_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1global_1info(JNIEnv *__env, jobject _self, jobject _size)
{
  try {
    if (_size == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_size,Kdu_coords_PTR) & ~((jlong) 1));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_global_info(*size);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1frame_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_frame_idx();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_Get_1track_1idx(JNIEnv *__env, jobject _self, jbooleanArray _last_in_context)
{
  try {
    if (_last_in_context == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    jboolean last_in_context_ELT; __env->GetBooleanArrayRegion(_last_in_context,0,1,&last_in_context_ELT);
    bool last_in_context = (last_in_context_ELT)?true:false;
    kdu_uint32 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_track_idx(last_in_context);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    last_in_context_ELT = (jboolean) last_in_context;
  __env->SetBooleanArrayRegion(_last_in_context,0,1,&last_in_context_ELT);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1frame_Access_1next(JNIEnv *__env, jobject _self, jlong _track_idx, jboolean _must_exist)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    bool must_exist = (_must_exist)?true:false;
    jpx_frame Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_next(track_idx,must_exist);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_frame_CLS,Jpx_frame_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1frame_Access_1prev(JNIEnv *__env, jobject _self, jlong _track_idx, jboolean _must_exist)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    bool must_exist = (_must_exist)?true:false;
    jpx_frame Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_prev(track_idx,must_exist);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_frame_CLS,Jpx_frame_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1info(JNIEnv *__env, jobject _self, jlongArray _start_time, jlongArray _duration)
{
  try {
    if ((_start_time == NULL) || (_duration == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    jlong start_time_ELT; __env->GetLongArrayRegion(_start_time,0,1,&start_time_ELT);
    kdu_long start_time = (kdu_long) start_time_ELT;
    jlong duration_ELT; __env->GetLongArrayRegion(_duration,0,1,&duration_ELT);
    kdu_long duration = (kdu_long) duration_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_info(start_time,duration);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    start_time_ELT = (jlong) start_time;
  __env->SetLongArrayRegion(_start_time,0,1,&start_time_ELT);
    duration_ELT = (jlong) duration;
  __env->SetLongArrayRegion(_duration,0,1,&duration_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Is_1persistent(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.is_persistent();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1num_1persistent_1instructions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_num_persistent_instructions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Get_1instruction(JNIEnv *__env, jobject _self, jint _instruction_idx, jintArray _layer_idx, jobject _source_dims, jobject _target_dims, jobject _orientation)
{
  try {
    if ((_layer_idx == NULL) || (_source_dims == NULL) || (_target_dims == NULL) || (_orientation == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    int instruction_idx = (int) _instruction_idx;
    jint layer_idx_ELT; __env->GetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    int layer_idx = (int) layer_idx_ELT;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jpx_composited_orientation *orientation = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_orientation,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_instruction(instruction_idx,layer_idx,*source_dims,*target_dims,*orientation);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    layer_idx_ELT = (jint) layer_idx;
  __env->SetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Find_1last_1instruction_1for_1layer(JNIEnv *__env, jobject _self, jint _layer_idx, jint _lim_inst_idx)
{
  try {
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    int lim_inst_idx = (int) _lim_inst_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.find_last_instruction_for_layer(layer_idx,lim_inst_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Get_1original_1iset(JNIEnv *__env, jobject _self, jint _instruction_idx, jintArray _iset_idx, jintArray _inum_idx)
{
  try {
    if ((_iset_idx == NULL) || (_inum_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    int instruction_idx = (int) _instruction_idx;
    jint iset_idx_ELT; __env->GetIntArrayRegion(_iset_idx,0,1,&iset_idx_ELT);
    int iset_idx = (int) iset_idx_ELT;
    jint inum_idx_ELT; __env->GetIntArrayRegion(_inum_idx,0,1,&inum_idx_ELT);
    int inum_idx = (int) inum_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_original_iset(instruction_idx,iset_idx,inum_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    iset_idx_ELT = (jint) iset_idx;
  __env->SetIntArrayRegion(_iset_idx,0,1,&iset_idx_ELT);
    inum_idx_ELT = (jint) inum_idx;
  __env->SetIntArrayRegion(_inum_idx,0,1,&inum_idx_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_Get_1old_1ref(JNIEnv *__env, jobject _self, jintArray _instruction_idx, jintArray _instance_idx)
{
  try {
    if ((_instruction_idx == NULL) || (_instance_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    jint instruction_idx_ELT; __env->GetIntArrayRegion(_instruction_idx,0,1,&instruction_idx_ELT);
    int instruction_idx = (int) instruction_idx_ELT;
    jint instance_idx_ELT; __env->GetIntArrayRegion(_instance_idx,0,1,&instance_idx_ELT);
    int instance_idx = (int) instance_idx_ELT;
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_frame_PARAM);
    jpx_frame self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_old_ref(instruction_idx,instance_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_frame_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_frame_PARAM,(jlong)(self_P));
    instruction_idx_ELT = (jint) instruction_idx;
  __env->SetIntArrayRegion(_instruction_idx,0,1,&instruction_idx_ELT);
    instance_idx_ELT = (jint) instance_idx;
  __env->SetIntArrayRegion(_instance_idx,0,1,&instance_idx_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                            Jpx_frame_expander                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_frame_expander_CLS != NULL) return;
  try {
    Jpx_frame_expander_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_frame_expander_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_frame_expander_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_frame_expander *self = (jpx_frame_expander *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_frame_expander *self =
      new jpx_frame_expander();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Reset(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->reset();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Construct__Lkdu_1jni_Jpx_1source_2Lkdu_1jni_Jpx_1frame_2Lkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jobject _source, jobject _frame, jobject _region_of_interest)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    void *frame_S = _kdu_long_to_addr((_frame==NULL)?((jlong) 0):(__env->GetLongField(_frame,Jpx_frame_PTR) & ~((jlong) 1)));
    kdu_int64 frame_P = (kdu_int64)((_frame==NULL)?((jlong) 0):__env->GetLongField(_frame,Jpx_frame_PARAM));
    jpx_frame frame;
    ((void **) &frame)[0] = frame_S;
    ((kdu_int64 *) &frame)[1] = frame_P;
    kdu_dims *region_of_interest = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region_of_interest,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->construct(source,frame,*region_of_interest);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Construct__Lkdu_1jni_Jpx_1source_2JIZLkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jobject _source, jlong _frame_ref, jint _iteration_idx, jboolean _follow_persistence, jobject _region_of_interest)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (_follow_persistence)?true:false;
    kdu_dims *region_of_interest = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region_of_interest,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->construct(source,frame_ref,iteration_idx,follow_persistence,*region_of_interest);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Test_1codestream_1visibility__Lkdu_1jni_Jpx_1source_2Lkdu_1jni_Jpx_1frame_2ILkdu_1jni_Jpx_1metanode_2_3IILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2ZI(JNIEnv *__env, jclass this_class, jobject _source, jobject _frame, jint _codestream_idx, jobject _numlist, jintArray _layer_indices, jint _num_layers, jobject _composition_region, jobject _codestream_roi, jboolean _ignore_use_in_alpha, jint _initial_matches_to_skip)
{
  try {
    if (_composition_region == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_frame_CLS==NULL)
      Jpx_frame_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    void *frame_S = _kdu_long_to_addr((_frame==NULL)?((jlong) 0):(__env->GetLongField(_frame,Jpx_frame_PTR) & ~((jlong) 1)));
    kdu_int64 frame_P = (kdu_int64)((_frame==NULL)?((jlong) 0):__env->GetLongField(_frame,Jpx_frame_PARAM));
    jpx_frame frame;
    ((void **) &frame)[0] = frame_S;
    ((kdu_int64 *) &frame)[1] = frame_P;
    int codestream_idx = (int) _codestream_idx;
    void *numlist_S = _kdu_long_to_addr((_numlist==NULL)?((jlong) 0):(__env->GetLongField(_numlist,Jpx_metanode_PTR)));
    jpx_metanode numlist = *((jpx_metanode *)(&numlist_S));
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    int num_layers = (int) _num_layers;
    kdu_dims *composition_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_composition_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *codestream_roi = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_codestream_roi,Kdu_dims_PTR) & ~((jlong) 1));
    bool ignore_use_in_alpha = (_ignore_use_in_alpha)?true:false;
    int initial_matches_to_skip = (int) _initial_matches_to_skip;
    int Result;
    try { // So we can clean up temporary arrays
    Result = jpx_frame_expander::test_codestream_visibility(source,frame,codestream_idx,numlist,layer_indices,num_layers,*composition_region,*codestream_roi,ignore_use_in_alpha,initial_matches_to_skip);
    } catch (...) {
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Test_1codestream_1visibility__Lkdu_1jni_Jpx_1source_2JIZI_3IILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2ZI(JNIEnv *__env, jclass this_class, jobject _source, jlong _frame, jint _iteration_idx, jboolean _follow_persistence, jint _codestream_idx, jintArray _layer_indices, jint _num_layers, jobject _composition_region, jobject _codestream_roi, jboolean _ignore_use_in_alpha, jint _initial_matches_to_skip)
{
  try {
    if (_composition_region == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    jx_frame *frame = (jx_frame *) _kdu_long_to_addr(_frame);
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (_follow_persistence)?true:false;
    int codestream_idx = (int) _codestream_idx;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    int num_layers = (int) _num_layers;
    kdu_dims *composition_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_composition_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *codestream_roi = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_codestream_roi,Kdu_dims_PTR) & ~((jlong) 1));
    bool ignore_use_in_alpha = (_ignore_use_in_alpha)?true:false;
    int initial_matches_to_skip = (int) _initial_matches_to_skip;
    int Result;
    try { // So we can clean up temporary arrays
    Result = jpx_frame_expander::test_codestream_visibility(source,frame,iteration_idx,follow_persistence,codestream_idx,layer_indices,num_layers,*composition_region,*codestream_roi,ignore_use_in_alpha,initial_matches_to_skip);
    } catch (...) {
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Has_1non_1covering_1members(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    bool Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->has_non_covering_members();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1num_1members(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    int Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_members();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1member__I_3I_3ZLkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2Lkdu_1jni_Jpx_1composited_1orientation_2(JNIEnv *__env, jobject _self, jint _which, jintArray _layer_idx, jbooleanArray _covers_composition, jobject _source_dims, jobject _target_dims, jobject _orientation)
{
  try {
    if ((_layer_idx == NULL) || (_covers_composition == NULL) || (_source_dims == NULL) || (_target_dims == NULL) || (_orientation == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    int which = (int) _which;
    jint layer_idx_ELT; __env->GetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    int layer_idx = (int) layer_idx_ELT;
    jboolean covers_composition_ELT; __env->GetBooleanArrayRegion(_covers_composition,0,1,&covers_composition_ELT);
    bool covers_composition = (covers_composition_ELT)?true:false;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jpx_composited_orientation *orientation = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_orientation,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    int Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_member(which,layer_idx,covers_composition,*source_dims,*target_dims,*orientation);
    layer_idx_ELT = (jint) layer_idx;
  __env->SetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    covers_composition_ELT = (jboolean) covers_composition;
  __env->SetBooleanArrayRegion(_covers_composition,0,1,&covers_composition_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1member__I_3I_3I_3ZLkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2Lkdu_1jni_Jpx_1composited_1orientation_2(JNIEnv *__env, jobject _self, jint _which, jintArray _instruction_idx, jintArray _layer_idx, jbooleanArray _covers_composition, jobject _source_dims, jobject _target_dims, jobject _orientation)
{
  try {
    if ((_instruction_idx == NULL) || (_layer_idx == NULL) || (_covers_composition == NULL) || (_source_dims == NULL) || (_target_dims == NULL) || (_orientation == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Jpx_composited_orientation_CLS==NULL)
      Jpx_composited_orientation_LOADER(__env);
    int which = (int) _which;
    jint instruction_idx_ELT; __env->GetIntArrayRegion(_instruction_idx,0,1,&instruction_idx_ELT);
    int instruction_idx = (int) instruction_idx_ELT;
    jint layer_idx_ELT; __env->GetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    int layer_idx = (int) layer_idx_ELT;
    jboolean covers_composition_ELT; __env->GetBooleanArrayRegion(_covers_composition,0,1,&covers_composition_ELT);
    bool covers_composition = (covers_composition_ELT)?true:false;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jpx_composited_orientation *orientation = (jpx_composited_orientation *)
      _kdu_long_to_addr(__env->GetLongField(_orientation,Jpx_composited_orientation_PTR) & ~((jlong) 1));
    jx_frame *Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_member(which,instruction_idx,layer_idx,covers_composition,*source_dims,*target_dims,*orientation);
    instruction_idx_ELT = (jint) instruction_idx;
  __env->SetIntArrayRegion(_instruction_idx,0,1,&instruction_idx_ELT);
    layer_idx_ELT = (jint) layer_idx;
  __env->SetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    covers_composition_ELT = (jboolean) covers_composition;
  __env->SetBooleanArrayRegion(_covers_composition,0,1,&covers_composition_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                               Jpx_input_box                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_input_box_CLS != NULL) return;
  try {
    Jpx_input_box_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_input_box_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_input_box_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_input_box *self = (jpx_input_box *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_input_box *self =
      new jpx_input_box();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1input_1box_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    bool Result;
    jpx_input_box *self = (jpx_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1input_1box_Open_1as(JNIEnv *__env, jobject _self, jobject _frag_list, jobject _data_refs, jobject _ultimate_src, jlong _box_type)
{
  try {
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    void *frag_list_S = _kdu_long_to_addr((_frag_list==NULL)?((jlong) 0):(__env->GetLongField(_frag_list,Jpx_fragment_list_PTR)));
    jpx_fragment_list frag_list = *((jpx_fragment_list *)(&frag_list_S));
    void *data_refs_S = _kdu_long_to_addr((_data_refs==NULL)?((jlong) 0):(__env->GetLongField(_data_refs,Jp2_data_references_PTR)));
    jp2_data_references data_refs = *((jp2_data_references *)(&data_refs_S));
    jp2_family_src *ultimate_src = (jp2_family_src *)
      _kdu_long_to_addr((_ultimate_src==NULL)?((jlong) 0):(__env->GetLongField(_ultimate_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool Result;
    jpx_input_box *self = (jpx_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_input_box_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open_as(frag_list,data_refs,ultimate_src,box_type);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                             Jpx_layer_source                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_layer_source_CLS != NULL) return;
  try {
    Jpx_layer_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1layer_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_layer_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1header_1loc(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_locator Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result_copy = self.get_header_loc();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        _Result = __env->NewObject(Jp2_locator_CLS,Jp2_locator_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_channels();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jp2_channels_CLS,Jp2_channels_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_resolution_CLS,Jp2_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1colour(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int which = (int) _which;
    jp2_colour Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.access_colour(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_colour_CLS,Jp2_colour_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1num_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_num_codestreams();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1codestream_1id(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int which = (int) _which;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_codestream_id(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1layer_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result_copy = self.get_layer_size();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1source_Have_1stream_1headers(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.have_stream_headers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1codestream_1registration(JNIEnv *__env, jobject _self, jint _which, jobject _alignment, jobject _sampling, jobject _denominator)
{
  try {
    if ((_alignment == NULL) || (_sampling == NULL) || (_denominator == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int which = (int) _which;
    kdu_coords *alignment = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_alignment,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *sampling = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_sampling,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Jpx_layer_source_PARAM);
    jpx_layer_source self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_codestream_registration(which,*alignment,*sampling,*denominator);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Jpx_layer_source_PARAM,(jlong)(self_P));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

/*****************************************************************************/
/*                             Jpx_layer_target                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_layer_target_CLS != NULL) return;
  try {
    Jpx_layer_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1target_Get_1layer_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.get_layer_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.access_channels();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jp2_channels_CLS,Jp2_channels_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_resolution_CLS,Jp2_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Add_1colour(JNIEnv *__env, jobject _self, jint _prec, jbyte _approx)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int prec = (int) _prec;
    kdu_byte approx = (kdu_byte) _approx;
    jp2_colour Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.add_colour(prec,approx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_colour_CLS,Jp2_colour_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1colour(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int which = (int) _which;
    jp2_colour Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.access_colour(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_colour_CLS,Jp2_colour_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Set_1codestream_1registration(JNIEnv *__env, jobject _self, jint _codestream_id, jobject _alignment, jobject _sampling, jobject _denominator)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    kdu_coords *alignment = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_alignment,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *sampling = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_sampling,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    self.set_codestream_registration(codestream_id,*alignment,*sampling,*denominator);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Copy_1attributes(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_layer_source_PTR) & ~((jlong) 1)));
    kdu_int64 src_P = (kdu_int64)((_src==NULL)?((jlong) 0):__env->GetLongField(_src,Jpx_layer_source_PARAM));
    jpx_layer_source src;
    ((void **) &src)[0] = src_S;
    ((kdu_int64 *) &src)[1] = src_P;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    self.copy_attributes(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                             Jpx_meta_manager                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_meta_manager_CLS != NULL) return;
  try {
    Jpx_meta_manager_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Set_1box_1filter(JNIEnv *__env, jobject _self, jint _num_box_types, jlongArray _box_types)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    int num_box_types = (int) _num_box_types;
    kdu_uint32 *box_types = NULL;
    jlong *box_types_ELTS = NULL;
    jsize box_types_L = 0;
    if (_box_types != NULL)
      {
        box_types_ELTS = __env->GetLongArrayElements(_box_types,NULL);
        box_types_L = __env->GetArrayLength(_box_types);
        box_types = new kdu_uint32[box_types_L];
        { for (int i=0; i<box_types_L; i++) box_types[i] = (kdu_uint32)(box_types_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    self.set_box_filter(num_box_types,box_types);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types != NULL)
      {
        for (int i=0; i<box_types_L; i++) box_types_ELTS[i] = (jlong)(box_types[i]);
      }
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Set_1behaviour(JNIEnv *__env, jobject _self, jint _parsing_behaviour, jint _writing_behaviour)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    int parsing_behaviour = (int) _parsing_behaviour;
    int writing_behaviour = (int) _writing_behaviour;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    self.set_behaviour(parsing_behaviour,writing_behaviour);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Access_1root(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.access_root();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Locate_1node(JNIEnv *__env, jobject _self, jlong _file_pos)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_long file_pos = (kdu_long) _file_pos;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.locate_node(file_pos);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Get_1touched_1nodes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.get_touched_nodes();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Peek_1touched_1nodes(JNIEnv *__env, jobject _self, jlong _box_type, jobject _last_peeked)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    void *last_peeked_S = _kdu_long_to_addr((_last_peeked==NULL)?((jlong) 0):(__env->GetLongField(_last_peeked,Jpx_metanode_PTR)));
    jpx_metanode last_peeked = *((jpx_metanode *)(&last_peeked_S));
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.peek_touched_nodes(box_type,last_peeked);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Peek_1and_1clear_1touched_1nodes(JNIEnv *__env, jobject _self, jint _num_box_types, jlongArray _box_types, jobject _last_peeked)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int num_box_types = (int) _num_box_types;
    kdu_uint32 *box_types = NULL;
    jlong *box_types_ELTS = NULL;
    jsize box_types_L = 0;
    if (_box_types != NULL)
      {
        box_types_ELTS = __env->GetLongArrayElements(_box_types,NULL);
        box_types_L = __env->GetArrayLength(_box_types);
        box_types = new kdu_uint32[box_types_L];
        { for (int i=0; i<box_types_L; i++) box_types[i] = (kdu_uint32)(box_types_ELTS[i]); }
      }
    void *last_peeked_S = _kdu_long_to_addr((_last_peeked==NULL)?((jlong) 0):(__env->GetLongField(_last_peeked,Jpx_metanode_PTR)));
    jpx_metanode last_peeked = *((jpx_metanode *)(&last_peeked_S));
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.peek_and_clear_touched_nodes(num_box_types,box_types,last_peeked);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types != NULL)
      {
        for (int i=0; i<box_types_L; i++) box_types_ELTS[i] = (jlong)(box_types[i]);
      }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_meta_manager_PTR)));
    jpx_meta_manager src = *((jpx_meta_manager *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Reset_1copy_1locators(JNIEnv *__env, jobject _self, jobject _src, jboolean _recursive, jboolean _fixup_unresolved_links)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_metanode_PTR)));
    jpx_metanode src = *((jpx_metanode *)(&src_S));
    bool recursive = (_recursive)?true:false;
    bool fixup_unresolved_links = (_fixup_unresolved_links)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    self.reset_copy_locators(src,recursive,fixup_unresolved_links);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Load_1matches(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.load_matches(num_codestreams,codestream_indices,num_compositing_layers,layer_indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Enumerate_1matches(JNIEnv *__env, jobject _self, jobject _last_node, jint _codestream_idx, jint _compositing_layer_idx, jboolean _applies_to_rendered_result, jobject _region, jint _min_size, jboolean _exclude_region_numlists, jboolean _ignore_missing_numlist_categories, jboolean _exclude_duplicate_numlists)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    void *last_node_S = _kdu_long_to_addr((_last_node==NULL)?((jlong) 0):(__env->GetLongField(_last_node,Jpx_metanode_PTR)));
    jpx_metanode last_node = *((jpx_metanode *)(&last_node_S));
    int codestream_idx = (int) _codestream_idx;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    bool applies_to_rendered_result = (_applies_to_rendered_result)?true:false;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    int min_size = (int) _min_size;
    bool exclude_region_numlists = (_exclude_region_numlists)?true:false;
    bool ignore_missing_numlist_categories = (_ignore_missing_numlist_categories)?true:false;
    bool exclude_duplicate_numlists = (_exclude_duplicate_numlists)?true:false;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.enumerate_matches(last_node,codestream_idx,compositing_layer_idx,applies_to_rendered_result,*region,min_size,exclude_region_numlists,ignore_missing_numlist_categories,exclude_duplicate_numlists);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Insert_1node(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _applies_to_rendered_result, jint _num_regions, jobject _regions, jobject _root, jint _container_id)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    bool applies_to_rendered_result = (_applies_to_rendered_result)?true:false;
    int num_regions = (int) _num_regions;
    jpx_roi *regions = (jpx_roi *)
      _kdu_long_to_addr((_regions==NULL)?((jlong) 0):(__env->GetLongField(_regions,Jpx_roi_PTR) & ~((jlong) 1)));
    void *root_S = _kdu_long_to_addr((_root==NULL)?((jlong) 0):(__env->GetLongField(_root,Jpx_metanode_PTR)));
    jpx_metanode root = *((jpx_metanode *)(&root_S));
    int container_id = (int) _container_id;
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.insert_node(num_codestreams,codestream_indices,num_compositing_layers,layer_indices,applies_to_rendered_result,num_regions,regions,root,container_id);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                               Jpx_metanode                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_metanode_CLS != NULL) return;
  try {
    Jpx_metanode_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1info(JNIEnv *__env, jobject _self, jintArray _num_codestreams, jintArray _num_layers, jbooleanArray _applies_to_rendered_result)
{
  try {
    if ((_num_codestreams == NULL) || (_num_layers == NULL) || (_applies_to_rendered_result == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint num_codestreams_ELT; __env->GetIntArrayRegion(_num_codestreams,0,1,&num_codestreams_ELT);
    int num_codestreams = (int) num_codestreams_ELT;
    jint num_layers_ELT; __env->GetIntArrayRegion(_num_layers,0,1,&num_layers_ELT);
    int num_layers = (int) num_layers_ELT;
    jboolean applies_to_rendered_result_ELT; __env->GetBooleanArrayRegion(_applies_to_rendered_result,0,1,&applies_to_rendered_result_ELT);
    bool applies_to_rendered_result = (applies_to_rendered_result_ELT)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_info(num_codestreams,num_layers,applies_to_rendered_result);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_codestreams_ELT = (jint) num_codestreams;
  __env->SetIntArrayRegion(_num_codestreams,0,1,&num_codestreams_ELT);
    num_layers_ELT = (jint) num_layers;
  __env->SetIntArrayRegion(_num_layers,0,1,&num_layers_ELT);
    applies_to_rendered_result_ELT = (jboolean) applies_to_rendered_result;
  __env->SetBooleanArrayRegion(_applies_to_rendered_result,0,1,&applies_to_rendered_result_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_container_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1lmap(JNIEnv *__env, jobject _self, jintArray _base, jintArray _span)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int *base = NULL;
    jint *base_ELTS = NULL;
    if (_base != NULL)
      {
        base_ELTS = __env->GetIntArrayElements(_base,NULL);
        base = (int *) base_ELTS;
      }
    int *span = NULL;
    jint *span_ELTS = NULL;
    if (_span != NULL)
      {
        span_ELTS = __env->GetIntArrayElements(_span,NULL);
        span = (int *) span_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_container_lmap(base,span);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_base != NULL)
      {
        __env->ReleaseIntArrayElements(_base,base_ELTS,0);
      }
    if (_span != NULL)
      {
        __env->ReleaseIntArrayElements(_span,span_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_base != NULL)
      {
        __env->ReleaseIntArrayElements(_base,base_ELTS,0);
      }
    if (_span != NULL)
      {
        __env->ReleaseIntArrayElements(_span,span_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1cmap(JNIEnv *__env, jobject _self, jintArray _base, jintArray _span)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int *base = NULL;
    jint *base_ELTS = NULL;
    if (_base != NULL)
      {
        base_ELTS = __env->GetIntArrayElements(_base,NULL);
        base = (int *) base_ELTS;
      }
    int *span = NULL;
    jint *span_ELTS = NULL;
    if (_span != NULL)
      {
        span_ELTS = __env->GetIntArrayElements(_span,NULL);
        span = (int *) span_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_container_cmap(base,span);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_base != NULL)
      {
        __env->ReleaseIntArrayElements(_base,base_ELTS,0);
      }
    if (_span != NULL)
      {
        __env->ReleaseIntArrayElements(_span,span_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_base != NULL)
      {
        __env->ReleaseIntArrayElements(_base,base_ELTS,0);
      }
    if (_span != NULL)
      {
        __env->ReleaseIntArrayElements(_span,span_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1codestream_1rep(JNIEnv *__env, jobject _self, jint _stream_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_container_codestream_rep(stream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1layer_1rep(JNIEnv *__env, jobject _self, jint _layer_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_container_layer_rep(layer_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const int *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_codestreams();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const int *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1numlist_1codestreams(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.count_numlist_codestreams(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1numlist_1layers(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.count_numlist_layers(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1codestream(JNIEnv *__env, jobject _self, jint _which, jint _rep_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int which = (int) _which;
    int rep_idx = (int) _rep_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_codestream(which,rep_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1layer(JNIEnv *__env, jobject _self, jint _which, jint _rep_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int which = (int) _which;
    int rep_idx = (int) _rep_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_layer(which,rep_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1numlist_1codestream(JNIEnv *__env, jobject _self, jint _stream_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.find_numlist_codestream(stream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1numlist_1layer(JNIEnv *__env, jobject _self, jint _layer_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.find_numlist_layer(layer_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1numlist_1stream(JNIEnv *__env, jobject _self, jint _codestream_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int codestream_idx = (int) _codestream_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.test_numlist_stream(codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1numlist_1layer(JNIEnv *__env, jobject _self, jint _layer_idx)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.test_numlist_layer(layer_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1next_1identical_1numlist(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.find_next_identical_numlist();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1first_1identical_1numlist(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.find_first_identical_numlist();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1container(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_container();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Compare_1numlists(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *rhs_S = _kdu_long_to_addr((_rhs==NULL)?((jlong) 0):(__env->GetLongField(_rhs,Jpx_metanode_PTR)));
    jpx_metanode rhs = *((jpx_metanode *)(&rhs_S));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.compare_numlists(rhs);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1numlist_1descendants(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.count_numlist_descendants(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1num_1regions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_num_regions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1region(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int which = (int) _which;
    jpx_roi Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result_copy = self.get_region(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        jpx_roi *Result = new jpx_roi; *Result = Result_copy;
        _Result = __env->NewObject(Jpx_roi_CLS,Jpx_roi_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1width(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_width();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1bounding_1box(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result_copy = self.get_bounding_box();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1region(JNIEnv *__env, jobject _self, jobject _region)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.test_region(*region);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Has_1dependent_1roi_1nodes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.has_dependent_roi_nodes();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_uint32 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_box_type();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1label(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const char * Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_label();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1uuid(JNIEnv *__env, jobject _self, jbyteArray _uuid)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_uuid(uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1cross_1reference(JNIEnv *__env, jobject _self, jobject _frags)
{
  try {
    if (_frags == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    void *frags_S = _kdu_long_to_addr(__env->GetLongField(_frags,Jpx_fragment_list_PTR));
    jpx_fragment_list frags = *((jpx_fragment_list *)(&frags_S));
    kdu_uint32 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_cross_reference(frags);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    frags_S = *((void **)(&(frags)));
      __env->SetLongField(_frags,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(frags_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1link(JNIEnv *__env, jobject _self, jintArray _link_type, jboolean _try_to_resolve)
{
  try {
    if (_link_type == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint link_type_ELT; __env->GetIntArrayRegion(_link_type,0,1,&link_type_ELT);
    jpx_metanode_link_type link_type = (jpx_metanode_link_type) link_type_ELT;
    bool try_to_resolve = (_try_to_resolve)?true:false;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_link(link_type,try_to_resolve);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    link_type_ELT = (jint) link_type;
  __env->SetIntArrayRegion(_link_type,0,1,&link_type_ELT);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Enum_1linkers(JNIEnv *__env, jobject _self, jobject _last_linker)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *last_linker_S = _kdu_long_to_addr((_last_linker==NULL)?((jlong) 0):(__env->GetLongField(_last_linker,Jpx_metanode_PTR)));
    jpx_metanode last_linker = *((jpx_metanode *)(&last_linker_S));
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.enum_linkers(last_linker);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Open_1existing(JNIEnv *__env, jobject _self, jobject _box)
{
  try {
    if (_box == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *box = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_box,Jp2_input_box_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.open_existing(*box);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1descendants(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.count_descendants(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1descendant(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int which = (int) _which;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_descendant(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1descendant_1by_1type(JNIEnv *__env, jobject _self, jint _which, jint _num_box_types_of_interest, jlongArray _box_types_of_interest)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int which = (int) _which;
    int num_box_types_of_interest = (int) _num_box_types_of_interest;
    kdu_uint32 *box_types_of_interest = NULL;
    jlong *box_types_of_interest_ELTS = NULL;
    jsize box_types_of_interest_L = 0;
    if (_box_types_of_interest != NULL)
      {
        box_types_of_interest_ELTS = __env->GetLongArrayElements(_box_types_of_interest,NULL);
        box_types_of_interest_L = __env->GetArrayLength(_box_types_of_interest);
        box_types_of_interest = new kdu_uint32[box_types_of_interest_L];
        { for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest[i] = (kdu_uint32)(box_types_of_interest_ELTS[i]); }
      }
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.find_descendant_by_type(which,num_box_types_of_interest,box_types_of_interest);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    throw;
    }
    if (_box_types_of_interest != NULL)
      {
        for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest_ELTS[i] = (jlong)(box_types_of_interest[i]);
      }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Check_1descendants_1complete(JNIEnv *__env, jobject _self, jint _num_box_types_of_interest, jlongArray _box_types_of_interest)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int num_box_types_of_interest = (int) _num_box_types_of_interest;
    kdu_uint32 *box_types_of_interest = NULL;
    jlong *box_types_of_interest_ELTS = NULL;
    jsize box_types_of_interest_L = 0;
    if (_box_types_of_interest != NULL)
      {
        box_types_of_interest_ELTS = __env->GetLongArrayElements(_box_types_of_interest,NULL);
        box_types_of_interest_L = __env->GetArrayLength(_box_types_of_interest);
        box_types_of_interest = new kdu_uint32[box_types_of_interest_L];
        { for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest[i] = (kdu_uint32)(box_types_of_interest_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.check_descendants_complete(num_box_types_of_interest,box_types_of_interest);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    throw;
    }
    if (_box_types_of_interest != NULL)
      {
        for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest_ELTS[i] = (jlong)(box_types_of_interest[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1next_1descendant(JNIEnv *__env, jobject _self, jobject _ref, jint _limit_cmd, jlongArray _box_types)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *ref_S = _kdu_long_to_addr((_ref==NULL)?((jlong) 0):(__env->GetLongField(_ref,Jpx_metanode_PTR)));
    jpx_metanode ref = *((jpx_metanode *)(&ref_S));
    int limit_cmd = (int) _limit_cmd;
    kdu_uint32 *box_types = NULL;
    jlong *box_types_ELTS = NULL;
    jsize box_types_L = 0;
    if (_box_types != NULL)
      {
        box_types_ELTS = __env->GetLongArrayElements(_box_types,NULL);
        box_types_L = __env->GetArrayLength(_box_types);
        box_types = new kdu_uint32[box_types_L];
        { for (int i=0; i<box_types_L; i++) box_types[i] = (kdu_uint32)(box_types_ELTS[i]); }
      }
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_next_descendant(ref,limit_cmd,box_types);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types != NULL)
      {
        for (int i=0; i<box_types_L; i++) box_types_ELTS[i] = (jlong)(box_types[i]);
      }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1prev_1descendant(JNIEnv *__env, jobject _self, jobject _ref, jint _limit_cmd, jlongArray _box_types)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *ref_S = _kdu_long_to_addr((_ref==NULL)?((jlong) 0):(__env->GetLongField(_ref,Jpx_metanode_PTR)));
    jpx_metanode ref = *((jpx_metanode *)(&ref_S));
    int limit_cmd = (int) _limit_cmd;
    kdu_uint32 *box_types = NULL;
    jlong *box_types_ELTS = NULL;
    jsize box_types_L = 0;
    if (_box_types != NULL)
      {
        box_types_ELTS = __env->GetLongArrayElements(_box_types,NULL);
        box_types_L = __env->GetArrayLength(_box_types);
        box_types = new kdu_uint32[box_types_L];
        { for (int i=0; i<box_types_L; i++) box_types[i] = (kdu_uint32)(box_types_ELTS[i]); }
      }
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_prev_descendant(ref,limit_cmd,box_types);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types != NULL)
      {
        for (int i=0; i<box_types_L; i++) box_types_ELTS[i] = (jlong)(box_types[i]);
      }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1sequence_1index(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_sequence_index();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1parent(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_parent();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1path_1to(JNIEnv *__env, jobject _self, jobject _target, jint _descending_flags, jint _ascending_flags, jint _num_exclusion_categories, jlongArray _exclusion_box_types, jintArray _exclusion_flags, jboolean _unify_groups)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *target_S = _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Jpx_metanode_PTR)));
    jpx_metanode target = *((jpx_metanode *)(&target_S));
    int descending_flags = (int) _descending_flags;
    int ascending_flags = (int) _ascending_flags;
    int num_exclusion_categories = (int) _num_exclusion_categories;
    kdu_uint32 *exclusion_box_types = NULL;
    jlong *exclusion_box_types_ELTS = NULL;
    jsize exclusion_box_types_L = 0;
    if (_exclusion_box_types != NULL)
      {
        exclusion_box_types_ELTS = __env->GetLongArrayElements(_exclusion_box_types,NULL);
        exclusion_box_types_L = __env->GetArrayLength(_exclusion_box_types);
        exclusion_box_types = new kdu_uint32[exclusion_box_types_L];
        { for (int i=0; i<exclusion_box_types_L; i++) exclusion_box_types[i] = (kdu_uint32)(exclusion_box_types_ELTS[i]); }
      }
    int *exclusion_flags = NULL;
    jint *exclusion_flags_ELTS = NULL;
    if (_exclusion_flags != NULL)
      {
        exclusion_flags_ELTS = __env->GetIntArrayElements(_exclusion_flags,NULL);
        exclusion_flags = (int *) exclusion_flags_ELTS;
      }
    bool unify_groups = (_unify_groups)?true:false;
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.find_path_to(target,descending_flags,ascending_flags,num_exclusion_categories,exclusion_box_types,exclusion_flags,unify_groups);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_exclusion_box_types != NULL)
      {
        delete[] exclusion_box_types;
        __env->ReleaseLongArrayElements(_exclusion_box_types,exclusion_box_types_ELTS,0);
      }
    if (_exclusion_flags != NULL)
      {
        __env->ReleaseIntArrayElements(_exclusion_flags,exclusion_flags_ELTS,0);
      }
    throw;
    }
    if (_exclusion_box_types != NULL)
      {
        for (int i=0; i<exclusion_box_types_L; i++) exclusion_box_types_ELTS[i] = (jlong)(exclusion_box_types[i]);
      }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_exclusion_box_types != NULL)
      {
        delete[] exclusion_box_types;
        __env->ReleaseLongArrayElements(_exclusion_box_types,exclusion_box_types_ELTS,0);
      }
    if (_exclusion_flags != NULL)
      {
        __env->ReleaseIntArrayElements(_exclusion_flags,exclusion_flags_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1parent(JNIEnv *__env, jobject _self, jobject _new_parent)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *new_parent_S = _kdu_long_to_addr((_new_parent==NULL)?((jlong) 0):(__env->GetLongField(_new_parent,Jpx_metanode_PTR)));
    jpx_metanode new_parent = *((jpx_metanode *)(&new_parent_S));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.change_parent(new_parent);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1numlist(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _applies_to_rendered_result, jint _container_id)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    bool applies_to_rendered_result = (_applies_to_rendered_result)?true:false;
    int container_id = (int) _container_id;
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_numlist(num_codestreams,codestream_indices,num_compositing_layers,layer_indices,applies_to_rendered_result,container_id);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1regions(JNIEnv *__env, jobject _self, jint _num_regions, jobject _regions)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int num_regions = (int) _num_regions;
    jpx_roi *regions = (jpx_roi *)
      _kdu_long_to_addr((_regions==NULL)?((jlong) 0):(__env->GetLongField(_regions,Jpx_roi_PTR) & ~((jlong) 1)));
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_regions(num_regions,regions);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1label(JNIEnv *__env, jobject _self, jstring _text)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const char *text = NULL;
    if (_text != NULL)
      {
        text = __env->GetStringUTFChars(_text,NULL);
      }
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_label(text);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    throw;
    }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1to_1label(JNIEnv *__env, jobject _self, jstring _text)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const char *text = NULL;
    if (_text != NULL)
      {
        text = __env->GetStringUTFChars(_text,NULL);
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.change_to_label(text);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    throw;
    }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1delayed(JNIEnv *__env, jobject _self, jlong _box_type, jint _i_param)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int i_param = (int) _i_param;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_delayed(box_type,i_param);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1to_1delayed(JNIEnv *__env, jobject _self, jlong _box_type, jint _i_param)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int i_param = (int) _i_param;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.change_to_delayed(box_type,i_param);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1link(JNIEnv *__env, jobject _self, jobject _target, jint _link_type, jboolean _avoid_duplicates)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *target_S = _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Jpx_metanode_PTR)));
    jpx_metanode target = *((jpx_metanode *)(&target_S));
    jpx_metanode_link_type link_type = (jpx_metanode_link_type) _link_type;
    bool avoid_duplicates = (_avoid_duplicates)?true:false;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_link(target,link_type,avoid_duplicates);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1to_1link(JNIEnv *__env, jobject _self, jobject _target, jint _link_type)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *target_S = _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Jpx_metanode_PTR)));
    jpx_metanode target = *((jpx_metanode *)(&target_S));
    jpx_metanode_link_type link_type = (jpx_metanode_link_type) _link_type;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.change_to_link(target,link_type);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Preserve_1for_1links(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.preserve_for_links();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1copy(JNIEnv *__env, jobject _self, jobject _src, jboolean _recursive, jboolean _link_to_internal_copies)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_metanode_PTR)));
    jpx_metanode src = *((jpx_metanode *)(&src_S));
    bool recursive = (_recursive)?true:false;
    bool link_to_internal_copies = (_link_to_internal_copies)?true:false;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_copy(src,recursive,link_to_internal_copies);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Delete_1node(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.delete_node();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Is_1changed(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.is_changed();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Ancestor_1changed(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.ancestor_changed();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Is_1deleted(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.is_deleted();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Child_1removed(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.child_removed();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Touch(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.touch();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1state_1ref(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_state_ref();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Generate_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _num_box_types_of_interest, jlongArray _box_types_of_interest, jint _num_descend_box_types, jlongArray _descend_box_types, jboolean _priority, jint _max_descend_depth, jint _qualifier)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *client_window = (kdu_window *)
      _kdu_long_to_addr((_client_window==NULL)?((jlong) 0):(__env->GetLongField(_client_window,Kdu_window_PTR) & ~((jlong) 1)));
    int num_box_types_of_interest = (int) _num_box_types_of_interest;
    kdu_uint32 *box_types_of_interest = NULL;
    jlong *box_types_of_interest_ELTS = NULL;
    jsize box_types_of_interest_L = 0;
    if (_box_types_of_interest != NULL)
      {
        box_types_of_interest_ELTS = __env->GetLongArrayElements(_box_types_of_interest,NULL);
        box_types_of_interest_L = __env->GetArrayLength(_box_types_of_interest);
        box_types_of_interest = new kdu_uint32[box_types_of_interest_L];
        { for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest[i] = (kdu_uint32)(box_types_of_interest_ELTS[i]); }
      }
    int num_descend_box_types = (int) _num_descend_box_types;
    kdu_uint32 *descend_box_types = NULL;
    jlong *descend_box_types_ELTS = NULL;
    jsize descend_box_types_L = 0;
    if (_descend_box_types != NULL)
      {
        descend_box_types_ELTS = __env->GetLongArrayElements(_descend_box_types,NULL);
        descend_box_types_L = __env->GetArrayLength(_descend_box_types);
        descend_box_types = new kdu_uint32[descend_box_types_L];
        { for (int i=0; i<descend_box_types_L; i++) descend_box_types[i] = (kdu_uint32)(descend_box_types_ELTS[i]); }
      }
    bool priority = (_priority)?true:false;
    kdu_int32 max_descend_depth = (kdu_int32) _max_descend_depth;
    int qualifier = (int) _qualifier;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.generate_metareq(client_window,num_box_types_of_interest,box_types_of_interest,num_descend_box_types,descend_box_types,priority,max_descend_depth,qualifier);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    if (_descend_box_types != NULL)
      {
        delete[] descend_box_types;
        __env->ReleaseLongArrayElements(_descend_box_types,descend_box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types_of_interest != NULL)
      {
        for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest_ELTS[i] = (jlong)(box_types_of_interest[i]);
      }
    if (_descend_box_types != NULL)
      {
        for (int i=0; i<descend_box_types_L; i++) descend_box_types_ELTS[i] = (jlong)(descend_box_types[i]);
      }
    jint _Result = (jint) Result;
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    if (_descend_box_types != NULL)
      {
        delete[] descend_box_types;
        __env->ReleaseLongArrayElements(_descend_box_types,descend_box_types_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Generate_1link_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _num_box_types_of_interest, jlongArray _box_types_of_interest, jint _num_descend_box_types, jlongArray _descend_box_types, jboolean _priority, jint _max_descend_depth, jint _qualifier)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *client_window = (kdu_window *)
      _kdu_long_to_addr((_client_window==NULL)?((jlong) 0):(__env->GetLongField(_client_window,Kdu_window_PTR) & ~((jlong) 1)));
    int num_box_types_of_interest = (int) _num_box_types_of_interest;
    kdu_uint32 *box_types_of_interest = NULL;
    jlong *box_types_of_interest_ELTS = NULL;
    jsize box_types_of_interest_L = 0;
    if (_box_types_of_interest != NULL)
      {
        box_types_of_interest_ELTS = __env->GetLongArrayElements(_box_types_of_interest,NULL);
        box_types_of_interest_L = __env->GetArrayLength(_box_types_of_interest);
        box_types_of_interest = new kdu_uint32[box_types_of_interest_L];
        { for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest[i] = (kdu_uint32)(box_types_of_interest_ELTS[i]); }
      }
    int num_descend_box_types = (int) _num_descend_box_types;
    kdu_uint32 *descend_box_types = NULL;
    jlong *descend_box_types_ELTS = NULL;
    jsize descend_box_types_L = 0;
    if (_descend_box_types != NULL)
      {
        descend_box_types_ELTS = __env->GetLongArrayElements(_descend_box_types,NULL);
        descend_box_types_L = __env->GetArrayLength(_descend_box_types);
        descend_box_types = new kdu_uint32[descend_box_types_L];
        { for (int i=0; i<descend_box_types_L; i++) descend_box_types[i] = (kdu_uint32)(descend_box_types_ELTS[i]); }
      }
    bool priority = (_priority)?true:false;
    kdu_int32 max_descend_depth = (kdu_int32) _max_descend_depth;
    int qualifier = (int) _qualifier;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.generate_link_metareq(client_window,num_box_types_of_interest,box_types_of_interest,num_descend_box_types,descend_box_types,priority,max_descend_depth,qualifier);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    if (_descend_box_types != NULL)
      {
        delete[] descend_box_types;
        __env->ReleaseLongArrayElements(_descend_box_types,descend_box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types_of_interest != NULL)
      {
        for (int i=0; i<box_types_of_interest_L; i++) box_types_of_interest_ELTS[i] = (jlong)(box_types_of_interest[i]);
      }
    if (_descend_box_types != NULL)
      {
        for (int i=0; i<descend_box_types_L; i++) descend_box_types_ELTS[i] = (jlong)(descend_box_types[i]);
      }
    jint _Result = (jint) Result;
    if (_box_types_of_interest != NULL)
      {
        delete[] box_types_of_interest;
        __env->ReleaseLongArrayElements(_box_types_of_interest,box_types_of_interest_ELTS,0);
      }
    if (_descend_box_types != NULL)
      {
        delete[] descend_box_types;
        __env->ReleaseLongArrayElements(_descend_box_types,descend_box_types_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

/*****************************************************************************/
/*                                  Jpx_roi                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_roi_CLS != NULL) return;
  try {
    Jpx_roi_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_roi_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_roi_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_roi *self = (jpx_roi *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1roi_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_roi *self =
      new jpx_roi();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1rectangle(JNIEnv *__env, jobject _self, jobject _rect, jboolean _coded, jbyte _priority)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rect = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rect,Kdu_dims_PTR) & ~((jlong) 1));
    bool coded = (_coded)?true:false;
    kdu_byte priority = (kdu_byte) _priority;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init_rectangle(*rect,coded,priority);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1quadrilateral(JNIEnv *__env, jobject _self, jobject _v1, jobject _v2, jobject _v3, jobject _v4, jboolean _coded, jbyte _priority)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *v1 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v1,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *v2 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v2,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *v3 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v3,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *v4 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v4,Kdu_coords_PTR) & ~((jlong) 1));
    bool coded = (_coded)?true:false;
    kdu_byte priority = (kdu_byte) _priority;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init_quadrilateral(*v1,*v2,*v3,*v4,coded,priority);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1ellipse__Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2ZB(JNIEnv *__env, jobject _self, jobject _centre, jobject _extent, jobject _skew, jboolean _coded, jbyte _priority)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *centre = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_centre,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *extent = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_extent,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *skew = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_skew,Kdu_coords_PTR) & ~((jlong) 1));
    bool coded = (_coded)?true:false;
    kdu_byte priority = (kdu_byte) _priority;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init_ellipse(*centre,*extent,*skew,coded,priority);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1ellipse__Lkdu_1jni_Kdu_1coords_2_3DDZB(JNIEnv *__env, jobject _self, jobject _centre, jdoubleArray _axis_extents, jdouble _tan_theta, jboolean _coded, jbyte _priority)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *centre = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_centre,Kdu_coords_PTR) & ~((jlong) 1));
    double *axis_extents = NULL;
    jdouble *axis_extents_ELTS = NULL;
    if (_axis_extents != NULL)
      {
        axis_extents_ELTS = __env->GetDoubleArrayElements(_axis_extents,NULL);
        axis_extents = (double *) axis_extents_ELTS;
      }
    double tan_theta = (double) _tan_theta;
    bool coded = (_coded)?true:false;
    kdu_byte priority = (kdu_byte) _priority;
    try { // So we can clean up temporary arrays
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init_ellipse(*centre,axis_extents,tan_theta,coded,priority);
    } catch (...) {
    if (_axis_extents != NULL)
      {
        __env->ReleaseDoubleArrayElements(_axis_extents,axis_extents_ELTS,0);
      }
    throw;
    }
    if (_axis_extents != NULL)
      {
        __env->ReleaseDoubleArrayElements(_axis_extents,axis_extents_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Clip_1region(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->clip_region();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Fix_1inconsistencies(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->fix_inconsistencies();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Is_1simple(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_simple();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Get_1bounding_1rect(JNIEnv *__env, jobject _self, jobject _rect)
{
  try {
    if (_rect == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rect = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rect,Kdu_dims_PTR) & ~((jlong) 1));
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->get_bounding_rect(*rect);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1rectangle(JNIEnv *__env, jobject _self, jobject _rectangle)
{
  try {
    if (_rectangle == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rectangle = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rectangle,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_rectangle(*rectangle);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1quadrilateral(JNIEnv *__env, jobject _self, jobject _v1, jobject _v2, jobject _v3, jobject _v4)
{
  try {
    if ((_v1 == NULL) || (_v2 == NULL) || (_v3 == NULL) || (_v4 == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *v1 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v1,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *v2 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v2,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *v3 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v3,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *v4 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v4,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_quadrilateral(*v1,*v2,*v3,*v4);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1ellipse__Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2(JNIEnv *__env, jobject _self, jobject _centre, jobject _extent, jobject _skew)
{
  try {
    if ((_centre == NULL) || (_extent == NULL) || (_skew == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *centre = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_centre,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *extent = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_extent,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *skew = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_skew,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ellipse(*centre,*extent,*skew);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1ellipse__Lkdu_1jni_Kdu_1coords_2_3D_3D(JNIEnv *__env, jobject _self, jobject _centre, jdoubleArray _axis_extents, jdoubleArray _tan_theta)
{
  try {
    if ((_centre == NULL) || (_tan_theta == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *centre = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_centre,Kdu_coords_PTR) & ~((jlong) 1));
    double *axis_extents = NULL;
    jdouble *axis_extents_ELTS = NULL;
    if (_axis_extents != NULL)
      {
        axis_extents_ELTS = __env->GetDoubleArrayElements(_axis_extents,NULL);
        axis_extents = (double *) axis_extents_ELTS;
      }
    jdouble tan_theta_ELT; __env->GetDoubleArrayRegion(_tan_theta,0,1,&tan_theta_ELT);
    double tan_theta = (double) tan_theta_ELT;
    bool Result;
    try { // So we can clean up temporary arrays
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ellipse(*centre,axis_extents,tan_theta);
    } catch (...) {
    if (_axis_extents != NULL)
      {
        __env->ReleaseDoubleArrayElements(_axis_extents,axis_extents_ELTS,0);
      }
    throw;
    }
    tan_theta_ELT = (jdouble) tan_theta;
  __env->SetDoubleArrayRegion(_tan_theta,0,1,&tan_theta_ELT);
    jboolean _Result = (jboolean) Result;
    if (_axis_extents != NULL)
      {
        __env->ReleaseDoubleArrayElements(_axis_extents,axis_extents_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jpx_roi *rhs = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Jpx_roi_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Check_1geometry(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_geometry();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Check_1edge_1intersection(JNIEnv *__env, jobject _self, jint _n, jobject _v1, jobject _v2)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int n = (int) _n;
    kdu_coords *v1 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v1,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *v2 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_v2,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_edge_intersection(n,*v1,*v2);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_Measure_1span(JNIEnv *__env, jobject _self, jdoubleArray _width, jdoubleArray _length)
{
  try {
    if ((_width == NULL) || (_length == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jdouble width_ELT; __env->GetDoubleArrayRegion(_width,0,1,&width_ELT);
    double width = (double) width_ELT;
    jdouble length_ELT; __env->GetDoubleArrayRegion(_length,0,1,&length_ELT);
    double length = (double) length_ELT;
    int Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->measure_span(width,length);
    width_ELT = (jdouble) width;
  __env->SetDoubleArrayRegion(_width,0,1,&width_ELT);
    length_ELT = (jdouble) length;
  __env->SetDoubleArrayRegion(_length,0,1,&length_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Jpx_1roi_Measure_1area(JNIEnv *__env, jobject _self, jdoubleArray _centroid_x, jdoubleArray _centroid_y)
{
  try {
    if ((_centroid_x == NULL) || (_centroid_y == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jdouble centroid_x_ELT; __env->GetDoubleArrayRegion(_centroid_x,0,1,&centroid_x_ELT);
    double centroid_x = (double) centroid_x_ELT;
    jdouble centroid_y_ELT; __env->GetDoubleArrayRegion(_centroid_y,0,1,&centroid_y_ELT);
    double centroid_y = (double) centroid_y_ELT;
    double Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->measure_area(centroid_x,centroid_y);
    centroid_x_ELT = (jdouble) centroid_x;
  __env->SetDoubleArrayRegion(_centroid_x,0,1,&centroid_x_ELT);
    centroid_y_ELT = (jdouble) centroid_y;
  __env->SetDoubleArrayRegion(_centroid_y,0,1,&centroid_y_ELT);
    jdouble _Result = (jdouble) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jdouble) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Contains(JNIEnv *__env, jobject _self, jobject _point)
{
  try {
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->contains(*point);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_Find_1boundary_1projection(JNIEnv *__env, jobject _self, jdouble _x0, jdouble _y0, jdoubleArray _xp, jdoubleArray _yp, jdouble _max_distance, jdouble _tolerance)
{
  try {
    if ((_xp == NULL) || (_yp == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    double x0 = (double) _x0;
    double y0 = (double) _y0;
    jdouble xp_ELT; __env->GetDoubleArrayRegion(_xp,0,1,&xp_ELT);
    double xp = (double) xp_ELT;
    jdouble yp_ELT; __env->GetDoubleArrayRegion(_yp,0,1,&yp_ELT);
    double yp = (double) yp_ELT;
    double max_distance = (double) _max_distance;
    double tolerance = (double) _tolerance;
    int Result;
    jpx_roi *self = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_boundary_projection(x0,y0,xp,yp,max_distance,tolerance);
    xp_ELT = (jdouble) xp;
  __env->SetDoubleArrayRegion(_xp,0,1,&xp_ELT);
    yp_ELT = (jdouble) yp;
  __env->SetDoubleArrayRegion(_yp,0,1,&yp_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

/*****************************************************************************/
/*                              Jpx_roi_editor                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_roi_editor_CLS != NULL) return;
  try {
    Jpx_roi_editor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_roi_editor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_roi_editor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_roi_editor *self = (jpx_roi_editor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_roi_editor *self =
      new jpx_roi_editor();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Set_1max_1undo_1history(JNIEnv *__env, jobject _self, jint _history)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    int history = (int) _history;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_undo_history(history);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_empty();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    jpx_roi_editor *rhs = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Jpx_roi_editor_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Copy_1from(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    jpx_roi_editor *rhs = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Jpx_roi_editor_PTR) & ~((jlong) 1));
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_from(*rhs);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Reset(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->reset();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Set_1mode(JNIEnv *__env, jobject _self, jint _mode)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jpx_roi_editor_mode mode = (jpx_roi_editor_mode) _mode;
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->set_mode(mode);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Init(JNIEnv *__env, jobject _self, jobject _regions, jint _num_regions)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jpx_roi *regions = (jpx_roi *)
      _kdu_long_to_addr((_regions==NULL)?((jlong) 0):(__env->GetLongField(_regions,Jpx_roi_PTR) & ~((jlong) 1)));
    int num_regions = (int) _num_regions;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(regions,num_regions);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1regions(JNIEnv *__env, jobject _self, jintArray _num_regions)
{
  try {
    if (_num_regions == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jint num_regions_ELT; __env->GetIntArrayRegion(_num_regions,0,1,&num_regions_ELT);
    int num_regions = (int) num_regions_ELT;
    jpx_roi *Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_regions(num_regions);
    num_regions_ELT = (jint) num_regions;
  __env->SetIntArrayRegion(_num_regions,0,1,&num_regions_ELT);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jpx_roi_CLS,Jpx_roi_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Modify_1region(JNIEnv *__env, jobject _self, jint _idx, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int idx = (int) _idx;
    jpx_roi *src = (jpx_roi *)
      _kdu_long_to_addr(__env->GetLongField(_src,Jpx_roi_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->modify_region(idx,*src);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1bounding_1box(JNIEnv *__env, jobject _self, jobject _bb, jboolean _include_scribble)
{
  try {
    if (_bb == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *bb = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_bb,Kdu_dims_PTR) & ~((jlong) 1));
    bool include_scribble = (_include_scribble)?true:false;
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_bounding_box(*bb,include_scribble);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Contains_1encoded_1regions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->contains_encoded_regions();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Is_1simple(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_simple();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1history_1info(JNIEnv *__env, jobject _self, jintArray _available_undo_elts, jbooleanArray _can_redo)
{
  try {
    if ((_available_undo_elts == NULL) || (_can_redo == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    jint available_undo_elts_ELT; __env->GetIntArrayRegion(_available_undo_elts,0,1,&available_undo_elts_ELT);
    int available_undo_elts = (int) available_undo_elts_ELT;
    jboolean can_redo_ELT; __env->GetBooleanArrayRegion(_can_redo,0,1,&can_redo_ELT);
    bool can_redo = (can_redo_ELT)?true:false;
    int Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_history_info(available_undo_elts,can_redo);
    available_undo_elts_ELT = (jint) available_undo_elts;
  __env->SetIntArrayRegion(_available_undo_elts,0,1,&available_undo_elts_ELT);
    can_redo_ELT = (jboolean) can_redo;
  __env->SetBooleanArrayRegion(_can_redo,0,1,&can_redo_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Find_1nearest_1anchor(JNIEnv *__env, jobject _self, jobject _point, jboolean _modify_for_selection)
{
  try {
    if (_point == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    bool modify_for_selection = (_modify_for_selection)?true:false;
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_nearest_anchor(*point,modify_for_selection);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Find_1nearest_1boundary_1point(JNIEnv *__env, jobject _self, jobject _point, jboolean _exclude_selected_region)
{
  try {
    if (_point == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    bool exclude_selected_region = (_exclude_selected_region)?true:false;
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_nearest_boundary_point(*point,exclude_selected_region);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Find_1nearest_1guide_1point(JNIEnv *__env, jobject _self, jobject _point)
{
  try {
    if (_point == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_nearest_guide_point(*point);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Select_1anchor(JNIEnv *__env, jobject _self, jobject _point, jboolean _advance)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    bool advance = (_advance)?true:false;
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->select_anchor(*point,advance);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Drag_1selected_1anchor(JNIEnv *__env, jobject _self, jobject _new_point)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *new_point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_new_point,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->drag_selected_anchor(*new_point);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Can_1move_1selected_1anchor(JNIEnv *__env, jobject _self, jobject _new_point, jboolean _check_roid_limit)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *new_point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_new_point,Kdu_coords_PTR) & ~((jlong) 1));
    bool check_roid_limit = (_check_roid_limit)?true:false;
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->can_move_selected_anchor(*new_point,check_roid_limit);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Move_1selected_1anchor(JNIEnv *__env, jobject _self, jobject _new_point)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *new_point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_new_point,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->move_selected_anchor(*new_point);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Cancel_1drag(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->cancel_drag();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Cancel_1selection(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->cancel_selection();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Add_1region(JNIEnv *__env, jobject _self, jboolean _ellipses, jobject _visible_frame)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool ellipses = (_ellipses)?true:false;
    kdu_dims *visible_frame = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_visible_frame,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->add_region(ellipses,*visible_frame);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Delete_1selected_1region(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->delete_selected_region();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Measure_1complexity(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    double Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->measure_complexity();
    jdouble _Result = (jdouble) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jdouble) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Clear_1scribble_1points(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->clear_scribble_points();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Add_1scribble_1point(JNIEnv *__env, jobject _self, jobject _point)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->add_scribble_point(*point);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1scribble_1points(JNIEnv *__env, jobject _self, jintArray _num_points)
{
  try {
    if (_num_points == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    jint num_points_ELT; __env->GetIntArrayRegion(_num_points,0,1,&num_points_ELT);
    int num_points = (int) num_points_ELT;
    kdu_coords *Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_scribble_points(num_points);
    num_points_ELT = (jint) num_points;
  __env->SetIntArrayRegion(_num_points,0,1,&num_points_ELT);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1scribble_1point(JNIEnv *__env, jobject _self, jobject _point, jint _which)
{
  try {
    if (_point == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    int which = (int) _which;
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_scribble_point(*point,which);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Convert_1scribble_1path(JNIEnv *__env, jobject _self, jboolean _replace_content, jint _conversion_flags, jdouble _accuracy)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool replace_content = (_replace_content)?true:false;
    int conversion_flags = (int) _conversion_flags;
    double accuracy = (double) _accuracy;
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->convert_scribble_path(replace_content,conversion_flags,accuracy);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Split_1selected_1anchor(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->split_selected_anchor();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Set_1path_1thickness(JNIEnv *__env, jobject _self, jint _thickness, jbooleanArray _success)
{
  try {
    if (_success == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int thickness = (int) _thickness;
    jboolean success_ELT; __env->GetBooleanArrayRegion(_success,0,1,&success_ELT);
    bool success = (success_ELT)?true:false;
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->set_path_thickness(thickness,success);
    success_ELT = (jboolean) success;
  __env->SetBooleanArrayRegion(_success,0,1,&success_ELT);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Fill_1closed_1paths(JNIEnv *__env, jobject _self, jbooleanArray _success, jint _required_member_idx)
{
  try {
    if (_success == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jboolean success_ELT; __env->GetBooleanArrayRegion(_success,0,1,&success_ELT);
    bool success = (success_ELT)?true:false;
    int required_member_idx = (int) _required_member_idx;
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->fill_closed_paths(success,required_member_idx);
    success_ELT = (jboolean) success;
  __env->SetBooleanArrayRegion(_success,0,1,&success_ELT);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Undo(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->undo();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Redo(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->redo();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1selection(JNIEnv *__env, jobject _self, jobject _point, jintArray _num_point_instances)
{
  try {
    if ((_point == NULL) || (_num_point_instances == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    jint num_point_instances_ELT; __env->GetIntArrayRegion(_num_point_instances,0,1,&num_point_instances_ELT);
    int num_point_instances = (int) num_point_instances_ELT;
    int Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_selection(*point,num_point_instances);
    num_point_instances_ELT = (jint) num_point_instances;
  __env->SetIntArrayRegion(_num_point_instances,0,1,&num_point_instances_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Enum_1paths(JNIEnv *__env, jobject _self, jlongArray _path_flags, jbyteArray _path_members, jobject _path_start, jobject _path_end)
{
  try {
    if ((_path_start == NULL) || (_path_end == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_uint32 *path_flags = NULL;
    jlong *path_flags_ELTS = NULL;
    jsize path_flags_L = 0;
    if (_path_flags != NULL)
      {
        path_flags_ELTS = __env->GetLongArrayElements(_path_flags,NULL);
        path_flags_L = __env->GetArrayLength(_path_flags);
        path_flags = new kdu_uint32[path_flags_L];
        { for (int i=0; i<path_flags_L; i++) path_flags[i] = (kdu_uint32)(path_flags_ELTS[i]); }
      }
    kdu_byte *path_members = NULL;
    jbyte *path_members_ELTS = NULL;
    if (_path_members != NULL)
      {
        path_members_ELTS = __env->GetByteArrayElements(_path_members,NULL);
        path_members = (kdu_byte *) path_members_ELTS;
      }
    kdu_coords *path_start = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_path_start,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *path_end = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_path_end,Kdu_coords_PTR) & ~((jlong) 1));
    int Result;
    try { // So we can clean up temporary arrays
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->enum_paths(path_flags,path_members,*path_start,*path_end);
    } catch (...) {
    if (_path_flags != NULL)
      {
        delete[] path_flags;
        __env->ReleaseLongArrayElements(_path_flags,path_flags_ELTS,0);
      }
    if (_path_members != NULL)
      {
        __env->ReleaseByteArrayElements(_path_members,path_members_ELTS,0);
      }
    throw;
    }
    if (_path_flags != NULL)
      {
        for (int i=0; i<path_flags_L; i++) path_flags_ELTS[i] = (jlong)(path_flags[i]);
      }
    jint _Result = (jint) Result;
    if (_path_flags != NULL)
      {
        delete[] path_flags;
        __env->ReleaseLongArrayElements(_path_flags,path_flags_ELTS,0);
      }
    if (_path_members != NULL)
      {
        __env->ReleaseByteArrayElements(_path_members,path_members_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1region(JNIEnv *__env, jobject _self, jint _idx)
{
  try {
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int idx = (int) _idx;
    jpx_roi *Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_region(idx);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jpx_roi_CLS,Jpx_roi_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1path_1segment_1for_1region(JNIEnv *__env, jobject _self, jint _idx, jobject _ep1, jobject _ep2)
{
  try {
    if ((_ep1 == NULL) || (_ep2 == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int idx = (int) _idx;
    kdu_coords *ep1 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ep1,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ep2 = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ep2,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_path_segment_for_region(idx,*ep1,*ep2);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1anchor(JNIEnv *__env, jobject _self, jobject _point, jint _which, jboolean _selected_region_only, jboolean _dragged)
{
  try {
    if (_point == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    int which = (int) _which;
    bool selected_region_only = (_selected_region_only)?true:false;
    bool dragged = (_dragged)?true:false;
    int Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_anchor(*point,which,selected_region_only,dragged);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1edge(JNIEnv *__env, jobject _self, jobject _from, jobject _to, jint _which, jboolean _selected_region_only, jboolean _dragged, jboolean _want_shared_flag)
{
  try {
    if ((_from == NULL) || (_to == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *from = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_from,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *to = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_to,Kdu_coords_PTR) & ~((jlong) 1));
    int which = (int) _which;
    bool selected_region_only = (_selected_region_only)?true:false;
    bool dragged = (_dragged)?true:false;
    bool want_shared_flag = (_want_shared_flag)?true:false;
    int Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_edge(*from,*to,which,selected_region_only,dragged,want_shared_flag);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1curve(JNIEnv *__env, jobject _self, jobject _centre, jobject _extent, jobject _skew, jint _which, jboolean _selected_region_only, jboolean _dragged)
{
  try {
    if ((_centre == NULL) || (_extent == NULL) || (_skew == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *centre = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_centre,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *extent = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_extent,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *skew = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_skew,Kdu_coords_PTR) & ~((jlong) 1));
    int which = (int) _which;
    bool selected_region_only = (_selected_region_only)?true:false;
    bool dragged = (_dragged)?true:false;
    int Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_curve(*centre,*extent,*skew,which,selected_region_only,dragged);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1path_1segment(JNIEnv *__env, jobject _self, jobject _from, jobject _to, jint _which)
{
  try {
    if ((_from == NULL) || (_to == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_roi_editor_CLS==NULL)
      Jpx_roi_editor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *from = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_from,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *to = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_to,Kdu_coords_PTR) & ~((jlong) 1));
    int which = (int) _which;
    int Result;
    jpx_roi_editor *self = (jpx_roi_editor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_roi_editor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_path_segment(*from,*to,which);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

/*****************************************************************************/
/*                                Jpx_source                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_source_CLS != NULL) return;
  try {
    Jpx_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_source *self = (jpx_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1source_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_source *self =
      new jpx_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *src = (jp2_family_src *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    bool return_if_incompatible = (_return_if_incompatible)?true:false;
    int Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open(src,return_if_incompatible);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ultimate_src();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_family_src_CLS,Jp2_family_src_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1compatibility(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    jpx_compatibility Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_compatibility();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_compatibility_CLS,Jpx_compatibility_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1data_1references(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    jp2_data_references Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_data_references();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_data_references_CLS,Jp2_data_references_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1codestreams(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->count_codestreams(count);
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1compositing_1layers(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->count_compositing_layers(count);
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1containers(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->count_containers(count);
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1codestream(JNIEnv *__env, jobject _self, jint _which, jboolean _need_main_header)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    int which = (int) _which;
    bool need_main_header = (_need_main_header)?true:false;
    jpx_codestream_source Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_codestream(which,need_main_header);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_codestream_source_CLS,Jpx_codestream_source_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1layer(JNIEnv *__env, jobject _self, jint _which, jboolean _need_stream_headers)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int which = (int) _which;
    bool need_stream_headers = (_need_stream_headers)?true:false;
    jpx_layer_source Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_layer(which,need_stream_headers);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jpx_layer_source_CLS,Jpx_layer_source_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Get_1num_1layer_1codestreams(JNIEnv *__env, jobject _self, jint _which_layer)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    int which_layer = (int) _which_layer;
    int Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_layer_codestreams(which_layer);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Get_1layer_1codestream_1id(JNIEnv *__env, jobject _self, jint _which_layer, jint _which_stream)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    int which_layer = (int) _which_layer;
    int which_stream = (int) _which_stream;
    int Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_layer_codestream_id(which_layer,which_stream);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1container(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    int which = (int) _which;
    jpx_container_source Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_container(which);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_container_source_CLS,Jpx_container_source_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Find_1unique_1compatible_1container(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_container_source_CLS==NULL)
      Jpx_container_source_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    jpx_container_source Result;
    try { // So we can clean up temporary arrays
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_unique_compatible_container(num_codestreams,codestream_indices,num_compositing_layers,layer_indices);
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_container_source_CLS,Jpx_container_source_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1composition(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jpx_composition Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_composition();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_composition_CLS,Jpx_composition_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Generate_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _min_frame_idx, jint _max_frame_idx, jint _max_layer_idx, jint _max_codestream_idx, jboolean _priority)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *client_window = (kdu_window *)
      _kdu_long_to_addr((_client_window==NULL)?((jlong) 0):(__env->GetLongField(_client_window,Kdu_window_PTR) & ~((jlong) 1)));
    int min_frame_idx = (int) _min_frame_idx;
    int max_frame_idx = (int) _max_frame_idx;
    int max_layer_idx = (int) _max_layer_idx;
    int max_codestream_idx = (int) _max_codestream_idx;
    bool priority = (_priority)?true:false;
    int Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->generate_metareq(client_window,min_frame_idx,max_frame_idx,max_layer_idx,max_codestream_idx,priority);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1meta_1manager(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    jpx_meta_manager Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_meta_manager();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_meta_manager_CLS,Jpx_meta_manager_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->close();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Jpx_target                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_target_CLS != NULL) return;
  try {
    Jpx_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_target *self = (jpx_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1target_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_target *self =
      new jpx_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    bool Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(tgt);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1compatibility(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    jpx_compatibility Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_compatibility();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_compatibility_CLS,Jpx_compatibility_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1data_1references(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    jp2_data_references Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_data_references();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_data_references_CLS,Jp2_data_references_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1codestream(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    jpx_codestream_target Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->add_codestream();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_codestream_target_CLS,Jpx_codestream_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1layer(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    jpx_layer_target Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->add_layer();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_layer_target_CLS,Jpx_layer_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1composition(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jpx_composition Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_composition();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_composition_CLS,Jpx_composition_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Expect_1containers(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->expect_containers();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1container(JNIEnv *__env, jobject _self, jint _num_base_codestreams, jint _num_base_layers, jint _repetition_factor)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    int num_base_codestreams = (int) _num_base_codestreams;
    int num_base_layers = (int) _num_base_layers;
    int repetition_factor = (int) _repetition_factor;
    jpx_container_target Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->add_container(num_base_codestreams,num_base_layers,repetition_factor);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_container_target_CLS,Jpx_container_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1container(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_container_target_CLS==NULL)
      Jpx_container_target_LOADER(__env);
    int which = (int) _which;
    jpx_container_target Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_container(which);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_container_target_CLS,Jpx_container_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Configure_1codestream_1aggregation(JNIEnv *__env, jobject _self, jint _min_j2cx_streams, jint _max_j2cx_streams)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    int min_j2cx_streams = (int) _min_j2cx_streams;
    int max_j2cx_streams = (int) _max_j2cx_streams;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->configure_codestream_aggregation(min_j2cx_streams,max_j2cx_streams);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1meta_1manager(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    jpx_meta_manager Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_meta_manager();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_meta_manager_CLS,Jpx_meta_manager_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Write_1headers(JNIEnv *__env, jobject _self, jintArray _i_param)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    int *i_param = NULL;
    jint *i_param_ELTS = NULL;
    if (_i_param != NULL)
      {
        i_param_ELTS = __env->GetIntArrayElements(_i_param,NULL);
        i_param = (int *) i_param_ELTS;
      }
    jp2_output_box *Result;
    try { // So we can clean up temporary arrays
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write_headers(i_param);
    } catch (...) {
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_output_box_CLS,Jp2_output_box_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Write_1metadata(JNIEnv *__env, jobject _self, jintArray _i_param)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    int *i_param = NULL;
    jint *i_param_ELTS = NULL;
    if (_i_param != NULL)
      {
        i_param_ELTS = __env->GetIntArrayElements(_i_param,NULL);
        i_param = (int *) i_param_ELTS;
      }
    jp2_output_box *Result;
    try { // So we can clean up temporary arrays
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write_metadata(i_param);
    } catch (...) {
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_output_box_CLS,Jp2_output_box_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1target_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    bool Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->close();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                               Kdu_analysis                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_analysis_CLS != NULL) return;
  try {
    Kdu_analysis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_analysis_CLS==NULL)
      Kdu_analysis_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_analysis_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_analysis_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_analysis *self = (kdu_analysis *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1create__Lkdu_1jni_Kdu_1node_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1roi_1node_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2I(JNIEnv *__env, jclass this_class, jobject _node, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jobject _env_queue, jint _flags)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *node_S = _kdu_long_to_addr((_node==NULL)?((jlong) 0):(__env->GetLongField(_node,Kdu_node_PTR)));
    kdu_node node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = (kdu_roi_node *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_node_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    kdu_analysis *self =
      new kdu_analysis(node,allocator,use_shorts,normalization,roi,env,env_queue,flags);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1create__Lkdu_1jni_Kdu_1resolution_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1roi_1node_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2(JNIEnv *__env, jclass this_class, jobject _resolution, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jobject _env_queue)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *resolution_S = _kdu_long_to_addr((_resolution==NULL)?((jlong) 0):(__env->GetLongField(_resolution,Kdu_resolution_PTR)));
    kdu_resolution resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = (kdu_roi_node *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_node_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    kdu_analysis *self =
      new kdu_analysis(resolution,allocator,use_shorts,normalization,roi,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                 Kdu_block                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_block_CLS != NULL) return;
  try {
    Kdu_block_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1max_1passes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_passes();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1passes(JNIEnv *__env, jobject _self, jint _new_passes, jboolean _copy_existing)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_passes = (int) _new_passes;
    bool copy_existing = (_copy_existing)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_passes(new_passes,copy_existing);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1max_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_bytes();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1bytes(JNIEnv *__env, jobject _self, jint _new_bytes, jboolean _copy_existing)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_bytes = (int) _new_bytes;
    bool copy_existing = (_copy_existing)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_bytes(new_bytes,copy_existing);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1samples(JNIEnv *__env, jobject _self, jint _new_samples)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_samples = (int) _new_samples;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_samples(new_samples);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1contexts(JNIEnv *__env, jobject _self, jint _new_contexts)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_contexts = (int) _new_contexts;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_contexts(new_contexts);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Map_1storage(JNIEnv *__env, jobject _self, jint _contexts, jint _samples, jint _retained_state)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int contexts = (int) _contexts;
    int samples = (int) _samples;
    int retained_state = (int) _retained_state;
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->map_storage(contexts,samples,retained_state);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1block_Get_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_size();
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1size(JNIEnv *__env, jobject _self, jobject _new_size)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *new_size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_new_size,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_size(*new_size);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1block_Get_1region(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_region();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1region(JNIEnv *__env, jobject _self, jobject _new_region)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_region(*new_region);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1transpose(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_transpose();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1transpose(JNIEnv *__env, jobject _self, jboolean _new_transpose)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool new_transpose = (_new_transpose)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_transpose(new_transpose);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1vflip(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_vflip();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1vflip(JNIEnv *__env, jobject _self, jboolean _new_vflip)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool new_vflip = (_new_vflip)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_vflip(new_vflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1hflip(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_hflip();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1hflip(JNIEnv *__env, jobject _self, jboolean _new_hflip)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool new_hflip = (_new_hflip)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_hflip(new_hflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1modes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_modes();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1modes(JNIEnv *__env, jobject _self, jint _new_modes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_modes = (int) _new_modes;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_modes(new_modes);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1orientation(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_orientation();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1orientation(JNIEnv *__env, jobject _self, jint _new_orientation)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_orientation = (int) _new_orientation;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_orientation(new_orientation);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1missing_1msbs(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_missing_msbs();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1missing_1msbs(JNIEnv *__env, jobject _self, jint _new_msbs)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_msbs = (int) _new_msbs;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_missing_msbs(new_msbs);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1num_1passes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_passes();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1num_1passes(JNIEnv *__env, jobject _self, jint _new_passes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_passes = (int) _new_passes;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_num_passes(new_passes);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1pass_1lengths(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->get_pass_lengths(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1pass_1lengths(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_pass_lengths(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1pass_1slopes(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->get_pass_slopes(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1pass_1slopes(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_pass_slopes(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1buffered_1bytes(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _first_idx, jint _num_bytes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_bytes = (int) _num_bytes;
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->get_buffered_bytes(buffer,first_idx,num_bytes);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1buffered_1bytes(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _first_idx, jint _num_bytes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_bytes = (int) _num_bytes;
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_buffered_bytes(buffer,first_idx,num_bytes);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Start_1timing(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->start_timing();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Finish_1timing(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->finish_timing();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Initialize_1timing(JNIEnv *__env, jobject _self, jint _iterations)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int iterations = (int) _iterations;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->initialize_timing(iterations);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1block_Get_1timing_1stats(JNIEnv *__env, jobject _self, jlongArray _unique_samples, jdoubleArray _time_wasted)
{
  try {
    if ((_unique_samples == NULL) || (_time_wasted == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    jlong unique_samples_ELT; __env->GetLongArrayRegion(_unique_samples,0,1,&unique_samples_ELT);
    kdu_long unique_samples = (kdu_long) unique_samples_ELT;
    jdouble time_wasted_ELT; __env->GetDoubleArrayRegion(_time_wasted,0,1,&time_wasted_ELT);
    double time_wasted = (double) time_wasted_ELT;
    double Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_timing_stats(unique_samples,time_wasted);
    unique_samples_ELT = (jlong) unique_samples;
  __env->SetLongArrayRegion(_unique_samples,0,1,&unique_samples_ELT);
    time_wasted_ELT = (jdouble) time_wasted;
  __env->SetDoubleArrayRegion(_time_wasted,0,1,&time_wasted_ELT);
    jdouble _Result = (jdouble) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jdouble) 0;
}

/*****************************************************************************/
/*                             Kdu_block_decoder                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_block_decoder_CLS != NULL) return;
  try {
    Kdu_block_decoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_block_decoder_CLS==NULL)
      Kdu_block_decoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_block_decoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_block_decoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_block_decoder *self = (kdu_block_decoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_block_decoder *self =
      new kdu_block_decoder();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Decode(JNIEnv *__env, jobject _self, jobject _block)
{
  try {
    if (Kdu_block_decoder_CLS==NULL)
      Kdu_block_decoder_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    kdu_block_decoder *self = (kdu_block_decoder *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_decoder_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->decode(block);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                             Kdu_block_encoder                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_block_encoder_CLS != NULL) return;
  try {
    Kdu_block_encoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_block_encoder_CLS==NULL)
      Kdu_block_encoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_block_encoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_block_encoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_block_encoder *self = (kdu_block_encoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_block_encoder *self =
      new kdu_block_encoder();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Encode(JNIEnv *__env, jobject _self, jobject _block, jboolean _reversible, jdouble _msb_wmse, jint _estimated_slope_threshold)
{
  try {
    if (Kdu_block_encoder_CLS==NULL)
      Kdu_block_encoder_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    bool reversible = (_reversible)?true:false;
    double msb_wmse = (double) _msb_wmse;
    kdu_uint16 estimated_slope_threshold = (kdu_uint16) _estimated_slope_threshold;
    kdu_block_encoder *self = (kdu_block_encoder *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_encoder_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->encode(block,reversible,msb_wmse,estimated_slope_threshold);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                 Kdu_cache                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_cache_CLS != NULL) return;
  try {
    Kdu_cache_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_cache_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_cache_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_cache *self = (_aux_extended__kdu_cache *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_cache *self_delegator =(_jni_delegator__kdu_cache *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_cache *self =
      new _aux_extended__kdu_cache();
    self->_delegator = new _jni_delegator__kdu_cache(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    _aux_extended__kdu_cache *self = (_aux_extended__kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_cache *self_delegator = (_jni_delegator__kdu_cache *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Attach_1to(JNIEnv *__env, jobject _self, jobject _existing)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *existing = (kdu_cache *)
      _kdu_long_to_addr((_existing==NULL)?((jlong) 0):(__env->GetLongField(_existing,Kdu_cache_PTR) & ~((jlong) 1)));
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->attach_to(existing);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Add_1to_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbyteArray _data, jint _offset, jint _num_bytes, jboolean _is_final, jboolean _add_as_most_recent, jboolean _mark_if_augmented)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int offset = (int) _offset;
    int num_bytes = (int) _num_bytes;
    bool is_final = (_is_final)?true:false;
    bool add_as_most_recent = (_add_as_most_recent)?true:false;
    bool mark_if_augmented = (_mark_if_augmented)?true:false;
    try { // So we can clean up temporary arrays
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->add_to_databin(databin_class,codestream_id,databin_id,data,offset,num_bytes,is_final,add_as_most_recent,mark_if_augmented);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Get_1databin_1length(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbooleanArray _is_complete)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool *is_complete = NULL;
    jboolean *is_complete_ELTS = NULL;
    jsize is_complete_L = 0;
    if (_is_complete != NULL)
      {
        is_complete_ELTS = __env->GetBooleanArrayElements(_is_complete,NULL);
        is_complete_L = __env->GetArrayLength(_is_complete);
        is_complete = new bool[is_complete_L];
        { for (int i=0; i<is_complete_L; i++) is_complete[i] = (is_complete_ELTS[i])?true:false; }
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_databin_length(databin_class,codestream_id,databin_id,is_complete);
    } catch (...) {
    if (_is_complete != NULL)
      {
        delete[] is_complete;
        __env->ReleaseBooleanArrayElements(_is_complete,is_complete_ELTS,0);
      }
    throw;
    }
    if (_is_complete != NULL)
      {
        for (int i=0; i<is_complete_L; i++) is_complete_ELTS[i] = (jboolean)(is_complete[i]);
      }
    jint _Result = (jint) Result;
    if (_is_complete != NULL)
      {
        delete[] is_complete;
        __env->ReleaseBooleanArrayElements(_is_complete,is_complete_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Promote_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->promote_databin(databin_class,codestream_id,databin_id);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Demote_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->demote_databin(databin_class,codestream_id,databin_id);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1max_1codestream_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_codestream_id();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1codestream(JNIEnv *__env, jobject _self, jlong _stream_id)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_long stream_id = (kdu_long) _stream_id;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_next_codestream(stream_id);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1lru_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _only_if_marked)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool only_if_marked = (_only_if_marked)?true:false;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_next_lru_databin(databin_class,codestream_id,databin_id,only_if_marked);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1mru_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _only_if_marked)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool only_if_marked = (_only_if_marked)?true:false;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_next_mru_databin(databin_class,codestream_id,databin_id,only_if_marked);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1cache_Mark_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _mark_state)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool mark_state = (_mark_state)?true:false;
    bool Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->mark_databin(databin_class,codestream_id,databin_id,mark_state);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Clear_1all_1marks(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->clear_all_marks();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Set_1all_1marks(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_all_marks();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Get_1databin_1prefix(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbyteArray _buf, jint _max_bytes)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int max_bytes = (int) _max_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_databin_prefix(databin_class,codestream_id,databin_id,buf,max_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Set_1read_1scope(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbooleanArray _is_complete)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool *is_complete = NULL;
    jboolean *is_complete_ELTS = NULL;
    jsize is_complete_L = 0;
    if (_is_complete != NULL)
      {
        is_complete_ELTS = __env->GetBooleanArrayElements(_is_complete,NULL);
        is_complete_L = __env->GetArrayLength(_is_complete);
        is_complete = new bool[is_complete_L];
        { for (int i=0; i<is_complete_L; i++) is_complete[i] = (is_complete_ELTS[i])?true:false; }
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_read_scope(databin_class,codestream_id,databin_id,is_complete);
    } catch (...) {
    if (_is_complete != NULL)
      {
        delete[] is_complete;
        __env->ReleaseBooleanArrayElements(_is_complete,is_complete_ELTS,0);
      }
    throw;
    }
    if (_is_complete != NULL)
      {
        for (int i=0; i<is_complete_L; i++) is_complete_ELTS[i] = (jboolean)(is_complete[i]);
      }
    jint _Result = (jint) Result;
    if (_is_complete != NULL)
      {
        delete[] is_complete;
        __env->ReleaseBooleanArrayElements(_is_complete,is_complete_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1peak_1cache_1memory(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_peak_cache_memory();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1transferred_1bytes(JNIEnv *__env, jobject _self, jint _databin_class)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_transferred_bytes(databin_class);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

void _jni_delegator__kdu_cache::acquire_lock()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    jmethodID __Acquire_lock_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Acquire_lock","()V");
    __env->CallVoidMethod(_self,__Acquire_lock_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

void _jni_delegator__kdu_cache::release_lock()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    jmethodID __Release_lock_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Release_lock","()V");
    __env->CallVoidMethod(_self,__Release_lock_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

/*****************************************************************************/
/*                            Kdu_channel_mapping                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_channel_mapping_CLS != NULL) return;
  try {
    Kdu_channel_mapping_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_channel_mapping_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_channel_mapping_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_channel_mapping *self = (kdu_channel_mapping *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_channel_mapping *self =
      new kdu_channel_mapping();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Clear(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->clear();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__IIZ(JNIEnv *__env, jobject _self, jint _num_identical_channels, jint _bit_depth, jboolean _is_signed)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int num_identical_channels = (int) _num_identical_channels;
    int bit_depth = (int) _bit_depth;
    bool is_signed = (_is_signed)?true:false;
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->configure(num_identical_channels,bit_depth,is_signed);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Kdu_1codestream_2(JNIEnv *__env, jobject _self, jobject _codestream)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->configure(codestream);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Jp2_1colour_2Lkdu_1jni_Jp2_1channels_2ILkdu_1jni_Jp2_1palette_2Lkdu_1jni_Jp2_1dimensions_2(JNIEnv *__env, jobject _self, jobject _colour, jobject _channels, jint _codestream_idx, jobject _palette, jobject _codestream_dimensions)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *colour_S = _kdu_long_to_addr((_colour==NULL)?((jlong) 0):(__env->GetLongField(_colour,Jp2_colour_PTR)));
    jp2_colour colour = *((jp2_colour *)(&colour_S));
    void *channels_S = _kdu_long_to_addr((_channels==NULL)?((jlong) 0):(__env->GetLongField(_channels,Jp2_channels_PTR) & ~((jlong) 1)));
    kdu_int64 channels_P = (kdu_int64)((_channels==NULL)?((jlong) 0):__env->GetLongField(_channels,Jp2_channels_PARAM));
    jp2_channels channels;
    ((void **) &channels)[0] = channels_S;
    ((kdu_int64 *) &channels)[1] = channels_P;
    int codestream_idx = (int) _codestream_idx;
    void *palette_S = _kdu_long_to_addr((_palette==NULL)?((jlong) 0):(__env->GetLongField(_palette,Jp2_palette_PTR)));
    jp2_palette palette = *((jp2_palette *)(&palette_S));
    void *codestream_dimensions_S = _kdu_long_to_addr((_codestream_dimensions==NULL)?((jlong) 0):(__env->GetLongField(_codestream_dimensions,Jp2_dimensions_PTR)));
    jp2_dimensions codestream_dimensions = *((jp2_dimensions *)(&codestream_dimensions_S));
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->configure(colour,channels,codestream_idx,palette,codestream_dimensions);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Jp2_1source_2Z(JNIEnv *__env, jobject _self, jobject _jp2_in, jboolean _ignore_alpha)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    jp2_source *jp2_in = (jp2_source *)
      _kdu_long_to_addr((_jp2_in==NULL)?((jlong) 0):(__env->GetLongField(_jp2_in,Jp2_source_PTR) & ~((jlong) 1)));
    bool ignore_alpha = (_ignore_alpha)?true:false;
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->configure(jp2_in,ignore_alpha);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Add_1alpha_1to_1configuration(JNIEnv *__env, jobject _self, jobject _channels, jint _codestream_idx, jobject _palette, jobject _codestream_dimensions, jboolean _ignore_premultiplied_alpha)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *channels_S = _kdu_long_to_addr((_channels==NULL)?((jlong) 0):(__env->GetLongField(_channels,Jp2_channels_PTR) & ~((jlong) 1)));
    kdu_int64 channels_P = (kdu_int64)((_channels==NULL)?((jlong) 0):__env->GetLongField(_channels,Jp2_channels_PARAM));
    jp2_channels channels;
    ((void **) &channels)[0] = channels_S;
    ((kdu_int64 *) &channels)[1] = channels_P;
    int codestream_idx = (int) _codestream_idx;
    void *palette_S = _kdu_long_to_addr((_palette==NULL)?((jlong) 0):(__env->GetLongField(_palette,Jp2_palette_PTR)));
    jp2_palette palette = *((jp2_palette *)(&palette_S));
    void *codestream_dimensions_S = _kdu_long_to_addr((_codestream_dimensions==NULL)?((jlong) 0):(__env->GetLongField(_codestream_dimensions,Jp2_dimensions_PTR)));
    jp2_dimensions codestream_dimensions = *((jp2_dimensions *)(&codestream_dimensions_S));
    bool ignore_premultiplied_alpha = (_ignore_premultiplied_alpha)?true:false;
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->add_alpha_to_configuration(channels,codestream_idx,palette,codestream_dimensions,ignore_premultiplied_alpha);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1num_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_channels();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Set_1num_1channels(JNIEnv *__env, jobject _self, jint _num)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int num = (int) _num;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_num_channels(num);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1num_1colour_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_colour_channels();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1source_1component(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int n = (int) _n;
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_source_component(n);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1default_1rendering_1precision(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int n = (int) _n;
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_default_rendering_precision(n);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1default_1rendering_1signed(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int n = (int) _n;
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_default_rendering_signed(n);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1colour_1converter(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    jp2_colour_converter *Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_colour_converter();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_colour_converter_CLS,Jp2_colour_converter_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_client                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_client_CLS != NULL) return;
  try {
    Kdu_client_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_client_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_client_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_client *self = (kdu_client *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_client *self =
      new kdu_client();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1client_Check_1compatible_1url(JNIEnv *__env, jclass this_class, jstring _url, jboolean _resource_component_must_exist)
{
  try {
    const char *url = NULL;
    if (_url != NULL)
      {
        url = __env->GetStringUTFChars(_url,NULL);
      }
    bool resource_component_must_exist = (_resource_component_must_exist)?true:false;
    const char * Result;
    try { // So we can clean up temporary arrays
    Result = kdu_client::check_compatible_url(url,resource_component_must_exist);
    } catch (...) {
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    throw;
    }
    jstring _Result = __env->NewStringUTF(Result);
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Install_1context_1translator(JNIEnv *__env, jobject _self, jobject _translator)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    kdu_client_translator *translator = (kdu_client_translator *)
      _kdu_long_to_addr((_translator==NULL)?((jlong) 0):(__env->GetLongField(_translator,Kdu_client_translator_PTR) & ~((jlong) 1)));
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->install_context_translator(translator);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Install_1notifier(JNIEnv *__env, jobject _self, jobject _notifier)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    kdu_client_notifier *notifier = (kdu_client_notifier *)
      _kdu_long_to_addr((_notifier==NULL)?((jlong) 0):(__env->GetLongField(_notifier,Kdu_client_notifier_PTR) & ~((jlong) 1)));
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->install_notifier(notifier);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Set_1primary_1timeout(JNIEnv *__env, jobject _self, jlong _timeout_usecs)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    kdu_long timeout_usecs = (kdu_long) _timeout_usecs;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_primary_timeout(timeout_usecs);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Set_1aux_1tcp_1timeout(JNIEnv *__env, jobject _self, jlong _timeout_usecs)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    kdu_long timeout_usecs = (kdu_long) _timeout_usecs;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_aux_tcp_timeout(timeout_usecs);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1client_Connect(JNIEnv *__env, jobject _self, jstring _server, jstring _proxy, jstring _request, jstring _channel_transport, jstring _cache_dir, jint _mode, jstring _compatible_url)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    const char *server = NULL;
    if (_server != NULL)
      {
        server = __env->GetStringUTFChars(_server,NULL);
      }
    const char *proxy = NULL;
    if (_proxy != NULL)
      {
        proxy = __env->GetStringUTFChars(_proxy,NULL);
      }
    const char *request = NULL;
    if (_request != NULL)
      {
        request = __env->GetStringUTFChars(_request,NULL);
      }
    const char *channel_transport = NULL;
    if (_channel_transport != NULL)
      {
        channel_transport = __env->GetStringUTFChars(_channel_transport,NULL);
      }
    const char *cache_dir = NULL;
    if (_cache_dir != NULL)
      {
        cache_dir = __env->GetStringUTFChars(_cache_dir,NULL);
      }
    kdu_client_mode mode = (kdu_client_mode) _mode;
    const char *compatible_url = NULL;
    if (_compatible_url != NULL)
      {
        compatible_url = __env->GetStringUTFChars(_compatible_url,NULL);
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->connect(server,proxy,request,channel_transport,cache_dir,mode,compatible_url);
    } catch (...) {
    if (_server != NULL)
      {
        __env->ReleaseStringUTFChars(_server,server);
      }
    if (_proxy != NULL)
      {
        __env->ReleaseStringUTFChars(_proxy,proxy);
      }
    if (_request != NULL)
      {
        __env->ReleaseStringUTFChars(_request,request);
      }
    if (_channel_transport != NULL)
      {
        __env->ReleaseStringUTFChars(_channel_transport,channel_transport);
      }
    if (_cache_dir != NULL)
      {
        __env->ReleaseStringUTFChars(_cache_dir,cache_dir);
      }
    if (_compatible_url != NULL)
      {
        __env->ReleaseStringUTFChars(_compatible_url,compatible_url);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_server != NULL)
      {
        __env->ReleaseStringUTFChars(_server,server);
      }
    if (_proxy != NULL)
      {
        __env->ReleaseStringUTFChars(_proxy,proxy);
      }
    if (_request != NULL)
      {
        __env->ReleaseStringUTFChars(_request,request);
      }
    if (_channel_transport != NULL)
      {
        __env->ReleaseStringUTFChars(_channel_transport,channel_transport);
      }
    if (_cache_dir != NULL)
      {
        __env->ReleaseStringUTFChars(_cache_dir,cache_dir);
      }
    if (_compatible_url != NULL)
      {
        __env->ReleaseStringUTFChars(_compatible_url,compatible_url);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1interactive(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_interactive();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1one_1time_1request(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_one_time_request();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Connect_1request_1has_1non_1empty_1window(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->connect_request_has_non_empty_window();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1client_Get_1target_1name(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    const char * Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_target_name();
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Check_1compatible_1connection(JNIEnv *__env, jobject _self, jstring _server, jstring _request, jint _mode, jstring _compatible_url)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    const char *server = NULL;
    if (_server != NULL)
      {
        server = __env->GetStringUTFChars(_server,NULL);
      }
    const char *request = NULL;
    if (_request != NULL)
      {
        request = __env->GetStringUTFChars(_request,NULL);
      }
    kdu_client_mode mode = (kdu_client_mode) _mode;
    const char *compatible_url = NULL;
    if (_compatible_url != NULL)
      {
        compatible_url = __env->GetStringUTFChars(_compatible_url,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_compatible_connection(server,request,mode,compatible_url);
    } catch (...) {
    if (_server != NULL)
      {
        __env->ReleaseStringUTFChars(_server,server);
      }
    if (_request != NULL)
      {
        __env->ReleaseStringUTFChars(_request,request);
      }
    if (_compatible_url != NULL)
      {
        __env->ReleaseStringUTFChars(_compatible_url,compatible_url);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_server != NULL)
      {
        __env->ReleaseStringUTFChars(_server,server);
      }
    if (_request != NULL)
      {
        __env->ReleaseStringUTFChars(_request,request);
      }
    if (_compatible_url != NULL)
      {
        __env->ReleaseStringUTFChars(_compatible_url,compatible_url);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1client_Add_1queue(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->add_queue();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1active(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_active();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Target_1started(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->target_started();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1alive(JNIEnv *__env, jobject _self, jint _queue_id)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_alive(queue_id);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1idle(JNIEnv *__env, jobject _self, jint _queue_id)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_idle(queue_id);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Disconnect(JNIEnv *__env, jobject _self, jboolean _keep_transport_open, jint _timeout_milliseconds, jint _queue_id, jboolean _wait_for_completion)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool keep_transport_open = (_keep_transport_open)?true:false;
    int timeout_milliseconds = (int) _timeout_milliseconds;
    int queue_id = (int) _queue_id;
    bool wait_for_completion = (_wait_for_completion)?true:false;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->disconnect(keep_transport_open,timeout_milliseconds,queue_id,wait_for_completion);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Post_1window(JNIEnv *__env, jobject _self, jobject _window, jint _queue_id, jboolean _preemptive, jobject _prefs, jlong _custom_id, jlong _service_usecs)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr((_window==NULL)?((jlong) 0):(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1)));
    int queue_id = (int) _queue_id;
    bool preemptive = (_preemptive)?true:false;
    kdu_window_prefs *prefs = (kdu_window_prefs *)
      _kdu_long_to_addr((_prefs==NULL)?((jlong) 0):(__env->GetLongField(_prefs,Kdu_window_prefs_PTR) & ~((jlong) 1)));
    kdu_long custom_id = (kdu_long) _custom_id;
    kdu_long service_usecs = (kdu_long) _service_usecs;
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->post_window(window,queue_id,preemptive,prefs,custom_id,service_usecs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Sync_1timing(JNIEnv *__env, jobject _self, jint _queue_id, jlong _app_time_usecs, jboolean _expect_preemptive)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    kdu_long app_time_usecs = (kdu_long) _app_time_usecs;
    bool expect_preemptive = (_expect_preemptive)?true:false;
    kdu_long Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->sync_timing(queue_id,app_time_usecs,expect_preemptive);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Get_1timed_1request_1horizon(JNIEnv *__env, jobject _self, jint _queue_id, jboolean _expect_preemptive)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    bool expect_preemptive = (_expect_preemptive)?true:false;
    kdu_long Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_timed_request_horizon(queue_id,expect_preemptive);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Trim_1timed_1requests(JNIEnv *__env, jobject _self, jint _queue_id, jlongArray _custom_id, jbooleanArray _partially_sent)
{
  try {
    if ((_custom_id == NULL) || (_partially_sent == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    jlong custom_id_ELT; __env->GetLongArrayRegion(_custom_id,0,1,&custom_id_ELT);
    kdu_long custom_id = (kdu_long) custom_id_ELT;
    jboolean partially_sent_ELT; __env->GetBooleanArrayRegion(_partially_sent,0,1,&partially_sent_ELT);
    bool partially_sent = (partially_sent_ELT)?true:false;
    kdu_long Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->trim_timed_requests(queue_id,custom_id,partially_sent);
    custom_id_ELT = (jlong) custom_id;
  __env->SetLongArrayRegion(_custom_id,0,1,&custom_id_ELT);
    partially_sent_ELT = (jboolean) partially_sent;
  __env->SetBooleanArrayRegion(_partially_sent,0,1,&partially_sent_ELT);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1window_1in_1progress(JNIEnv *__env, jobject _self, jobject _window, jint _queue_id, jintArray _status_flags, jlongArray _custom_id)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr((_window==NULL)?((jlong) 0):(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1)));
    int queue_id = (int) _queue_id;
    int *status_flags = NULL;
    jint *status_flags_ELTS = NULL;
    if (_status_flags != NULL)
      {
        status_flags_ELTS = __env->GetIntArrayElements(_status_flags,NULL);
        status_flags = (int *) status_flags_ELTS;
      }
    kdu_long *custom_id = NULL;
    jlong *custom_id_ELTS = NULL;
    jsize custom_id_L = 0;
    if (_custom_id != NULL)
      {
        custom_id_ELTS = __env->GetLongArrayElements(_custom_id,NULL);
        custom_id_L = __env->GetArrayLength(_custom_id);
        custom_id = new kdu_long[custom_id_L];
        { for (int i=0; i<custom_id_L; i++) custom_id[i] = (kdu_long)(custom_id_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_window_in_progress(window,queue_id,status_flags,custom_id);
    } catch (...) {
    if (_status_flags != NULL)
      {
        __env->ReleaseIntArrayElements(_status_flags,status_flags_ELTS,0);
      }
    if (_custom_id != NULL)
      {
        delete[] custom_id;
        __env->ReleaseLongArrayElements(_custom_id,custom_id_ELTS,0);
      }
    throw;
    }
    if (_custom_id != NULL)
      {
        for (int i=0; i<custom_id_L; i++) custom_id_ELTS[i] = (jlong)(custom_id[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_status_flags != NULL)
      {
        __env->ReleaseIntArrayElements(_status_flags,status_flags_ELTS,0);
      }
    if (_custom_id != NULL)
      {
        delete[] custom_id;
        __env->ReleaseLongArrayElements(_custom_id,custom_id_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1window_1info(JNIEnv *__env, jobject _self, jint _queue_id, jintArray _status_flags, jlongArray _custom_id, jobject _window, jlongArray _service_usecs)
{
  try {
    if ((_status_flags == NULL) || (_custom_id == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int queue_id = (int) _queue_id;
    jint status_flags_ELT; __env->GetIntArrayRegion(_status_flags,0,1,&status_flags_ELT);
    int status_flags = (int) status_flags_ELT;
    jlong custom_id_ELT; __env->GetLongArrayRegion(_custom_id,0,1,&custom_id_ELT);
    kdu_long custom_id = (kdu_long) custom_id_ELT;
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr((_window==NULL)?((jlong) 0):(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1)));
    kdu_long *service_usecs = NULL;
    jlong *service_usecs_ELTS = NULL;
    jsize service_usecs_L = 0;
    if (_service_usecs != NULL)
      {
        service_usecs_ELTS = __env->GetLongArrayElements(_service_usecs,NULL);
        service_usecs_L = __env->GetArrayLength(_service_usecs);
        service_usecs = new kdu_long[service_usecs_L];
        { for (int i=0; i<service_usecs_L; i++) service_usecs[i] = (kdu_long)(service_usecs_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_window_info(queue_id,status_flags,custom_id,window,service_usecs);
    } catch (...) {
    if (_service_usecs != NULL)
      {
        delete[] service_usecs;
        __env->ReleaseLongArrayElements(_service_usecs,service_usecs_ELTS,0);
      }
    throw;
    }
    status_flags_ELT = (jint) status_flags;
  __env->SetIntArrayRegion(_status_flags,0,1,&status_flags_ELT);
    custom_id_ELT = (jlong) custom_id;
  __env->SetLongArrayRegion(_custom_id,0,1,&custom_id_ELT);
    if (_service_usecs != NULL)
      {
        for (int i=0; i<service_usecs_L; i++) service_usecs_ELTS[i] = (jlong)(service_usecs[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_service_usecs != NULL)
      {
        delete[] service_usecs;
        __env->ReleaseLongArrayElements(_service_usecs,service_usecs_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Post_1oob_1window(JNIEnv *__env, jobject _self, jobject _window, jint _caller_id, jboolean _preemptive)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr((_window==NULL)?((jlong) 0):(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1)));
    int caller_id = (int) _caller_id;
    bool preemptive = (_preemptive)?true:false;
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->post_oob_window(window,caller_id,preemptive);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1oob_1window_1in_1progress(JNIEnv *__env, jobject _self, jobject _window, jint _caller_id, jintArray _status_flags)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr((_window==NULL)?((jlong) 0):(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1)));
    int caller_id = (int) _caller_id;
    int *status_flags = NULL;
    jint *status_flags_ELTS = NULL;
    if (_status_flags != NULL)
      {
        status_flags_ELTS = __env->GetIntArrayElements(_status_flags,NULL);
        status_flags = (int *) status_flags_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_oob_window_in_progress(window,caller_id,status_flags);
    } catch (...) {
    if (_status_flags != NULL)
      {
        __env->ReleaseIntArrayElements(_status_flags,status_flags_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_status_flags != NULL)
      {
        __env->ReleaseIntArrayElements(_status_flags,status_flags_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1client_Get_1status(JNIEnv *__env, jobject _self, jint _queue_id)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    const char * Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_status(queue_id);
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1timing_1info(JNIEnv *__env, jobject _self, jint _queue_id, jdoubleArray _request_rtt, jdoubleArray _suggested_min_posting_interval)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    double *request_rtt = NULL;
    jdouble *request_rtt_ELTS = NULL;
    if (_request_rtt != NULL)
      {
        request_rtt_ELTS = __env->GetDoubleArrayElements(_request_rtt,NULL);
        request_rtt = (double *) request_rtt_ELTS;
      }
    double *suggested_min_posting_interval = NULL;
    jdouble *suggested_min_posting_interval_ELTS = NULL;
    if (_suggested_min_posting_interval != NULL)
      {
        suggested_min_posting_interval_ELTS = __env->GetDoubleArrayElements(_suggested_min_posting_interval,NULL);
        suggested_min_posting_interval = (double *) suggested_min_posting_interval_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_timing_info(queue_id,request_rtt,suggested_min_posting_interval);
    } catch (...) {
    if (_request_rtt != NULL)
      {
        __env->ReleaseDoubleArrayElements(_request_rtt,request_rtt_ELTS,0);
      }
    if (_suggested_min_posting_interval != NULL)
      {
        __env->ReleaseDoubleArrayElements(_suggested_min_posting_interval,suggested_min_posting_interval_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_request_rtt != NULL)
      {
        __env->ReleaseDoubleArrayElements(_request_rtt,request_rtt_ELTS,0);
      }
    if (_suggested_min_posting_interval != NULL)
      {
        __env->ReleaseDoubleArrayElements(_suggested_min_posting_interval,suggested_min_posting_interval_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Get_1received_1bytes(JNIEnv *__env, jobject _self, jint _queue_id, jdoubleArray _non_idle_seconds, jdoubleArray _seconds_since_first_active)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int queue_id = (int) _queue_id;
    double *non_idle_seconds = NULL;
    jdouble *non_idle_seconds_ELTS = NULL;
    if (_non_idle_seconds != NULL)
      {
        non_idle_seconds_ELTS = __env->GetDoubleArrayElements(_non_idle_seconds,NULL);
        non_idle_seconds = (double *) non_idle_seconds_ELTS;
      }
    double *seconds_since_first_active = NULL;
    jdouble *seconds_since_first_active_ELTS = NULL;
    if (_seconds_since_first_active != NULL)
      {
        seconds_since_first_active_ELTS = __env->GetDoubleArrayElements(_seconds_since_first_active,NULL);
        seconds_since_first_active = (double *) seconds_since_first_active_ELTS;
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_received_bytes(queue_id,non_idle_seconds,seconds_since_first_active);
    } catch (...) {
    if (_non_idle_seconds != NULL)
      {
        __env->ReleaseDoubleArrayElements(_non_idle_seconds,non_idle_seconds_ELTS,0);
      }
    if (_seconds_since_first_active != NULL)
      {
        __env->ReleaseDoubleArrayElements(_seconds_since_first_active,seconds_since_first_active_ELTS,0);
      }
    throw;
    }
    jlong _Result = (jlong) Result;
    if (_non_idle_seconds != NULL)
      {
        __env->ReleaseDoubleArrayElements(_non_idle_seconds,non_idle_seconds_ELTS,0);
      }
    if (_seconds_since_first_active != NULL)
      {
        __env->ReleaseDoubleArrayElements(_seconds_since_first_active,seconds_since_first_active_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                            Kdu_client_notifier                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_client_notifier_CLS != NULL) return;
  try {
    Kdu_client_notifier_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_client_notifier_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_client_notifier_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_client_notifier *self = (_aux_extended__kdu_client_notifier *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_client_notifier *self_delegator =(_jni_delegator__kdu_client_notifier *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_client_notifier *self =
      new _aux_extended__kdu_client_notifier();
    self->_delegator = new _jni_delegator__kdu_client_notifier(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    _aux_extended__kdu_client_notifier *self = (_aux_extended__kdu_client_notifier *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_notifier_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_client_notifier *self_delegator = (_jni_delegator__kdu_client_notifier *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

void _jni_delegator__kdu_client_notifier::notify()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    jmethodID __Notify_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Notify","()V");
    __env->CallVoidMethod(_self,__Notify_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

/*****************************************************************************/
/*                           Kdu_client_translator                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_client_translator_CLS != NULL) return;
  try {
    Kdu_client_translator_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_client_translator_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_client_translator_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_client_translator *self = (kdu_client_translator *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_client_translator *self =
      new kdu_client_translator();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Init(JNIEnv *__env, jobject _self, jobject _main_cache)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *main_cache = (kdu_cache *)
      _kdu_long_to_addr((_main_cache==NULL)?((jlong) 0):(__env->GetLongField(_main_cache,Kdu_cache_PTR) & ~((jlong) 1)));
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(main_cache);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_1translator_Update(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    bool Result;
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->update();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1client_1translator_Access_1context(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    if (Kdu_window_context_CLS==NULL)
      Kdu_window_context_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    kdu_window_context Result;
    try { // So we can clean up temporary arrays
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_context(context_type,context_idx,remapping_ids);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Kdu_window_context_CLS,Kdu_window_context_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_clientx                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_clientx_CLS != NULL) return;
  try {
    Kdu_clientx_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_clientx_CLS==NULL)
      Kdu_clientx_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_clientx_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_clientx_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_clientx *self = (kdu_clientx *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_clientx *self =
      new kdu_clientx();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                              Kdu_codestream                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_codestream_CLS != NULL) return;
  try {
    Kdu_codestream_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Siz_1params_2Lkdu_1jni_Kdu_1compressed_1target_2Lkdu_1jni_Kdu_1dims_2IJLkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _siz, jobject _target, jobject _fragment_region, jint _fragment_tiles_generated, jlong _fragment_tile_bytes_generated, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    siz_params *siz = (siz_params *)
      _kdu_long_to_addr((_siz==NULL)?((jlong) 0):(__env->GetLongField(_siz,Siz_params_PTR) & ~((jlong) 1)));
    kdu_compressed_target *target = (kdu_compressed_target *)
      _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    kdu_dims *fragment_region = (kdu_dims *)
      _kdu_long_to_addr((_fragment_region==NULL)?((jlong) 0):(__env->GetLongField(_fragment_region,Kdu_dims_PTR) & ~((jlong) 1)));
    int fragment_tiles_generated = (int) _fragment_tiles_generated;
    kdu_long fragment_tile_bytes_generated = (kdu_long) _fragment_tile_bytes_generated;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.create(siz,target,fragment_region,fragment_tiles_generated,fragment_tile_bytes_generated,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Kdu_1compressed_1source_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _source, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.create(source,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Siz_1params_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _siz, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    siz_params *siz = (siz_params *)
      _kdu_long_to_addr((_siz==NULL)?((jlong) 0):(__env->GetLongField(_siz,Siz_params_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.create(siz,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Restart__Lkdu_1jni_Kdu_1compressed_1target_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _target, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_compressed_target *target = (kdu_compressed_target *)
      _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.restart(target,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Restart__Lkdu_1jni_Kdu_1compressed_1source_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _source, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.restart(source,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Share_1buffering(JNIEnv *__env, jobject _self, jobject _existing)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *existing_S = _kdu_long_to_addr((_existing==NULL)?((jlong) 0):(__env->GetLongField(_existing,Kdu_codestream_PTR)));
    kdu_codestream existing = *((kdu_codestream *)(&existing_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.share_buffering(existing);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.destroy();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Enable_1restart(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.enable_restart();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1persistent(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_persistent();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Augment_1cache_1threshold(JNIEnv *__env, jobject _self, jint _extra_bytes)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int extra_bytes = (int) _extra_bytes;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.augment_cache_threshold(extra_bytes);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1tile_1unloading_1threshold(JNIEnv *__env, jobject _self, jint _max_tiles_on_list, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int max_tiles_on_list = (int) _max_tiles_on_list;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.set_tile_unloading_threshold(max_tiles_on_list,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Is_1last_1fragment(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.is_last_fragment();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Access_1siz(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    siz_params *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.access_siz();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Siz_params_CLS,Siz_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1num_1components(JNIEnv *__env, jobject _self, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool want_output_comps = (_want_output_comps)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_num_components(want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool want_output_comps = (_want_output_comps)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_bit_depth(comp_idx,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1signed(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool want_output_comps = (_want_output_comps)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_signed(comp_idx,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1subsampling(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _subs, jboolean _want_output_comps)
{
  try {
    if (_subs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords *subs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_subs,Kdu_coords_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_subsampling(comp_idx,*subs,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1registration(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _scale, jobject _crg, jboolean _want_output_comps)
{
  try {
    if (_crg == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords *scale = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_scale,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *crg = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_crg,Kdu_coords_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_registration(comp_idx,*scale,*crg,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1relative_1registration(JNIEnv *__env, jobject _self, jint _comp_idx, jint _ref_comp_idx, jobject _scale, jobject _crg, jboolean _want_output_comps)
{
  try {
    if (_crg == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    int ref_comp_idx = (int) _ref_comp_idx;
    kdu_coords *scale = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_scale,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *crg = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_crg,Kdu_coords_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_relative_registration(comp_idx,ref_comp_idx,*scale,*crg,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1dims(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _dims, jboolean _want_output_comps)
{
  try {
    if (_dims == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_dims(comp_idx,*dims,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1tile_1partition(JNIEnv *__env, jobject _self, jobject _partition)
{
  try {
    if (_partition == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *partition = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_partition,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_tile_partition(*partition);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1valid_1tiles(JNIEnv *__env, jobject _self, jobject _indices)
{
  try {
    if (_indices == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_valid_tiles(*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Find_1tile(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _loc, jobject _tile_idx, jboolean _want_output_comps)
{
  try {
    if (_tile_idx == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords *loc = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_loc,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *tile_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_tile_idx,Kdu_coords_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.find_tile(comp_idx,*loc,*tile_idx,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1tile_1dims(JNIEnv *__env, jobject _self, jobject _tile_idx, jint _comp_idx, jobject _dims, jboolean _want_output_comps)
{
  try {
    if (_dims == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_coords *tile_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_tile_idx,Kdu_coords_PTR) & ~((jlong) 1));
    int comp_idx = (int) _comp_idx;
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_tile_dims(*tile_idx,comp_idx,*dims,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1max_1tile_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_max_tile_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1min_1dwt_1levels(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_min_dwt_levels();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Can_1flip(JNIEnv *__env, jobject _self, jboolean _check_current_appearance_only)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool check_current_appearance_only = (_check_current_appearance_only)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.can_flip(check_current_appearance_only);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Map_1region(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _comp_region, jobject _hires_region, jboolean _want_output_comps)
{
  try {
    if (_hires_region == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_dims *comp_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_comp_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *hires_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_hires_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.map_region(comp_idx,*comp_region,*hires_region,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1textualization(JNIEnv *__env, jobject _self, jobject _output)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr((_output==NULL)?((jlong) 0):(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_textualization(output);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1max_1bytes(JNIEnv *__env, jobject _self, jlong _max_bytes, jboolean _simulate_parsing, jboolean _allow_periodic_trimming)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_long max_bytes = (kdu_long) _max_bytes;
    bool simulate_parsing = (_simulate_parsing)?true:false;
    bool allow_periodic_trimming = (_allow_periodic_trimming)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_max_bytes(max_bytes,simulate_parsing,allow_periodic_trimming);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1min_1slope_1threshold(JNIEnv *__env, jobject _self, jint _min_slope)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_uint16 min_slope = (kdu_uint16) _min_slope;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_min_slope_threshold(min_slope);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1resilient(JNIEnv *__env, jobject _self, jboolean _expect_ubiquitous_sops)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool expect_ubiquitous_sops = (_expect_ubiquitous_sops)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_resilient(expect_ubiquitous_sops);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1fussy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_fussy();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1fast(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_fast();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Apply_1input_1restrictions__IIIILkdu_1jni_Kdu_1dims_2I(JNIEnv *__env, jobject _self, jint _first_component, jint _max_components, jint _discard_levels, jint _max_layers, jobject _region_of_interest, jint _access_mode)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int first_component = (int) _first_component;
    int max_components = (int) _max_components;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region_of_interest = (kdu_dims *)
      _kdu_long_to_addr((_region_of_interest==NULL)?((jlong) 0):(__env->GetLongField(_region_of_interest,Kdu_dims_PTR) & ~((jlong) 1)));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.apply_input_restrictions(first_component,max_components,discard_levels,max_layers,region_of_interest,access_mode);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Apply_1input_1restrictions__I_3IIILkdu_1jni_Kdu_1dims_2I(JNIEnv *__env, jobject _self, jint _num_indices, jintArray _component_indices, jint _discard_levels, jint _max_layers, jobject _region_of_interest, jint _access_mode)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int num_indices = (int) _num_indices;
    int *component_indices = NULL;
    jint *component_indices_ELTS = NULL;
    if (_component_indices != NULL)
      {
        component_indices_ELTS = __env->GetIntArrayElements(_component_indices,NULL);
        component_indices = (int *) component_indices_ELTS;
      }
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region_of_interest = (kdu_dims *)
      _kdu_long_to_addr((_region_of_interest==NULL)?((jlong) 0):(__env->GetLongField(_region_of_interest,Kdu_dims_PTR) & ~((jlong) 1)));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.apply_input_restrictions(num_indices,component_indices,discard_levels,max_layers,region_of_interest,access_mode);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_component_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_component_indices,component_indices_ELTS,0);
      }
    throw;
    }
    if (_component_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_component_indices,component_indices_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Change_1appearance(JNIEnv *__env, jobject _self, jboolean _transpose, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.change_appearance(transpose,vflip,hflip);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1block_1truncation(JNIEnv *__env, jobject _self, jint _factor)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_int32 factor = (kdu_int32) _factor;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_block_truncation(factor);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Open_1tile(JNIEnv *__env, jobject _self, jobject _tile_idx, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_coords *tile_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_tile_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_tile Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.open_tile(*tile_idx,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_tile_CLS,Kdu_tile_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create_1tile(JNIEnv *__env, jobject _self, jobject _tile_idx, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_coords *tile_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_tile_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.create_tile(*tile_idx,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1comment(JNIEnv *__env, jobject _self, jobject _prev)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    void *prev_S = _kdu_long_to_addr((_prev==NULL)?((jlong) 0):(__env->GetLongField(_prev,Kdu_codestream_comment_PTR)));
    kdu_codestream_comment prev = *((kdu_codestream_comment *)(&prev_S));
    kdu_codestream_comment Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_comment(prev);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_codestream_comment_CLS,Kdu_codestream_comment_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Add_1comment(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    kdu_codestream_comment Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.add_comment();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_codestream_comment_CLS,Kdu_codestream_comment_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Flush(JNIEnv *__env, jobject _self, jlongArray _layer_bytes, jint _num_layer_specs, jintArray _layer_thresholds, jboolean _trim_to_rate, jboolean _record_in_comseg, jdouble _tolerance, jobject _env, jint _flags)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_long *layer_bytes = NULL;
    jlong *layer_bytes_ELTS = NULL;
    jsize layer_bytes_L = 0;
    if (_layer_bytes != NULL)
      {
        layer_bytes_ELTS = __env->GetLongArrayElements(_layer_bytes,NULL);
        layer_bytes_L = __env->GetArrayLength(_layer_bytes);
        layer_bytes = new kdu_long[layer_bytes_L];
        { for (int i=0; i<layer_bytes_L; i++) layer_bytes[i] = (kdu_long)(layer_bytes_ELTS[i]); }
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    jint *layer_thresholds_ELTS = NULL;
    jsize layer_thresholds_L = 0;
    if (_layer_thresholds != NULL)
      {
        layer_thresholds_ELTS = __env->GetIntArrayElements(_layer_thresholds,NULL);
        layer_thresholds_L = __env->GetArrayLength(_layer_thresholds);
        layer_thresholds = new kdu_uint16[layer_thresholds_L];
        { for (int i=0; i<layer_thresholds_L; i++) layer_thresholds[i] = (kdu_uint16)(layer_thresholds_ELTS[i]); }
      }
    bool trim_to_rate = (_trim_to_rate)?true:false;
    bool record_in_comseg = (_record_in_comseg)?true:false;
    double tolerance = (double) _tolerance;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.flush(layer_bytes,num_layer_specs,layer_thresholds,trim_to_rate,record_in_comseg,tolerance,env,flags);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_thresholds != NULL)
      {
        delete[] layer_thresholds;
        __env->ReleaseIntArrayElements(_layer_thresholds,layer_thresholds_ELTS,0);
      }
    throw;
    }
    if (_layer_bytes != NULL)
      {
        for (int i=0; i<layer_bytes_L; i++) layer_bytes_ELTS[i] = (jlong)(layer_bytes[i]);
      }
    if (_layer_thresholds != NULL)
      {
        for (int i=0; i<layer_thresholds_L; i++) layer_thresholds_ELTS[i] = (jint)(layer_thresholds[i]);
      }
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_thresholds != NULL)
      {
        delete[] layer_thresholds;
        __env->ReleaseIntArrayElements(_layer_thresholds,layer_thresholds_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Trans_1out(JNIEnv *__env, jobject _self, jlong _max_bytes, jlongArray _layer_bytes, jint _layer_bytes_entries, jboolean _record_in_comseg, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_long max_bytes = (kdu_long) _max_bytes;
    kdu_long *layer_bytes = NULL;
    jlong *layer_bytes_ELTS = NULL;
    jsize layer_bytes_L = 0;
    if (_layer_bytes != NULL)
      {
        layer_bytes_ELTS = __env->GetLongArrayElements(_layer_bytes,NULL);
        layer_bytes_L = __env->GetArrayLength(_layer_bytes);
        layer_bytes = new kdu_long[layer_bytes_L];
        { for (int i=0; i<layer_bytes_L; i++) layer_bytes[i] = (kdu_long)(layer_bytes_ELTS[i]); }
      }
    int layer_bytes_entries = (int) _layer_bytes_entries;
    bool record_in_comseg = (_record_in_comseg)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.trans_out(max_bytes,layer_bytes,layer_bytes_entries,record_in_comseg,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    throw;
    }
    if (_layer_bytes != NULL)
      {
        for (int i=0; i<layer_bytes_L; i++) layer_bytes_ELTS[i] = (jlong)(layer_bytes[i]);
      }
    jint _Result = (jint) Result;
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Ready_1for_1flush(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.ready_for_flush(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Auto_1flush(JNIEnv *__env, jobject _self, jint _first_tile_comp_trigger_point, jint _tile_comp_trigger_interval, jint _first_incr_trigger_point, jint _incr_trigger_interval, jlongArray _layer_bytes, jint _num_layer_specs, jintArray _layer_thresholds, jboolean _trim_to_rate, jboolean _record_in_comseg, jdouble _tolerance, jobject _env, jint _flags)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int first_tile_comp_trigger_point = (int) _first_tile_comp_trigger_point;
    int tile_comp_trigger_interval = (int) _tile_comp_trigger_interval;
    int first_incr_trigger_point = (int) _first_incr_trigger_point;
    int incr_trigger_interval = (int) _incr_trigger_interval;
    kdu_long *layer_bytes = NULL;
    jlong *layer_bytes_ELTS = NULL;
    jsize layer_bytes_L = 0;
    if (_layer_bytes != NULL)
      {
        layer_bytes_ELTS = __env->GetLongArrayElements(_layer_bytes,NULL);
        layer_bytes_L = __env->GetArrayLength(_layer_bytes);
        layer_bytes = new kdu_long[layer_bytes_L];
        { for (int i=0; i<layer_bytes_L; i++) layer_bytes[i] = (kdu_long)(layer_bytes_ELTS[i]); }
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    jint *layer_thresholds_ELTS = NULL;
    jsize layer_thresholds_L = 0;
    if (_layer_thresholds != NULL)
      {
        layer_thresholds_ELTS = __env->GetIntArrayElements(_layer_thresholds,NULL);
        layer_thresholds_L = __env->GetArrayLength(_layer_thresholds);
        layer_thresholds = new kdu_uint16[layer_thresholds_L];
        { for (int i=0; i<layer_thresholds_L; i++) layer_thresholds[i] = (kdu_uint16)(layer_thresholds_ELTS[i]); }
      }
    bool trim_to_rate = (_trim_to_rate)?true:false;
    bool record_in_comseg = (_record_in_comseg)?true:false;
    double tolerance = (double) _tolerance;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.auto_flush(first_tile_comp_trigger_point,tile_comp_trigger_interval,first_incr_trigger_point,incr_trigger_interval,layer_bytes,num_layer_specs,layer_thresholds,trim_to_rate,record_in_comseg,tolerance,env,flags);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_thresholds != NULL)
      {
        delete[] layer_thresholds;
        __env->ReleaseIntArrayElements(_layer_thresholds,layer_thresholds_ELTS,0);
      }
    throw;
    }
    if (_layer_bytes != NULL)
      {
        for (int i=0; i<layer_bytes_L; i++) layer_bytes_ELTS[i] = (jlong)(layer_bytes[i]);
      }
    if (_layer_thresholds != NULL)
      {
        for (int i=0; i<layer_thresholds_L; i++) layer_thresholds_ELTS[i] = (jint)(layer_thresholds[i]);
      }
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_thresholds != NULL)
      {
        delete[] layer_thresholds;
        __env->ReleaseIntArrayElements(_layer_thresholds,layer_thresholds_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Auto_1trans_1out(JNIEnv *__env, jobject _self, jint _first_tile_comp_trigger_point, jint _tile_comp_trigger_interval, jint _first_incr_trigger_point, jint _incr_trigger_interval, jlong _max_bytes, jboolean _record_in_comseg, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int first_tile_comp_trigger_point = (int) _first_tile_comp_trigger_point;
    int tile_comp_trigger_interval = (int) _tile_comp_trigger_interval;
    int first_incr_trigger_point = (int) _first_incr_trigger_point;
    int incr_trigger_interval = (int) _incr_trigger_interval;
    kdu_long max_bytes = (kdu_long) _max_bytes;
    bool record_in_comseg = (_record_in_comseg)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.auto_trans_out(first_tile_comp_trigger_point,tile_comp_trigger_interval,first_incr_trigger_point,incr_trigger_interval,max_bytes,record_in_comseg,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1total_1bytes(JNIEnv *__env, jobject _self, jboolean _exclude_main_header)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool exclude_main_header = (_exclude_main_header)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_total_bytes(exclude_main_header);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1packet_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_packet_bytes();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1num_1tparts(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_num_tparts();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Collect_1timing_1stats(JNIEnv *__env, jobject _self, jint _num_coder_iterations)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int num_coder_iterations = (int) _num_coder_iterations;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.collect_timing_stats(num_coder_iterations);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1timing_1stats(JNIEnv *__env, jobject _self, jlongArray _num_samples, jboolean _coder_only)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_long *num_samples = NULL;
    jlong *num_samples_ELTS = NULL;
    jsize num_samples_L = 0;
    if (_num_samples != NULL)
      {
        num_samples_ELTS = __env->GetLongArrayElements(_num_samples,NULL);
        num_samples_L = __env->GetArrayLength(_num_samples);
        num_samples = new kdu_long[num_samples_L];
        { for (int i=0; i<num_samples_L; i++) num_samples[i] = (kdu_long)(num_samples_ELTS[i]); }
      }
    bool coder_only = (_coder_only)?true:false;
    double Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_timing_stats(num_samples,coder_only);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_num_samples != NULL)
      {
        delete[] num_samples;
        __env->ReleaseLongArrayElements(_num_samples,num_samples_ELTS,0);
      }
    throw;
    }
    if (_num_samples != NULL)
      {
        for (int i=0; i<num_samples_L; i++) num_samples_ELTS[i] = (jlong)(num_samples[i]);
      }
    jdouble _Result = (jdouble) Result;
    if (_num_samples != NULL)
      {
        delete[] num_samples;
        __env->ReleaseLongArrayElements(_num_samples,num_samples_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jdouble) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1compressed_1data_1memory(JNIEnv *__env, jobject _self, jboolean _get_peak_allocation)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool get_peak_allocation = (_get_peak_allocation)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_compressed_data_memory(get_peak_allocation);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1compressed_1state_1memory(JNIEnv *__env, jobject _self, jboolean _get_peak_allocation)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool get_peak_allocation = (_get_peak_allocation)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_compressed_state_memory(get_peak_allocation);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                          Kdu_codestream_comment                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_codestream_comment_CLS != NULL) return;
  try {
    Kdu_codestream_comment_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Get_1text(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    const char * Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.get_text();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Get_1data(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _offset, jint _length)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int offset = (int) _offset;
    int length = (int) _length;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.get_data(buf,offset,length);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Check_1readonly(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.check_readonly();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Put_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _num_bytes)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.put_data(data,num_bytes);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Put_1text(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.put_text(string);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                            Kdu_compositor_buf                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compositor_buf_CLS != NULL) return;
  try {
    Kdu_compositor_buf_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compositor_buf_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compositor_buf_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compositor_buf *self = (kdu_compositor_buf *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_compositor_buf *self =
      new kdu_compositor_buf();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Init(JNIEnv *__env, jobject _self, jlong _buf, jint _row_gap)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    kdu_uint32 *buf = (kdu_uint32 *) _kdu_long_to_addr(_buf);
    int row_gap = (int) _row_gap;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(buf,row_gap);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Init_1float(JNIEnv *__env, jobject _self, jlong _float_buf, jint _row_gap)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    float *float_buf = (float *) _kdu_long_to_addr(_float_buf);
    int row_gap = (int) _row_gap;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init_float(float_buf,row_gap);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Is_1read_1access_1allowed(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    bool Result;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_read_access_allowed();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Set_1read_1accessibility(JNIEnv *__env, jobject _self, jboolean _read_access_required)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    bool read_access_required = (_read_access_required)?true:false;
    bool Result;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_read_accessibility(read_access_required);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1buf(JNIEnv *__env, jobject _self, jintArray _row_gap, jboolean _read_write)
{
  try {
    if (_row_gap == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    jint row_gap_ELT; __env->GetIntArrayRegion(_row_gap,0,1,&row_gap_ELT);
    int row_gap = (int) row_gap_ELT;
    bool read_write = (_read_write)?true:false;
    kdu_uint32 *Result;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_buf(row_gap,read_write);
    row_gap_ELT = (jint) row_gap;
  __env->SetIntArrayRegion(_row_gap,0,1,&row_gap_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1float_1buf(JNIEnv *__env, jobject _self, jintArray _row_gap, jboolean _read_write)
{
  try {
    if (_row_gap == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    jint row_gap_ELT; __env->GetIntArrayRegion(_row_gap,0,1,&row_gap_ELT);
    int row_gap = (int) row_gap_ELT;
    bool read_write = (_read_write)?true:false;
    float *Result;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_float_buf(row_gap,read_write);
    row_gap_ELT = (jint) row_gap;
  __env->SetIntArrayRegion(_row_gap,0,1,&row_gap_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1region(JNIEnv *__env, jobject _self, jobject _src_region, jintArray _tgt_buf, jint _tgt_offset, jint _tgt_row_gap)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *src_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_src_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_int32 *tgt_buf = NULL;
    jint *tgt_buf_ELTS = NULL;
    if (_tgt_buf != NULL)
      {
        tgt_buf_ELTS = __env->GetIntArrayElements(_tgt_buf,NULL);
        tgt_buf = (kdu_int32 *) tgt_buf_ELTS;
      }
    int tgt_offset = (int) _tgt_offset;
    int tgt_row_gap = (int) _tgt_row_gap;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_region(*src_region,tgt_buf,tgt_offset,tgt_row_gap);
    } catch (...) {
    if (_tgt_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_tgt_buf,tgt_buf_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_tgt_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_tgt_buf,tgt_buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1float_1region(JNIEnv *__env, jobject _self, jobject _src_region, jfloatArray _tgt_buf, jint _tgt_offset, jint _tgt_row_gap)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *src_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_src_region,Kdu_dims_PTR) & ~((jlong) 1));
    float *tgt_buf = NULL;
    jfloat *tgt_buf_ELTS = NULL;
    if (_tgt_buf != NULL)
      {
        tgt_buf_ELTS = __env->GetFloatArrayElements(_tgt_buf,NULL);
        tgt_buf = (float *) tgt_buf_ELTS;
      }
    int tgt_offset = (int) _tgt_offset;
    int tgt_row_gap = (int) _tgt_row_gap;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_float_region(*src_region,tgt_buf,tgt_offset,tgt_row_gap);
    } catch (...) {
    if (_tgt_buf != NULL)
      {
        __env->ReleaseFloatArrayElements(_tgt_buf,tgt_buf_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_tgt_buf != NULL)
      {
        __env->ReleaseFloatArrayElements(_tgt_buf,tgt_buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                           Kdu_compressed_source                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_source_CLS != NULL) return;
  try {
    Kdu_compressed_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_source *self = (kdu_compressed_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->close();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Get_1capabilities(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    int Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_capabilities();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Read(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read(buf,num_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Seek(JNIEnv *__env, jobject _self, jlong _offset)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->seek(offset);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Get_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_pos();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Set_1tileheader_1scope(JNIEnv *__env, jobject _self, jint _tnum, jint _num_tiles)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    int tnum = (int) _tnum;
    int num_tiles = (int) _num_tiles;
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_tileheader_scope(tnum,num_tiles);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Set_1precinct_1scope(JNIEnv *__env, jobject _self, jlong _unique_id)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_long unique_id = (kdu_long) _unique_id;
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_precinct_scope(unique_id);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                      Kdu_compressed_source_nonnative                      */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_source_nonnative_CLS != NULL) return;
  try {
    Kdu_compressed_source_nonnative_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_source_nonnative_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_source_nonnative_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_compressed_source_nonnative *self = (_aux_extended__kdu_compressed_source_nonnative *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_compressed_source_nonnative *self_delegator =(_jni_delegator__kdu_compressed_source_nonnative *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_compressed_source_nonnative *self =
      new _aux_extended__kdu_compressed_source_nonnative();
    self->_delegator = new _jni_delegator__kdu_compressed_source_nonnative(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    _aux_extended__kdu_compressed_source_nonnative *self = (_aux_extended__kdu_compressed_source_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_nonnative_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_compressed_source_nonnative *self_delegator = (_jni_delegator__kdu_compressed_source_nonnative *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Push_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _first_byte_pos, jint _num_bytes)
{
  try {
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int first_byte_pos = (int) _first_byte_pos;
    int num_bytes = (int) _num_bytes;
    try { // So we can clean up temporary arrays
    kdu_compressed_source_nonnative *self = (kdu_compressed_source_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_nonnative_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->push_data(data,first_byte_pos,num_bytes);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

int _jni_delegator__kdu_compressed_source_nonnative::get_capabilities()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jmethodID __Get_capabilities_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Get_capabilities","()I");
    jint _Result;
    _Result = __env->CallIntMethod(_self,__Get_capabilities_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (int) _Result;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (int) 0;
}

bool _jni_delegator__kdu_compressed_source_nonnative::seek(kdu_long offset)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jlong _offset = (jlong) offset;
    jmethodID __Seek_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Seek","(J)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Seek_ID,_offset);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (_Result)?true:false;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (bool) 0;
}

kdu_long _jni_delegator__kdu_compressed_source_nonnative::get_pos()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jmethodID __Get_pos_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Get_pos","()J");
    jlong _Result;
    _Result = __env->CallLongMethod(_self,__Get_pos_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (kdu_long) _Result;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (kdu_long) 0;
}

bool _jni_delegator__kdu_compressed_source_nonnative::set_tileheader_scope(int tnum, int num_tiles)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jint _tnum = (jint) tnum;
    jint _num_tiles = (jint) num_tiles;
    jmethodID __Set_tileheader_scope_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Set_tileheader_scope","(II)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Set_tileheader_scope_ID,_tnum,_num_tiles);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (_Result)?true:false;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (bool) 0;
}

bool _jni_delegator__kdu_compressed_source_nonnative::set_precinct_scope(kdu_long unique_id)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jlong _unique_id = (jlong) unique_id;
    jmethodID __Set_precinct_scope_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Set_precinct_scope","(J)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Set_precinct_scope_ID,_unique_id);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (_Result)?true:false;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (bool) 0;
}

int _jni_delegator__kdu_compressed_source_nonnative::post_read(int num_bytes)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jint _num_bytes = (jint) num_bytes;
    jmethodID __Post_read_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Post_read","(I)I");
    jint _Result;
    _Result = __env->CallIntMethod(_self,__Post_read_ID,_num_bytes);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (int) _Result;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (int) 0;
}

/*****************************************************************************/
/*                           Kdu_compressed_target                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_target_CLS != NULL) return;
  try {
    Kdu_compressed_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_target *self = (kdu_compressed_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    bool Result;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->close();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Get_1capabilities(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    int Result;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_capabilities();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1mainheader(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start_mainheader();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1mainheader(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->end_mainheader();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1tileheader(JNIEnv *__env, jobject _self, jint _tnum, jint _num_tiles)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    int tnum = (int) _tnum;
    int num_tiles = (int) _num_tiles;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start_tileheader(tnum,num_tiles);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1tileheader(JNIEnv *__env, jobject _self, jint _tnum)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    int tnum = (int) _tnum;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->end_tileheader(tnum);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1precinct(JNIEnv *__env, jobject _self, jlong _unique_id)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_long unique_id = (kdu_long) _unique_id;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start_precinct(unique_id);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1precinct(JNIEnv *__env, jobject _self, jlong _unique_id, jint _num_packets, jlongArray _packet_lengths)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_long unique_id = (kdu_long) _unique_id;
    int num_packets = (int) _num_packets;
    kdu_long *packet_lengths = NULL;
    jlong *packet_lengths_ELTS = NULL;
    jsize packet_lengths_L = 0;
    if (_packet_lengths != NULL)
      {
        packet_lengths_ELTS = __env->GetLongArrayElements(_packet_lengths,NULL);
        packet_lengths_L = __env->GetArrayLength(_packet_lengths);
        packet_lengths = new kdu_long[packet_lengths_L];
        { for (int i=0; i<packet_lengths_L; i++) packet_lengths[i] = (kdu_long)(packet_lengths_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->end_precinct(unique_id,num_packets,packet_lengths);
    } catch (...) {
    if (_packet_lengths != NULL)
      {
        delete[] packet_lengths;
        __env->ReleaseLongArrayElements(_packet_lengths,packet_lengths_ELTS,0);
      }
    throw;
    }
    if (_packet_lengths != NULL)
      {
        for (int i=0; i<packet_lengths_L; i++) packet_lengths_ELTS[i] = (jlong)(packet_lengths[i]);
      }
    if (_packet_lengths != NULL)
      {
        delete[] packet_lengths;
        __env->ReleaseLongArrayElements(_packet_lengths,packet_lengths_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1rewrite(JNIEnv *__env, jobject _self, jlong _backtrack)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_long backtrack = (kdu_long) _backtrack;
    bool Result;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->start_rewrite(backtrack);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1rewrite(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    bool Result;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->end_rewrite();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Write(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write(buf,num_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Set_1target_1size(JNIEnv *__env, jobject _self, jlong _num_bytes)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_long num_bytes = (kdu_long) _num_bytes;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_target_size(num_bytes);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                      Kdu_compressed_target_nonnative                      */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_target_nonnative_CLS != NULL) return;
  try {
    Kdu_compressed_target_nonnative_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_target_nonnative_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_target_nonnative_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_compressed_target_nonnative *self = (_aux_extended__kdu_compressed_target_nonnative *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_compressed_target_nonnative *self_delegator =(_jni_delegator__kdu_compressed_target_nonnative *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_compressed_target_nonnative *self =
      new _aux_extended__kdu_compressed_target_nonnative();
    self->_delegator = new _jni_delegator__kdu_compressed_target_nonnative(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    _aux_extended__kdu_compressed_target_nonnative *self = (_aux_extended__kdu_compressed_target_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_nonnative_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_compressed_target_nonnative *self_delegator = (_jni_delegator__kdu_compressed_target_nonnative *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Retrieve_1packet_1lengths(JNIEnv *__env, jobject _self, jint _num_packets, jlongArray _packet_lengths)
{
  try {
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    int num_packets = (int) _num_packets;
    kdu_long *packet_lengths = NULL;
    jlong *packet_lengths_ELTS = NULL;
    jsize packet_lengths_L = 0;
    if (_packet_lengths != NULL)
      {
        packet_lengths_ELTS = __env->GetLongArrayElements(_packet_lengths,NULL);
        packet_lengths_L = __env->GetArrayLength(_packet_lengths);
        packet_lengths = new kdu_long[packet_lengths_L];
        { for (int i=0; i<packet_lengths_L; i++) packet_lengths[i] = (kdu_long)(packet_lengths_ELTS[i]); }
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_compressed_target_nonnative *self = (kdu_compressed_target_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_nonnative_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->retrieve_packet_lengths(num_packets,packet_lengths);
    } catch (...) {
    if (_packet_lengths != NULL)
      {
        delete[] packet_lengths;
        __env->ReleaseLongArrayElements(_packet_lengths,packet_lengths_ELTS,0);
      }
    throw;
    }
    if (_packet_lengths != NULL)
      {
        for (int i=0; i<packet_lengths_L; i++) packet_lengths_ELTS[i] = (jlong)(packet_lengths[i]);
      }
    jint _Result = (jint) Result;
    if (_packet_lengths != NULL)
      {
        delete[] packet_lengths;
        __env->ReleaseLongArrayElements(_packet_lengths,packet_lengths_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Pull_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _first_byte_pos, jint _num_bytes)
{
  try {
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int first_byte_pos = (int) _first_byte_pos;
    int num_bytes = (int) _num_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_compressed_target_nonnative *self = (kdu_compressed_target_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_nonnative_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->pull_data(data,first_byte_pos,num_bytes);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

int _jni_delegator__kdu_compressed_target_nonnative::get_capabilities()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jmethodID __Get_capabilities_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Get_capabilities","()I");
    jint _Result;
    _Result = __env->CallIntMethod(_self,__Get_capabilities_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (int) _Result;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (int) 0;
}

void _jni_delegator__kdu_compressed_target_nonnative::start_tileheader(int tnum, int num_tiles)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jint _tnum = (jint) tnum;
    jint _num_tiles = (jint) num_tiles;
    jmethodID __Start_tileheader_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Start_tileheader","(II)V");
    __env->CallVoidMethod(_self,__Start_tileheader_ID,_tnum,_num_tiles);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

void _jni_delegator__kdu_compressed_target_nonnative::end_tileheader(int tnum)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jint _tnum = (jint) tnum;
    jmethodID __End_tileheader_ID = __env->GetMethodID(__env->GetObjectClass(_self),"End_tileheader","(I)V");
    __env->CallVoidMethod(_self,__End_tileheader_ID,_tnum);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

void _jni_delegator__kdu_compressed_target_nonnative::start_precinct(kdu_long unique_id)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jlong _unique_id = (jlong) unique_id;
    jmethodID __Start_precinct_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Start_precinct","(J)V");
    __env->CallVoidMethod(_self,__Start_precinct_ID,_unique_id);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

void _jni_delegator__kdu_compressed_target_nonnative::post_end_precinct(int num_packets)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jint _num_packets = (jint) num_packets;
    jmethodID __Post_end_precinct_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Post_end_precinct","(I)V");
    __env->CallVoidMethod(_self,__Post_end_precinct_ID,_num_packets);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

bool _jni_delegator__kdu_compressed_target_nonnative::start_rewrite(kdu_long backtrack)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jlong _backtrack = (jlong) backtrack;
    jmethodID __Start_rewrite_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Start_rewrite","(J)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Start_rewrite_ID,_backtrack);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (_Result)?true:false;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (bool) 0;
}

bool _jni_delegator__kdu_compressed_target_nonnative::end_rewrite()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jmethodID __End_rewrite_ID = __env->GetMethodID(__env->GetObjectClass(_self),"End_rewrite","()Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__End_rewrite_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (_Result)?true:false;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (bool) 0;
}

void _jni_delegator__kdu_compressed_target_nonnative::set_target_size(kdu_long num_bytes)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jlong _num_bytes = (jlong) num_bytes;
    jmethodID __Set_target_size_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Set_target_size","(J)V");
    __env->CallVoidMethod(_self,__Set_target_size_ID,_num_bytes);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

bool _jni_delegator__kdu_compressed_target_nonnative::post_write(int num_bytes)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jint _num_bytes = (jint) num_bytes;
    jmethodID __Post_write_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Post_write","(I)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Post_write_ID,_num_bytes);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (_Result)?true:false;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (bool) 0;
}

/*****************************************************************************/
/*                        Kdu_compressed_video_source                        */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_video_source_CLS != NULL) return;
  try {
    Kdu_compressed_video_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_video_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_video_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_video_source *self = (kdu_compressed_video_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1timescale(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_uint32 Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_timescale();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1field_1order(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_field_order Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_field_order();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Set_1field_1mode(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int which = (int) _which;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_field_mode(which);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1num_1frames(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_frames();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Seek_1to_1frame(JNIEnv *__env, jobject _self, jint _frame_idx)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int frame_idx = (int) _frame_idx;
    bool Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->seek_to_frame(frame_idx);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1duration(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_duration();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Time_1to_1frame(JNIEnv *__env, jobject _self, jlong _time_instant)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long time_instant = (kdu_long) _time_instant;
    int Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->time_to_frame(time_instant);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1frame_1instant(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_frame_instant();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1frame_1period(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_frame_period();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Open_1image(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open_image();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Open_1stream(JNIEnv *__env, jobject _self, jint _field_idx, jobject _input_box)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    int field_idx = (int) _field_idx;
    jp2_input_box *input_box = (jp2_input_box *)
      _kdu_long_to_addr((_input_box==NULL)?((jlong) 0):(__env->GetLongField(_input_box,Jp2_input_box_PTR) & ~((jlong) 1)));
    int Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open_stream(field_idx,input_box);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Close_1image(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close_image();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                        Kdu_compressed_video_target                        */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_video_target_CLS != NULL) return;
  try {
    Kdu_compressed_video_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_video_target_CLS==NULL)
      Kdu_compressed_video_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_video_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_video_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_video_target *self = (kdu_compressed_video_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Open_1image(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_target_CLS==NULL)
      Kdu_compressed_video_target_LOADER(__env);
    kdu_compressed_video_target *self = (kdu_compressed_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open_image();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Close_1image(JNIEnv *__env, jobject _self, jobject _codestream)
{
  try {
    if (Kdu_compressed_video_target_CLS==NULL)
      Kdu_compressed_video_target_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_compressed_video_target *self = (kdu_compressed_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close_image(codestream);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                Kdu_coords                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_coords_CLS != NULL) return;
  try {
    Kdu_coords_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_coords_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_coords_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_coords *self = (kdu_coords *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_coords *self =
      new kdu_coords();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__II(JNIEnv *__env, jclass this_class, jint _x, jint _y)
{
  try {
    int x = (int) _x;
    int y = (int) _y;
    kdu_coords *self =
      new kdu_coords(x,y);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__Lkdu_1jni_Kdu_1nc_1coords_2(JNIEnv *__env, jclass this_class, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_nc_coords_CLS==NULL)
      Kdu_nc_coords_LOADER(__env);
    kdu_nc_coords *src = (kdu_nc_coords *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_nc_coords_PTR) & ~((jlong) 1));
    kdu_coords *self =
      new kdu_coords(*src);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Assign__Lkdu_1jni_Kdu_1coords_2(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *src = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->assign(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Assign__Lkdu_1jni_Kdu_1nc_1coords_2(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_nc_coords_CLS==NULL)
      Kdu_nc_coords_LOADER(__env);
    kdu_nc_coords *src = (kdu_nc_coords *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_nc_coords_PTR) & ~((jlong) 1));
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->assign(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1coords_Get_1x(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int Result;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_x();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1coords_Get_1y(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int Result;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_y();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Set_1x(JNIEnv *__env, jobject _self, jint _x)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int x = (int) _x;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_x(x);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Set_1y(JNIEnv *__env, jobject _self, jint _y)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int y = (int) _y;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_y(y);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Transpose(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->transpose();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Plus(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->plus(*rhs);
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Minus(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->minus(*rhs);
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Add(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->add(*rhs);
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Subtract(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->subtract(*rhs);
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1coords_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_From_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->from_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_To_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->to_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                Kdu_decoder                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_decoder_CLS != NULL) return;
  try {
    Kdu_decoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_decoder_CLS==NULL)
      Kdu_decoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_decoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_decoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_decoder *self = (kdu_decoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1create(JNIEnv *__env, jclass this_class, jobject _subband, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jint _pull_offset, jobject _env, jobject _env_queue, jint _flags)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *subband_S = _kdu_long_to_addr((_subband==NULL)?((jlong) 0):(__env->GetLongField(_subband,Kdu_subband_PTR)));
    kdu_subband subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    kdu_decoder *self =
      new kdu_decoder(subband,allocator,use_shorts,normalization,pull_offset,env,env_queue,flags);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                 Kdu_dims                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_dims_CLS != NULL) return;
  try {
    Kdu_dims_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_dims_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_dims_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_dims *self = (kdu_dims *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1dims_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_dims *self =
      new kdu_dims();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Assign(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *src = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->assign(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Access_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_pos();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Access_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_size();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1dims_Area(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_long Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->area();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Transpose(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->transpose();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Intersection(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rhs = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->intersection(*rhs);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Intersects(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rhs = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->intersects(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_empty();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rhs = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Contains(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rhs = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->contains(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Augment__Lkdu_1jni_Kdu_1coords_2(JNIEnv *__env, jobject _self, jobject _p)
{
  try {
    if (_p == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *p = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_p,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->augment(*p);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Augment__Lkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *src = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->augment(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Clip_1point(JNIEnv *__env, jobject _self, jobject _pt)
{
  try {
    if (_pt == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *pt = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_pt,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->clip_point(*pt);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_From_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->from_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_To_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->to_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                Kdu_encoder                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_encoder_CLS != NULL) return;
  try {
    Kdu_encoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_encoder_CLS==NULL)
      Kdu_encoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_encoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_encoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_encoder *self = (kdu_encoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1create(JNIEnv *__env, jclass this_class, jobject _subband, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jobject _env_queue, jint _flags)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *subband_S = _kdu_long_to_addr((_subband==NULL)?((jlong) 0):(__env->GetLongField(_subband,Kdu_subband_PTR)));
    kdu_subband subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = (kdu_roi_node *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_node_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    kdu_encoder *self =
      new kdu_encoder(subband,allocator,use_shorts,normalization,roi,env,env_queue,flags);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                              Kdu_ilayer_ref                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_ilayer_ref_CLS != NULL) return;
  try {
    Kdu_ilayer_ref_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_ilayer_ref_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_ilayer_ref_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_ilayer_ref *self = (kdu_ilayer_ref *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_ilayer_ref *self =
      new kdu_ilayer_ref();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Is_1null(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    bool Result;
    kdu_ilayer_ref *self = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_null();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    bool Result;
    kdu_ilayer_ref *self = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                              Kdu_istream_ref                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_istream_ref_CLS != NULL) return;
  try {
    Kdu_istream_ref_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_istream_ref_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_istream_ref_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_istream_ref *self = (kdu_istream_ref *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_istream_ref *self =
      new kdu_istream_ref();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Is_1null(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    bool Result;
    kdu_istream_ref *self = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_istream_ref_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_null();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    bool Result;
    kdu_istream_ref *self = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_istream_ref_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                               Kdu_line_buf                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_line_buf_CLS != NULL) return;
  try {
    Kdu_line_buf_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_line_buf_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_line_buf_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_line_buf *self = (kdu_line_buf *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_line_buf *self =
      new kdu_line_buf();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->destroy();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Pre_1create(JNIEnv *__env, jobject _self, jobject _allocator, jint _width, jboolean _absolute, jboolean _use_shorts, jint _extend_left, jint _extend_right)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    int width = (int) _width;
    bool absolute = (_absolute)?true:false;
    bool use_shorts = (_use_shorts)?true:false;
    int extend_left = (int) _extend_left;
    int extend_right = (int) _extend_right;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->pre_create(allocator,width,absolute,use_shorts,extend_left,extend_right);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Create(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->create();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1line_1buf_Check_1status(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    int Result;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_status();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1exchangeable(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_exchangeable();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Exchange(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *src = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_line_buf_PTR) & ~((jlong) 1));
    bool Result;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exchange(*src);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1floats(JNIEnv *__env, jobject _self, jfloatArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_floats(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1floats(JNIEnv *__env, jobject _self, jfloatArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_floats(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1ints___3III(JNIEnv *__env, jobject _self, jintArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1ints___3III(JNIEnv *__env, jobject _self, jintArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1ints___3SII(JNIEnv *__env, jobject _self, jshortArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1ints___3SII(JNIEnv *__env, jobject _self, jshortArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1width(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    int Result;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_width();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Is_1absolute(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    bool Result;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_absolute();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Kdu_message                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_message_CLS != NULL) return;
  try {
    Kdu_message_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_message_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_message_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_message *self = (_aux_extended__kdu_message *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_message *self_delegator =(_jni_delegator__kdu_message *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_message *self =
      new _aux_extended__kdu_message();
    self->_delegator = new _jni_delegator__kdu_message(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    _aux_extended__kdu_message *self = (_aux_extended__kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_message *self_delegator = (_jni_delegator__kdu_message *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Put_1text___3I(JNIEnv *__env, jobject _self, jintArray _string)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_uint16 *string = NULL;
    jint *string_ELTS = NULL;
    jsize string_L = 0;
    if (_string != NULL)
      {
        string_ELTS = __env->GetIntArrayElements(_string,NULL);
        string_L = __env->GetArrayLength(_string);
        string = new kdu_uint16[string_L];
        { for (int i=0; i<string_L; i++) string[i] = (kdu_uint16)(string_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_message *self = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->put_text(string);
    } catch (...) {
    if (_string != NULL)
      {
        delete[] string;
        __env->ReleaseIntArrayElements(_string,string_ELTS,0);
      }
    throw;
    }
    if (_string != NULL)
      {
        for (int i=0; i<string_L; i++) string_ELTS[i] = (jint)(string[i]);
      }
    if (_string != NULL)
      {
        delete[] string;
        __env->ReleaseIntArrayElements(_string,string_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1message_Set_1hex_1mode(JNIEnv *__env, jobject _self, jboolean _new_mode)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    bool new_mode = (_new_mode)?true:false;
    bool Result;
    kdu_message *self = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_hex_mode(new_mode);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

void _jni_delegator__kdu_message::put_text(const char * string)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jstring _string = __env->NewStringUTF(string);
    jmethodID __Put_text_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Put_text","(Ljava/lang/String;)V");
    __env->CallVoidMethod(_self,__Put_text_ID,_string);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

void _jni_delegator__kdu_message::flush(bool end_of_message)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jboolean _end_of_message = (end_of_message)?true:false;
    jmethodID __Flush_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Flush","(Z)V");
    __env->CallVoidMethod(_self,__Flush_ID,_end_of_message);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

void _jni_delegator__kdu_message::start_message()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jmethodID __Start_message_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Start_message","()V");
    __env->CallVoidMethod(_self,__Start_message_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

/*****************************************************************************/
/*                           Kdu_message_formatter                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_message_formatter_CLS != NULL) return;
  try {
    Kdu_message_formatter_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_message_formatter_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_message_formatter_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_message_formatter *self = (kdu_message_formatter *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1create(JNIEnv *__env, jclass this_class, jobject _output, jint _max_line)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr((_output==NULL)?((jlong) 0):(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1)));
    int max_line = (int) _max_line;
    kdu_message_formatter *self =
      new kdu_message_formatter(output,max_line);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Set_1master_1indent(JNIEnv *__env, jobject _self, jint _val)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    int val = (int) _val;
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_master_indent(val);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Put_1text__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->put_text(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Flush(JNIEnv *__env, jobject _self, jboolean _end_of_message)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    bool end_of_message = (_end_of_message)?true:false;
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->flush(end_of_message);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Start_1message(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start_message();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                             Kdu_message_queue                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_message_queue_CLS != NULL) return;
  try {
    Kdu_message_queue_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_message_queue_CLS==NULL)
      Kdu_message_queue_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_message_queue_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_message_queue_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_message_queue *self = (kdu_message_queue *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_1queue_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_message_queue *self =
      new kdu_message_queue();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Configure(JNIEnv *__env, jobject _self, jint _max_queued_messages, jboolean _auto_pop, jboolean _throw_exceptions, jint _exception_val)
{
  try {
    if (Kdu_message_queue_CLS==NULL)
      Kdu_message_queue_LOADER(__env);
    int max_queued_messages = (int) _max_queued_messages;
    bool auto_pop = (_auto_pop)?true:false;
    bool throw_exceptions = (_throw_exceptions)?true:false;
    kdu_exception exception_val = (kdu_exception) _exception_val;
    kdu_message_queue *self = (kdu_message_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->configure(max_queued_messages,auto_pop,throw_exceptions,exception_val);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Put_1text__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_message_queue_CLS==NULL)
      Kdu_message_queue_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_message_queue *self = (kdu_message_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->put_text(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Start_1message(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_message_queue_CLS==NULL)
      Kdu_message_queue_LOADER(__env);
    kdu_message_queue *self = (kdu_message_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start_message();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Flush(JNIEnv *__env, jobject _self, jboolean _end_of_message)
{
  try {
    if (Kdu_message_queue_CLS==NULL)
      Kdu_message_queue_LOADER(__env);
    bool end_of_message = (_end_of_message)?true:false;
    kdu_message_queue *self = (kdu_message_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->flush(end_of_message);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1message_1queue_Pop_1message(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_message_queue_CLS==NULL)
      Kdu_message_queue_LOADER(__env);
    const char * Result;
    kdu_message_queue *self = (kdu_message_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->pop_message();
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_metareq                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1metareq_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_metareq_CLS != NULL) return;
  try {
    Kdu_metareq_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1metareq_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_metareq_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_metareq_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_metareq *self = (kdu_metareq *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_metareq *rhs = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_metareq_PTR) & ~((jlong) 1));
    bool Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_uint32 Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_box_type();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1qualifier(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_qualifier();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1priority(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    bool Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_priority();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1byte_1limit(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_byte_limit();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1recurse(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    bool Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_recurse();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1root_1bin_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_long Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_root_bin_id();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1max_1depth(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_depth();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1next(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_metareq *Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_next();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_metareq_CLS,Kdu_metareq_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                            Kdu_multi_analysis                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_multi_analysis_CLS != NULL) return;
  try {
    Kdu_multi_analysis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2ILkdu_1jni_Kdu_1roi_1image_2I(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jobject _env, jobject _env_queue, jint _flags, jobject _roi, jint _buffer_rows)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    if (Kdu_roi_image_CLS==NULL)
      Kdu_roi_image_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    void *tile_S = _kdu_long_to_addr((_tile==NULL)?((jlong) 0):(__env->GetLongField(_tile,Kdu_tile_PTR)));
    kdu_tile tile = *((kdu_tile *)(&tile_S));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    kdu_roi_image *roi = (kdu_roi_image *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_image_PTR) & ~((jlong) 1)));
    int buffer_rows = (int) _buffer_rows;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.create(codestream,tile,env,env_queue,flags,roi,buffer_rows);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2ZLkdu_1jni_Kdu_1roi_1image_2ZILkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2Z(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jboolean _force_precise, jobject _roi, jboolean _want_fastest, jint _buffer_rows, jobject _env, jobject _env_queue, jboolean _multi_threaded_dwt)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_roi_image_CLS==NULL)
      Kdu_roi_image_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    void *tile_S = _kdu_long_to_addr((_tile==NULL)?((jlong) 0):(__env->GetLongField(_tile,Kdu_tile_PTR)));
    kdu_tile tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (_force_precise)?true:false;
    kdu_roi_image *roi = (kdu_roi_image *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_image_PTR) & ~((jlong) 1)));
    bool want_fastest = (_want_fastest)?true:false;
    int buffer_rows = (int) _buffer_rows;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    bool multi_threaded_dwt = (_multi_threaded_dwt)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.create(codestream,tile,force_precise,roi,want_fastest,buffer_rows,env,env_queue,multi_threaded_dwt);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Destroy(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    self.destroy(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Get_1size(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result_copy = self.get_size(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Exchange_1line(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _written, jobject _env)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_line_buf *written = (kdu_line_buf *)
      _kdu_long_to_addr((_written==NULL)?((jlong) 0):(__env->GetLongField(_written,Kdu_line_buf_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_line_buf *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.exchange_line(comp_idx,written,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_line_buf_CLS,Kdu_line_buf_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Is_1line_1precise(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.is_line_precise(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Is_1line_1absolute(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.is_line_absolute(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                            Kdu_multi_synthesis                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_multi_synthesis_CLS != NULL) return;
  try {
    Kdu_multi_synthesis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2II(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jobject _env, jobject _env_queue, jint _flags, jint _buffer_rows)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    void *tile_S = _kdu_long_to_addr((_tile==NULL)?((jlong) 0):(__env->GetLongField(_tile,Kdu_tile_PTR)));
    kdu_tile tile = *((kdu_tile *)(&tile_S));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    int buffer_rows = (int) _buffer_rows;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.create(codestream,tile,env,env_queue,flags,buffer_rows);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2ZZZILkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2Z(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jboolean _force_precise, jboolean _skip_ycc, jboolean _want_fastest, jint _buffer_rows, jobject _env, jobject _env_queue, jboolean _multi_threaded_dwt)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    void *tile_S = _kdu_long_to_addr((_tile==NULL)?((jlong) 0):(__env->GetLongField(_tile,Kdu_tile_PTR)));
    kdu_tile tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (_force_precise)?true:false;
    bool skip_ycc = (_skip_ycc)?true:false;
    bool want_fastest = (_want_fastest)?true:false;
    int buffer_rows = (int) _buffer_rows;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    bool multi_threaded_dwt = (_multi_threaded_dwt)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.create(codestream,tile,force_precise,skip_ycc,want_fastest,buffer_rows,env,env_queue,multi_threaded_dwt);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Start(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.start(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Destroy(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    self.destroy(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Get_1size(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result_copy = self.get_size(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Get_1line(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _env)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_line_buf *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.get_line(comp_idx,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_line_buf_CLS,Kdu_line_buf_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Is_1line_1precise(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.is_line_precise(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Is_1line_1absolute(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.is_line_absolute(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                               Kdu_nc_coords                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1nc_1coords_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_nc_coords_CLS != NULL) return;
  try {
    Kdu_nc_coords_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1nc_1coords_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_nc_coords_CLS==NULL)
      Kdu_nc_coords_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_nc_coords_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_nc_coords_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_nc_coords *self = (kdu_nc_coords *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

/*****************************************************************************/
/*                                 Kdu_node                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1node_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_node_CLS != NULL) return;
  try {
    Kdu_node_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1node_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1node_Compare(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    void *src_S = _kdu_long_to_addr(__env->GetLongField(_src,Kdu_node_PTR));
    kdu_node src = *((kdu_node *)(&src_S));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.compare(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    src_S = *((void **)(&(src)));
      __env->SetLongField(_src,Kdu_node_PTR,(jlong) _addr_to_kdu_long(src_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1child(JNIEnv *__env, jobject _self, jint _child_idx)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    int child_idx = (int) _child_idx;
    kdu_node Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.access_child(child_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_node_CLS,Kdu_node_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1directions(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_directions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1num_1descendants(JNIEnv *__env, jobject _self, jintArray _num_leaf_descendants)
{
  try {
    if (_num_leaf_descendants == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    jint num_leaf_descendants_ELT; __env->GetIntArrayRegion(_num_leaf_descendants,0,1,&num_leaf_descendants_ELT);
    int num_leaf_descendants = (int) num_leaf_descendants_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_num_descendants(num_leaf_descendants);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_leaf_descendants_ELT = (jint) num_leaf_descendants;
  __env->SetIntArrayRegion(_num_leaf_descendants,0,1,&num_leaf_descendants_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1subband(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    kdu_subband Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.access_subband();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_subband_CLS,Kdu_subband_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_resolution_CLS,Kdu_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1node_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (_dims == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    self.get_dims(*dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1kernel_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_kernel_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1node_Get_1kernel_1coefficients(JNIEnv *__env, jobject _self, jboolean _vertical)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    bool vertical = (_vertical)?true:false;
    const float *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_kernel_coefficients(vertical);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1node_Get_1bibo_1gains(JNIEnv *__env, jobject _self, jintArray _num_steps, jboolean _vertical)
{
  try {
    if (_num_steps == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    jint num_steps_ELT; __env->GetIntArrayRegion(_num_steps,0,1,&num_steps_ELT);
    int num_steps = (int) num_steps_ELT;
    bool vertical = (_vertical)?true:false;
    const float *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_bibo_gains(num_steps,vertical);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_steps_ELT = (jint) num_steps;
  __env->SetIntArrayRegion(_num_steps,0,1,&num_steps_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Kdu_output                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_output_CLS != NULL) return;
  try {
    Kdu_output_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_output_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_output_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_output *self = (kdu_output *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__B(JNIEnv *__env, jobject _self, jbyte _byte)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_byte byte = (kdu_byte) _byte;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->put(byte);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__I(JNIEnv *__env, jobject _self, jint _word)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_uint16 word = (kdu_uint16) _word;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->put(word);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__J(JNIEnv *__env, jobject _self, jlong _word)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_uint32 word = (kdu_uint32) _word;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->put(word);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__F(JNIEnv *__env, jobject _self, jfloat _val)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    float val = (float) _val;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->put(val);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Write(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _count)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int count = (int) _count;
    try { // So we can clean up temporary arrays
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write(buf,count);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                            Kdu_overlay_params                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_overlay_params_CLS != NULL) return;
  try {
    Kdu_overlay_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1codestream_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    int Result;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_codestream_idx();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1compositing_1layer_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    int Result;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_compositing_layer_idx();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1max_1painting_1border(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    int Result;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_painting_border();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1num_1aux_1params(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    int Result;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_aux_params();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1aux_1param(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    int n = (int) _n;
    kdu_uint32 Result;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_aux_param(n);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Push_1aux_1params(JNIEnv *__env, jobject _self, jlongArray _aux_params, jint _num_aux_params)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    kdu_uint32 *aux_params = NULL;
    jlong *aux_params_ELTS = NULL;
    jsize aux_params_L = 0;
    if (_aux_params != NULL)
      {
        aux_params_ELTS = __env->GetLongArrayElements(_aux_params,NULL);
        aux_params_L = __env->GetArrayLength(_aux_params);
        aux_params = new kdu_uint32[aux_params_L];
        { for (int i=0; i<aux_params_L; i++) aux_params[i] = (kdu_uint32)(aux_params_ELTS[i]); }
      }
    int num_aux_params = (int) _num_aux_params;
    try { // So we can clean up temporary arrays
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->push_aux_params(aux_params,num_aux_params);
    } catch (...) {
    if (_aux_params != NULL)
      {
        delete[] aux_params;
        __env->ReleaseLongArrayElements(_aux_params,aux_params_ELTS,0);
      }
    throw;
    }
    if (_aux_params != NULL)
      {
        for (int i=0; i<aux_params_L; i++) aux_params_ELTS[i] = (jlong)(aux_params[i]);
      }
    if (_aux_params != NULL)
      {
        delete[] aux_params;
        __env->ReleaseLongArrayElements(_aux_params,aux_params_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Restore_1aux_1params(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->restore_aux_params();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Configure_1ring_1points(JNIEnv *__env, jobject _self, jint _stride, jint _radius)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    int stride = (int) _stride;
    int radius = (int) _radius;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->configure_ring_points(stride,radius);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1ring_1points(JNIEnv *__env, jobject _self, jint _min_y, jint _max_y, jintArray _num_vals)
{
  try {
    if (_num_vals == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    int min_y = (int) _min_y;
    int max_y = (int) _max_y;
    jint num_vals_ELT; __env->GetIntArrayRegion(_num_vals,0,1,&num_vals_ELT);
    int num_vals = (int) num_vals_ELT;
    const int *Result;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ring_points(min_y,max_y,num_vals);
    num_vals_ELT = (jint) num_vals;
  __env->SetIntArrayRegion(_num_vals,0,1,&num_vals_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Map_1jpx_1regions(JNIEnv *__env, jobject _self, jobject _regions, jint _num_regions, jobject _image_offset, jobject _subsampling, jboolean _transpose, jboolean _vflip, jboolean _hflip, jobject _expansion_numerator, jobject _expansion_denominator, jobject _compositing_offset)
{
  try {
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    jpx_roi *regions = (jpx_roi *)
      _kdu_long_to_addr((_regions==NULL)?((jlong) 0):(__env->GetLongField(_regions,Jpx_roi_PTR) & ~((jlong) 1)));
    int num_regions = (int) _num_regions;
    kdu_coords *image_offset = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_image_offset,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *subsampling = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_subsampling,Kdu_coords_PTR) & ~((jlong) 1));
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_coords *expansion_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expansion_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *expansion_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expansion_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *compositing_offset = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_compositing_offset,Kdu_coords_PTR) & ~((jlong) 1));
    jpx_roi *Result;
    kdu_overlay_params *self = (kdu_overlay_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_overlay_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->map_jpx_regions(regions,num_regions,*image_offset,*subsampling,transpose,vflip,hflip,*expansion_numerator,*expansion_denominator,*compositing_offset);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jpx_roi_CLS,Jpx_roi_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_params_CLS != NULL) return;
  try {
    Kdu_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_params *self = (kdu_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_New_1object(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->new_object();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Link(JNIEnv *__env, jobject _self, jobject _existing, jint _tile_idx, jint _comp_idx, jint _num_tiles, jint _num_comps)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *existing = (kdu_params *)
      _kdu_long_to_addr((_existing==NULL)?((jlong) 0):(__env->GetLongField(_existing,Kdu_params_PTR) & ~((jlong) 1)));
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int num_tiles = (int) _num_tiles;
    int num_comps = (int) _num_comps;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->link(existing,tile_idx,comp_idx,num_tiles,num_comps);
    __env->SetLongField(_self,Kdu_params_PTR,(jlong) _addr_to_kdu_long(self));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_New_1instance(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->new_instance();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Copy_1from(JNIEnv *__env, jobject _self, jobject _source, jint _source_tile, jint _target_tile, jint _instance, jint _skip_components, jint _discard_levels, jboolean _transpose, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *source = (kdu_params *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_params_PTR) & ~((jlong) 1)));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_from(source,source_tile,target_tile,instance,skip_components,discard_levels,transpose,vflip,hflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Copy_1all(JNIEnv *__env, jobject _self, jobject _source, jint _skip_components, jint _discard_levels, jboolean _transpose, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *source = (kdu_params *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_params_PTR) & ~((jlong) 1)));
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_all(source,skip_components,discard_levels,transpose,vflip,hflip);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1params_Identify_1cluster(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char * Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->identify_cluster();
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1cluster__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _cluster_name)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *cluster_name = NULL;
    if (_cluster_name != NULL)
      {
        cluster_name = __env->GetStringUTFChars(_cluster_name,NULL);
      }
    kdu_params *Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_cluster(cluster_name);
    } catch (...) {
    if (_cluster_name != NULL)
      {
        __env->ReleaseStringUTFChars(_cluster_name,cluster_name);
      }
    throw;
    }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    if (_cluster_name != NULL)
      {
        __env->ReleaseStringUTFChars(_cluster_name,cluster_name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1cluster__I(JNIEnv *__env, jobject _self, jint _sequence_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int sequence_idx = (int) _sequence_idx;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_cluster(sequence_idx);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1instance(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_instance();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1num_1comps(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_comps();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1num_1tiles(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_tiles();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1relation(JNIEnv *__env, jobject _self, jint _tile_idx, jint _comp_idx, jint _inst_idx, jboolean _read_only)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int inst_idx = (int) _inst_idx;
    bool read_only = (_read_only)?true:false;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_relation(tile_idx,comp_idx,inst_idx,read_only);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1unique(JNIEnv *__env, jobject _self, jint _tile_idx, jint _comp_idx, jint _inst_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int inst_idx = (int) _inst_idx;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_unique(tile_idx,comp_idx,inst_idx);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1next_1inst(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_next_inst();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_params_CLS,Kdu_params_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Clear_1marks(JNIEnv *__env, jobject _self, jboolean _for_reading)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    bool for_reading = (_for_reading)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->clear_marks(for_reading);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Any_1changes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    bool Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->any_changes();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Check_1typical_1tile(JNIEnv *__env, jobject _self, jint _tile_idx, jstring _excluded_clusters)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    const char *excluded_clusters = NULL;
    if (_excluded_clusters != NULL)
      {
        excluded_clusters = __env->GetStringUTFChars(_excluded_clusters,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_typical_tile(tile_idx,excluded_clusters);
    } catch (...) {
    if (_excluded_clusters != NULL)
      {
        __env->ReleaseStringUTFChars(_excluded_clusters,excluded_clusters);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_excluded_clusters != NULL)
      {
        __env->ReleaseStringUTFChars(_excluded_clusters,excluded_clusters);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Translate_1marker_1segment(JNIEnv *__env, jobject _self, jint _code, jint _num_bytes, jbyteArray _bytes, jint _which_tile, jint _tpart_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_uint16 code = (kdu_uint16) _code;
    int num_bytes = (int) _num_bytes;
    kdu_byte *bytes = NULL;
    jbyte *bytes_ELTS = NULL;
    if (_bytes != NULL)
      {
        bytes_ELTS = __env->GetByteArrayElements(_bytes,NULL);
        bytes = (kdu_byte *) bytes_ELTS;
      }
    int which_tile = (int) _which_tile;
    int tpart_idx = (int) _tpart_idx;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->translate_marker_segment(code,num_bytes,bytes,which_tile,tpart_idx);
    } catch (...) {
    if (_bytes != NULL)
      {
        __env->ReleaseByteArrayElements(_bytes,bytes_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_bytes != NULL)
      {
        __env->ReleaseByteArrayElements(_bytes,bytes_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Generate_1marker_1segments(JNIEnv *__env, jobject _self, jobject _out, jint _which_tile, jint _tpart_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_output *out = (kdu_output *)
      _kdu_long_to_addr((_out==NULL)?((jlong) 0):(__env->GetLongField(_out,Kdu_output_PTR) & ~((jlong) 1)));
    int which_tile = (int) _which_tile;
    int tpart_idx = (int) _tpart_idx;
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->generate_marker_segments(out,which_tile,tpart_idx);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3IZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jintArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived)
{
  try {
    if (_value == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    jint value_ELT; __env->GetIntArrayRegion(_value,0,1,&value_ELT);
    int value = (int) value_ELT;
    bool allow_inherit = (_allow_inherit)?true:false;
    bool allow_extend = (_allow_extend)?true:false;
    bool allow_derived = (_allow_derived)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    value_ELT = (jint) value;
  __env->SetIntArrayRegion(_value,0,1,&value_ELT);
    jboolean _Result = (jboolean) Result;
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3ZZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jbooleanArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived)
{
  try {
    if (_value == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    jboolean value_ELT; __env->GetBooleanArrayRegion(_value,0,1,&value_ELT);
    bool value = (value_ELT)?true:false;
    bool allow_inherit = (_allow_inherit)?true:false;
    bool allow_extend = (_allow_extend)?true:false;
    bool allow_derived = (_allow_derived)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    value_ELT = (jboolean) value;
  __env->SetBooleanArrayRegion(_value,0,1,&value_ELT);
    jboolean _Result = (jboolean) Result;
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3FZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jfloatArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived)
{
  try {
    if (_value == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    jfloat value_ELT; __env->GetFloatArrayRegion(_value,0,1,&value_ELT);
    float value = (float) value_ELT;
    bool allow_inherit = (_allow_inherit)?true:false;
    bool allow_extend = (_allow_extend)?true:false;
    bool allow_derived = (_allow_derived)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    value_ELT = (jfloat) value;
  __env->SetFloatArrayRegion(_value,0,1,&value_ELT);
    jboolean _Result = (jboolean) Result;
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2III(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jint _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) _value;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2IIZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jboolean _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (_value)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2IIF(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jfloat _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    float value = (float) _value;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2III(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jint _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) _value;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2IIZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jboolean _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (_value)?true:false;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2IID(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jdouble _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    double value = (double) _value;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set_1derived(JNIEnv *__env, jobject _self, jstring _name)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_derived(name);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Parse_1string__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->parse_string(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Parse_1string__Ljava_lang_String_2I(JNIEnv *__env, jobject _self, jstring _string, jint _tile_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    int tile_idx = (int) _tile_idx;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->parse_string(string,tile_idx);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Textualize_1attributes__Lkdu_1jni_Kdu_1message_2Z(JNIEnv *__env, jobject _self, jobject _output, jboolean _skip_derived)
{
  try {
    if (_output == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    bool skip_derived = (_skip_derived)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->textualize_attributes(*output,skip_derived);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Textualize_1attributes__Lkdu_1jni_Kdu_1message_2IIZ(JNIEnv *__env, jobject _self, jobject _output, jint _min_tile, jint _max_tile, jboolean _skip_derived)
{
  try {
    if (_output == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    int min_tile = (int) _min_tile;
    int max_tile = (int) _max_tile;
    bool skip_derived = (_skip_derived)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->textualize_attributes(*output,min_tile,max_tile,skip_derived);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Describe_1attributes(JNIEnv *__env, jobject _self, jobject _output, jboolean _include_comments)
{
  try {
    if (_output == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    bool include_comments = (_include_comments)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->describe_attributes(*output,include_comments);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Describe_1attribute(JNIEnv *__env, jobject _self, jstring _name, jobject _output, jboolean _include_comments)
{
  try {
    if (_output == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    bool include_comments = (_include_comments)?true:false;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->describe_attribute(name,*output,include_comments);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Delete_1unparsed_1attribute(JNIEnv *__env, jobject _self, jstring _name)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->delete_unparsed_attribute(name);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Custom_1parse_1field(JNIEnv *__env, jobject _self, jstring _string, jstring _name, jint _field_idx, jintArray _val)
{
  try {
    if (_val == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int field_idx = (int) _field_idx;
    jint val_ELT; __env->GetIntArrayRegion(_val,0,1,&val_ELT);
    int val = (int) val_ELT;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->custom_parse_field(string,name,field_idx,val);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    val_ELT = (jint) val;
  __env->SetIntArrayRegion(_val,0,1,&val_ELT);
    jint _Result = (jint) Result;
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Custom_1textualize_1field(JNIEnv *__env, jobject _self, jobject _output, jstring _name, jint _field_idx, jint _val)
{
  try {
    if (_output == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int field_idx = (int) _field_idx;
    int val = (int) _val;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->custom_textualize_field(*output,name,field_idx,val);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize(JNIEnv *__env, jobject _self, jboolean _after_reading)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    bool after_reading = (_after_reading)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->finalize(after_reading);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize_1all__Z(JNIEnv *__env, jobject _self, jboolean _after_reading)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    bool after_reading = (_after_reading)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->finalize_all(after_reading);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize_1all__IZ(JNIEnv *__env, jobject _self, jint _tile_idx, jboolean _after_reading)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    bool after_reading = (_after_reading)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->finalize_all(tile_idx,after_reading);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                               Kdu_precinct                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_precinct_CLS != NULL) return;
  try {
    Kdu_precinct_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Check_1loaded(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.check_loaded();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1unique_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.get_unique_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1valid_1blocks(JNIEnv *__env, jobject _self, jint _band_idx, jobject _indices)
{
  try {
    if (_indices == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int band_idx = (int) _band_idx;
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.get_valid_blocks(band_idx,*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1precinct_Open_1block(JNIEnv *__env, jobject _self, jint _band_idx, jobject _block_idx, jobject _env)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int band_idx = (int) _band_idx;
    kdu_coords *block_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_block_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_block *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.open_block(band_idx,*block_idx,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_block_CLS,Kdu_block_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Close_1block(JNIEnv *__env, jobject _self, jobject _block, jobject _env)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    self.close_block(block,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Size_1packets(JNIEnv *__env, jobject _self, jintArray _cumulative_packets, jintArray _cumulative_bytes, jbooleanArray _is_significant)
{
  try {
    if ((_cumulative_packets == NULL) || (_cumulative_bytes == NULL) || (_is_significant == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    jint cumulative_packets_ELT; __env->GetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    int cumulative_packets = (int) cumulative_packets_ELT;
    jint cumulative_bytes_ELT; __env->GetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    int cumulative_bytes = (int) cumulative_bytes_ELT;
    jboolean is_significant_ELT; __env->GetBooleanArrayRegion(_is_significant,0,1,&is_significant_ELT);
    bool is_significant = (is_significant_ELT)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.size_packets(cumulative_packets,cumulative_bytes,is_significant);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    cumulative_packets_ELT = (jint) cumulative_packets;
  __env->SetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    cumulative_bytes_ELT = (jint) cumulative_bytes;
  __env->SetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    is_significant_ELT = (jboolean) is_significant;
  __env->SetBooleanArrayRegion(_is_significant,0,1,&is_significant_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1packets(JNIEnv *__env, jobject _self, jint _leading_skip_packets, jint _leading_skip_bytes, jintArray _cumulative_packets, jintArray _cumulative_bytes, jobject _out)
{
  try {
    if ((_cumulative_packets == NULL) || (_cumulative_bytes == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    int leading_skip_packets = (int) _leading_skip_packets;
    int leading_skip_bytes = (int) _leading_skip_bytes;
    jint cumulative_packets_ELT; __env->GetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    int cumulative_packets = (int) cumulative_packets_ELT;
    jint cumulative_bytes_ELT; __env->GetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    int cumulative_bytes = (int) cumulative_bytes_ELT;
    kdu_output *out = (kdu_output *)
      _kdu_long_to_addr((_out==NULL)?((jlong) 0):(__env->GetLongField(_out,Kdu_output_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.get_packets(leading_skip_packets,leading_skip_bytes,cumulative_packets,cumulative_bytes,out);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    cumulative_packets_ELT = (jint) cumulative_packets;
  __env->SetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    cumulative_bytes_ELT = (jint) cumulative_bytes;
  __env->SetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Restart(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    self.restart();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    self.close();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                               Kdu_pull_ifc                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_pull_ifc_CLS != NULL) return;
  try {
    Kdu_pull_ifc_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_pull_ifc_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_pull_ifc_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_pull_ifc *self = (kdu_pull_ifc *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_pull_ifc *self =
      new kdu_pull_ifc();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->destroy();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Start(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->start(env);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    bool Result;
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Pull(JNIEnv *__env, jobject _self, jobject _line, jobject _env)
{
  try {
    if (_line == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->pull(*line,env);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                               Kdu_push_ifc                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_push_ifc_CLS != NULL) return;
  try {
    Kdu_push_ifc_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_push_ifc_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_push_ifc_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_push_ifc *self = (kdu_push_ifc *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_push_ifc *self =
      new kdu_push_ifc();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->destroy();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Start(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start(env);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    bool Result;
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Push(JNIEnv *__env, jobject _self, jobject _line, jobject _env)
{
  try {
    if (_line == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->push(*line,env);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                               Kdu_range_set                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_range_set_CLS != NULL) return;
  try {
    Kdu_range_set_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_range_set_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_range_set_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_range_set *self = (kdu_range_set *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_range_set *self =
      new kdu_range_set();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1create__Lkdu_1jni_Kdu_1range_1set_2(JNIEnv *__env, jclass this_class, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *src = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_range_set_PTR) & ~((jlong) 1));
    kdu_range_set *self =
      new kdu_range_set(*src);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Copy_1from(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *src = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_range_set_PTR) & ~((jlong) 1));
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_from(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_empty();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Contains(JNIEnv *__env, jobject _self, jobject _rhs, jboolean _empty_set_defaults_to_zero)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *rhs = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_range_set_PTR) & ~((jlong) 1));
    bool empty_set_defaults_to_zero = (_empty_set_defaults_to_zero)?true:false;
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->contains(*rhs,empty_set_defaults_to_zero);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Equals(JNIEnv *__env, jobject _self, jobject _rhs, jboolean _empty_set_defaults_to_zero)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *rhs = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_range_set_PTR) & ~((jlong) 1));
    bool empty_set_defaults_to_zero = (_empty_set_defaults_to_zero)?true:false;
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs,empty_set_defaults_to_zero);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Init(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__Lkdu_1jni_Kdu_1sampled_1range_2Z(JNIEnv *__env, jobject _self, jobject _range, jboolean _allow_merging)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    kdu_sampled_range *range = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_range,Kdu_sampled_range_PTR) & ~((jlong) 1));
    bool allow_merging = (_allow_merging)?true:false;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->add(*range,allow_merging);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__I(JNIEnv *__env, jobject _self, jint _val)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int val = (int) _val;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->add(val);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__II(JNIEnv *__env, jobject _self, jint _from, jint _to)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int from = (int) _from;
    int to = (int) _to;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->add(from,to);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1range_1set_Get_1num_1ranges(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_ranges();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1range_1set_Get_1range(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int n = (int) _n;
    kdu_sampled_range Result_copy;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_range(n);
    jobject _Result = NULL;
      {
        kdu_sampled_range *Result = new kdu_sampled_range; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_sampled_range_CLS,Kdu_sampled_range_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1range_1set_Access_1range(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int n = (int) _n;
    kdu_sampled_range *Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_range(n);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_sampled_range_CLS,Kdu_sampled_range_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Test(JNIEnv *__env, jobject _self, jint _index)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int index = (int) _index;
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->test(index);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1range_1set_Expand(JNIEnv *__env, jobject _self, jintArray _buf, jint _accept_min, jint _accept_max)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int *buf = NULL;
    jint *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetIntArrayElements(_buf,NULL);
        buf = (int *) buf_ELTS;
      }
    int accept_min = (int) _accept_min;
    int accept_max = (int) _accept_max;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->expand(buf,accept_min,accept_max);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

/*****************************************************************************/
/*                           Kdu_region_compositor                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_region_compositor_CLS != NULL) return;
  try {
    Kdu_region_compositor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_region_compositor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_region_compositor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_region_compositor *self = (_aux_extended__kdu_region_compositor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_region_compositor *self_delegator =(_jni_delegator__kdu_region_compositor *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2(JNIEnv *__env, jclass this_class, jobject _env, jobject _env_queue)
{
  try {
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(env,env_queue);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    _aux_extended__kdu_region_compositor *self = (_aux_extended__kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_region_compositor *self_delegator = (_jni_delegator__kdu_region_compositor *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Kdu_1compressed_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Jpx_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Mj2_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    mj2_source *source = (mj2_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Mj2_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Pre_1destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->pre_destroy();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Kdu_1compressed_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->create(source,persistent_cache_threshold);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Jpx_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->create(source,persistent_cache_threshold);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Mj2_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    mj2_source *source = (mj2_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Mj2_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->create(source,persistent_cache_threshold);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1error_1level(JNIEnv *__env, jobject _self, jint _error_level)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int error_level = (int) _error_level;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_error_level(error_level);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1process_1aggregation_1threshold(JNIEnv *__env, jobject _self, jfloat _threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    float threshold = (float) _threshold;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_process_aggregation_threshold(threshold);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1surface_1initialization_1mode(JNIEnv *__env, jobject _self, jboolean _pre_initialize)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool pre_initialize = (_pre_initialize)?true:false;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_surface_initialization_mode(pre_initialize);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Add_1ilayer(JNIEnv *__env, jobject _self, jint _layer_src, jobject _full_source_dims, jobject _full_target_dims, jboolean _transpose, jboolean _vflip, jboolean _hflip, jint _frame_idx, jint _field_handling)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int layer_src = (int) _layer_src;
    kdu_dims *full_source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_full_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *full_target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_full_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    int frame_idx = (int) _frame_idx;
    int field_handling = (int) _field_handling;
    kdu_ilayer_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->add_ilayer(layer_src,*full_source_dims,*full_target_dims,transpose,vflip,hflip,frame_idx,field_handling);
    jobject _Result = NULL;
      {
        kdu_ilayer_ref *Result = new kdu_ilayer_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_ilayer_ref_CLS,Kdu_ilayer_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Change_1ilayer_1frame(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jint _frame_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    kdu_ilayer_ref *ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    int frame_idx = (int) _frame_idx;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->change_ilayer_frame(*ilayer_ref,frame_idx);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Add_1primitive_1ilayer(JNIEnv *__env, jobject _self, jint _stream_src, jintArray _single_component_idx, jint _single_access_mode, jobject _full_source_dims, jobject _full_target_dims, jboolean _transpose, jboolean _vflip, jboolean _hflip)
{
  try {
    if (_single_component_idx == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int stream_src = (int) _stream_src;
    jint single_component_idx_ELT; __env->GetIntArrayRegion(_single_component_idx,0,1,&single_component_idx_ELT);
    int single_component_idx = (int) single_component_idx_ELT;
    kdu_component_access_mode single_access_mode = (kdu_component_access_mode) _single_access_mode;
    kdu_dims *full_source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_full_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *full_target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_full_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_ilayer_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->add_primitive_ilayer(stream_src,single_component_idx,single_access_mode,*full_source_dims,*full_target_dims,transpose,vflip,hflip);
    single_component_idx_ELT = (jint) single_component_idx;
  __env->SetIntArrayRegion(_single_component_idx,0,1,&single_component_idx_ELT);
    jobject _Result = NULL;
      {
        kdu_ilayer_ref *Result = new kdu_ilayer_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_ilayer_ref_CLS,Kdu_ilayer_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Remove_1ilayer(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jboolean _permanent)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    kdu_ilayer_ref *ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    bool permanent = (_permanent)?true:false;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->remove_ilayer(*ilayer_ref,permanent);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Cull_1inactive_1ilayers(JNIEnv *__env, jobject _self, jint _max_inactive)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int max_inactive = (int) _max_inactive;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->cull_inactive_ilayers(max_inactive);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1frame(JNIEnv *__env, jobject _self, jobject _expander)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    jpx_frame_expander *expander = (jpx_frame_expander *)
      _kdu_long_to_addr((_expander==NULL)?((jlong) 0):(__env->GetLongField(_expander,Jpx_frame_expander_PTR) & ~((jlong) 1)));
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_frame(expander);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Waiting_1for_1stream_1headers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->waiting_for_stream_headers();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1scale(JNIEnv *__env, jobject _self, jboolean _transpose, jboolean _vflip, jboolean _hflip, jfloat _scale)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    float scale = (float) _scale;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_scale(transpose,vflip,hflip,scale);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1optimal_1scale(JNIEnv *__env, jobject _self, jobject _region, jfloat _scale_anchor, jfloat _min_scale, jfloat _max_scale, jobject _istream_ref, jintArray _component_idx, jboolean _avoid_subsampling)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    float scale_anchor = (float) _scale_anchor;
    float min_scale = (float) _min_scale;
    float max_scale = (float) _max_scale;
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr((_istream_ref==NULL)?((jlong) 0):(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1)));
    int *component_idx = NULL;
    jint *component_idx_ELTS = NULL;
    if (_component_idx != NULL)
      {
        component_idx_ELTS = __env->GetIntArrayElements(_component_idx,NULL);
        component_idx = (int *) component_idx_ELTS;
      }
    bool avoid_subsampling = (_avoid_subsampling)?true:false;
    float Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_optimal_scale(*region,scale_anchor,min_scale,max_scale,istream_ref,component_idx,avoid_subsampling);
    } catch (...) {
    if (_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_component_idx,component_idx_ELTS,0);
      }
    throw;
    }
    jfloat _Result = (jfloat) Result;
    if (_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_component_idx,component_idx_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jfloat) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1buffer_1surface(JNIEnv *__env, jobject _self, jobject _region, jint _background)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_int32 background = (kdu_int32) _background;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_buffer_surface(*region,background);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Check_1invalid_1scale_1code(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_invalid_scale_code();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1total_1composition_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (_dims == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_total_composition_dims(*dims);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1composition_1buffer(JNIEnv *__env, jobject _self, jobject _region, jboolean _working_only)
{
  try {
    if (_region == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool working_only = (_working_only)?true:false;
    kdu_compositor_buf *Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_composition_buffer(*region,working_only);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_compositor_buf_CLS,Kdu_compositor_buf_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Push_1composition_1buffer(JNIEnv *__env, jobject _self, jlong _custom_stamp, jint _custom_id_val)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_long custom_stamp = (kdu_long) _custom_stamp;
    int custom_id_val = (int) _custom_id_val;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->push_composition_buffer(custom_stamp,custom_id_val);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Replace_1composition_1queue_1tail(JNIEnv *__env, jobject _self, jlong _custom_stamp, jint _custom_id_val)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_long custom_stamp = (kdu_long) _custom_stamp;
    int custom_id_val = (int) _custom_id_val;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->replace_composition_queue_tail(custom_stamp,custom_id_val);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Pop_1composition_1buffer(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->pop_composition_buffer();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Inspect_1composition_1queue(JNIEnv *__env, jobject _self, jint _elt, jlongArray _custom_stamp, jintArray _custom_id_val)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    int elt = (int) _elt;
    kdu_long *custom_stamp = NULL;
    jlong *custom_stamp_ELTS = NULL;
    jsize custom_stamp_L = 0;
    if (_custom_stamp != NULL)
      {
        custom_stamp_ELTS = __env->GetLongArrayElements(_custom_stamp,NULL);
        custom_stamp_L = __env->GetArrayLength(_custom_stamp);
        custom_stamp = new kdu_long[custom_stamp_L];
        { for (int i=0; i<custom_stamp_L; i++) custom_stamp[i] = (kdu_long)(custom_stamp_ELTS[i]); }
      }
    int *custom_id_val = NULL;
    jint *custom_id_val_ELTS = NULL;
    if (_custom_id_val != NULL)
      {
        custom_id_val_ELTS = __env->GetIntArrayElements(_custom_id_val,NULL);
        custom_id_val = (int *) custom_id_val_ELTS;
      }
    kdu_compositor_buf *Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->inspect_composition_queue(elt,custom_stamp,custom_id_val);
    } catch (...) {
    if (_custom_stamp != NULL)
      {
        delete[] custom_stamp;
        __env->ReleaseLongArrayElements(_custom_stamp,custom_stamp_ELTS,0);
      }
    if (_custom_id_val != NULL)
      {
        __env->ReleaseIntArrayElements(_custom_id_val,custom_id_val_ELTS,0);
      }
    throw;
    }
    if (_custom_stamp != NULL)
      {
        for (int i=0; i<custom_stamp_L; i++) custom_stamp_ELTS[i] = (jlong)(custom_stamp[i]);
      }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_compositor_buf_CLS,Kdu_compositor_buf_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    if (_custom_stamp != NULL)
      {
        delete[] custom_stamp;
        __env->ReleaseLongArrayElements(_custom_stamp,custom_stamp_ELTS,0);
      }
    if (_custom_id_val != NULL)
      {
        __env->ReleaseIntArrayElements(_custom_id_val,custom_id_val_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Flush_1composition_1queue(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->flush_composition_queue();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1max_1quality_1layers(JNIEnv *__env, jobject _self, jint _quality_layers)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int quality_layers = (int) _quality_layers;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_quality_layers(quality_layers);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1max_1available_1quality_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_available_quality_layers();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1thread_1env(JNIEnv *__env, jobject _self, jobject _env, jobject _env_queue)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    kdu_thread_env *Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_thread_env(env,env_queue);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_thread_env_CLS,Kdu_thread_env_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Process(JNIEnv *__env, jobject _self, jint _suggested_increment, jobject _new_region, jint _flags)
{
  try {
    if (_new_region == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int suggested_increment = (int) _suggested_increment;
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    int flags = (int) _flags;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->process(suggested_increment,*new_region,flags);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Is_1processing_1complete(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_processing_complete();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Is_1codestream_1processing_1complete(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_codestream_processing_complete();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Refresh(JNIEnv *__env, jobject _self, jbooleanArray _new_imagery)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool *new_imagery = NULL;
    jboolean *new_imagery_ELTS = NULL;
    jsize new_imagery_L = 0;
    if (_new_imagery != NULL)
      {
        new_imagery_ELTS = __env->GetBooleanArrayElements(_new_imagery,NULL);
        new_imagery_L = __env->GetArrayLength(_new_imagery);
        new_imagery = new bool[new_imagery_L];
        { for (int i=0; i<new_imagery_L; i++) new_imagery[i] = (new_imagery_ELTS[i])?true:false; }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->refresh(new_imagery);
    } catch (...) {
    if (_new_imagery != NULL)
      {
        delete[] new_imagery;
        __env->ReleaseBooleanArrayElements(_new_imagery,new_imagery_ELTS,0);
      }
    throw;
    }
    if (_new_imagery != NULL)
      {
        for (int i=0; i<new_imagery_L; i++) new_imagery_ELTS[i] = (jboolean)(new_imagery[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_new_imagery != NULL)
      {
        delete[] new_imagery;
        __env->ReleaseBooleanArrayElements(_new_imagery,new_imagery_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Invalidate_1rect(JNIEnv *__env, jobject _self, jobject _region)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->invalidate_rect(*region);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Halt_1processing(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->halt_processing();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1num_1ilayers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_ilayers();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1ilayer(JNIEnv *__env, jobject _self, jobject _last_ilayer_ref, jint _layer_src, jint _direct_codestream_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    kdu_ilayer_ref *last_ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_last_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    int layer_src = (int) _layer_src;
    int direct_codestream_idx = (int) _direct_codestream_idx;
    kdu_ilayer_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_next_ilayer(*last_ilayer_ref,layer_src,direct_codestream_idx);
    jobject _Result = NULL;
      {
        kdu_ilayer_ref *Result = new kdu_ilayer_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_ilayer_ref_CLS,Kdu_ilayer_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1istream(JNIEnv *__env, jobject _self, jobject _last_istream_ref, jboolean _only_active_istreams, jboolean _no_duplicates, jint _codestream_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    kdu_istream_ref *last_istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_last_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    bool only_active_istreams = (_only_active_istreams)?true:false;
    bool no_duplicates = (_no_duplicates)?true:false;
    int codestream_idx = (int) _codestream_idx;
    kdu_istream_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_next_istream(*last_istream_ref,only_active_istreams,no_duplicates,codestream_idx);
    jobject _Result = NULL;
      {
        kdu_istream_ref *Result = new kdu_istream_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_istream_ref_CLS,Kdu_istream_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1visible_1ilayer(JNIEnv *__env, jobject _self, jobject _last_ilayer_ref, jobject _region)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_ilayer_ref *last_ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_last_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_ilayer_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_next_visible_ilayer(*last_ilayer_ref,*region);
    jobject _Result = NULL;
      {
        kdu_ilayer_ref *Result = new kdu_ilayer_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_ilayer_ref_CLS,Kdu_ilayer_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Access_1codestream(JNIEnv *__env, jobject _self, jobject _istream_ref)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    kdu_codestream Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_codestream(*istream_ref);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_codestream_CLS,Kdu_codestream_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1istream_1info(JNIEnv *__env, jobject _self, jobject _istream_ref, jintArray _codestream_idx, jobject _ilayer_ref, jintArray _components_in_use, jint _max_components_in_use, jintArray _principle_component_idx, jfloatArray _principle_component_scale_x, jfloatArray _principle_component_scale_y, jbooleanArray _transpose, jbooleanArray _vflip, jbooleanArray _hflip)
{
  try {
    if (_codestream_idx == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    kdu_ilayer_ref *ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr((_ilayer_ref==NULL)?((jlong) 0):(__env->GetLongField(_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1)));
    int *components_in_use = NULL;
    jint *components_in_use_ELTS = NULL;
    if (_components_in_use != NULL)
      {
        components_in_use_ELTS = __env->GetIntArrayElements(_components_in_use,NULL);
        components_in_use = (int *) components_in_use_ELTS;
      }
    int max_components_in_use = (int) _max_components_in_use;
    int *principle_component_idx = NULL;
    jint *principle_component_idx_ELTS = NULL;
    if (_principle_component_idx != NULL)
      {
        principle_component_idx_ELTS = __env->GetIntArrayElements(_principle_component_idx,NULL);
        principle_component_idx = (int *) principle_component_idx_ELTS;
      }
    float *principle_component_scale_x = NULL;
    jfloat *principle_component_scale_x_ELTS = NULL;
    if (_principle_component_scale_x != NULL)
      {
        principle_component_scale_x_ELTS = __env->GetFloatArrayElements(_principle_component_scale_x,NULL);
        principle_component_scale_x = (float *) principle_component_scale_x_ELTS;
      }
    float *principle_component_scale_y = NULL;
    jfloat *principle_component_scale_y_ELTS = NULL;
    if (_principle_component_scale_y != NULL)
      {
        principle_component_scale_y_ELTS = __env->GetFloatArrayElements(_principle_component_scale_y,NULL);
        principle_component_scale_y = (float *) principle_component_scale_y_ELTS;
      }
    bool *transpose = NULL;
    jboolean *transpose_ELTS = NULL;
    jsize transpose_L = 0;
    if (_transpose != NULL)
      {
        transpose_ELTS = __env->GetBooleanArrayElements(_transpose,NULL);
        transpose_L = __env->GetArrayLength(_transpose);
        transpose = new bool[transpose_L];
        { for (int i=0; i<transpose_L; i++) transpose[i] = (transpose_ELTS[i])?true:false; }
      }
    bool *vflip = NULL;
    jboolean *vflip_ELTS = NULL;
    jsize vflip_L = 0;
    if (_vflip != NULL)
      {
        vflip_ELTS = __env->GetBooleanArrayElements(_vflip,NULL);
        vflip_L = __env->GetArrayLength(_vflip);
        vflip = new bool[vflip_L];
        { for (int i=0; i<vflip_L; i++) vflip[i] = (vflip_ELTS[i])?true:false; }
      }
    bool *hflip = NULL;
    jboolean *hflip_ELTS = NULL;
    jsize hflip_L = 0;
    if (_hflip != NULL)
      {
        hflip_ELTS = __env->GetBooleanArrayElements(_hflip,NULL);
        hflip_L = __env->GetArrayLength(_hflip);
        hflip = new bool[hflip_L];
        { for (int i=0; i<hflip_L; i++) hflip[i] = (hflip_ELTS[i])?true:false; }
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_istream_info(*istream_ref,codestream_idx,ilayer_ref,components_in_use,max_components_in_use,principle_component_idx,principle_component_scale_x,principle_component_scale_y,transpose,vflip,hflip);
    } catch (...) {
    if (_components_in_use != NULL)
      {
        __env->ReleaseIntArrayElements(_components_in_use,components_in_use_ELTS,0);
      }
    if (_principle_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_principle_component_idx,principle_component_idx_ELTS,0);
      }
    if (_principle_component_scale_x != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_x,principle_component_scale_x_ELTS,0);
      }
    if (_principle_component_scale_y != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_y,principle_component_scale_y_ELTS,0);
      }
    if (_transpose != NULL)
      {
        delete[] transpose;
        __env->ReleaseBooleanArrayElements(_transpose,transpose_ELTS,0);
      }
    if (_vflip != NULL)
      {
        delete[] vflip;
        __env->ReleaseBooleanArrayElements(_vflip,vflip_ELTS,0);
      }
    if (_hflip != NULL)
      {
        delete[] hflip;
        __env->ReleaseBooleanArrayElements(_hflip,hflip_ELTS,0);
      }
    throw;
    }
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    if (_transpose != NULL)
      {
        for (int i=0; i<transpose_L; i++) transpose_ELTS[i] = (jboolean)(transpose[i]);
      }
    if (_vflip != NULL)
      {
        for (int i=0; i<vflip_L; i++) vflip_ELTS[i] = (jboolean)(vflip[i]);
      }
    if (_hflip != NULL)
      {
        for (int i=0; i<hflip_L; i++) hflip_ELTS[i] = (jboolean)(hflip[i]);
      }
    jint _Result = (jint) Result;
    if (_components_in_use != NULL)
      {
        __env->ReleaseIntArrayElements(_components_in_use,components_in_use_ELTS,0);
      }
    if (_principle_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_principle_component_idx,principle_component_idx_ELTS,0);
      }
    if (_principle_component_scale_x != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_x,principle_component_scale_x_ELTS,0);
      }
    if (_principle_component_scale_y != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_y,principle_component_scale_y_ELTS,0);
      }
    if (_transpose != NULL)
      {
        delete[] transpose;
        __env->ReleaseBooleanArrayElements(_transpose,transpose_ELTS,0);
      }
    if (_vflip != NULL)
      {
        delete[] vflip;
        __env->ReleaseBooleanArrayElements(_vflip,vflip_ELTS,0);
      }
    if (_hflip != NULL)
      {
        delete[] hflip;
        __env->ReleaseBooleanArrayElements(_hflip,hflip_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1ilayer_1info(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jintArray _layer_src, jintArray _direct_codestream_idx, jbooleanArray _is_opaque, jintArray _frame_idx, jintArray _field_handling)
{
  try {
    if ((_layer_src == NULL) || (_direct_codestream_idx == NULL) || (_is_opaque == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    kdu_ilayer_ref *ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    jint layer_src_ELT; __env->GetIntArrayRegion(_layer_src,0,1,&layer_src_ELT);
    int layer_src = (int) layer_src_ELT;
    jint direct_codestream_idx_ELT; __env->GetIntArrayRegion(_direct_codestream_idx,0,1,&direct_codestream_idx_ELT);
    int direct_codestream_idx = (int) direct_codestream_idx_ELT;
    jboolean is_opaque_ELT; __env->GetBooleanArrayRegion(_is_opaque,0,1,&is_opaque_ELT);
    bool is_opaque = (is_opaque_ELT)?true:false;
    int *frame_idx = NULL;
    jint *frame_idx_ELTS = NULL;
    if (_frame_idx != NULL)
      {
        frame_idx_ELTS = __env->GetIntArrayElements(_frame_idx,NULL);
        frame_idx = (int *) frame_idx_ELTS;
      }
    int *field_handling = NULL;
    jint *field_handling_ELTS = NULL;
    if (_field_handling != NULL)
      {
        field_handling_ELTS = __env->GetIntArrayElements(_field_handling,NULL);
        field_handling = (int *) field_handling_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ilayer_info(*ilayer_ref,layer_src,direct_codestream_idx,is_opaque,frame_idx,field_handling);
    } catch (...) {
    if (_frame_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_frame_idx,frame_idx_ELTS,0);
      }
    if (_field_handling != NULL)
      {
        __env->ReleaseIntArrayElements(_field_handling,field_handling_ELTS,0);
      }
    throw;
    }
    layer_src_ELT = (jint) layer_src;
  __env->SetIntArrayRegion(_layer_src,0,1,&layer_src_ELT);
    direct_codestream_idx_ELT = (jint) direct_codestream_idx;
  __env->SetIntArrayRegion(_direct_codestream_idx,0,1,&direct_codestream_idx_ELT);
    is_opaque_ELT = (jboolean) is_opaque;
  __env->SetBooleanArrayRegion(_is_opaque,0,1,&is_opaque_ELT);
    jint _Result = (jint) Result;
    if (_frame_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_frame_idx,frame_idx_ELTS,0);
      }
    if (_field_handling != NULL)
      {
        __env->ReleaseIntArrayElements(_field_handling,field_handling_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1ilayer_1stream(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jint _which, jint _codestream_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    kdu_ilayer_ref *ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    int which = (int) _which;
    int codestream_idx = (int) _codestream_idx;
    kdu_istream_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_ilayer_stream(*ilayer_ref,which,codestream_idx);
    jobject _Result = NULL;
      {
        kdu_istream_ref *Result = new kdu_istream_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_istream_ref_CLS,Kdu_istream_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1codestream_1packets(JNIEnv *__env, jobject _self, jobject _istream_ref, jobject _region, jlongArray _visible_precinct_samples, jlongArray _visible_packet_samples, jlongArray _max_visible_packet_samples, jint _max_region_layers)
{
  try {
    if ((_visible_precinct_samples == NULL) || (_visible_packet_samples == NULL) || (_max_visible_packet_samples == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    jlong visible_precinct_samples_ELT; __env->GetLongArrayRegion(_visible_precinct_samples,0,1,&visible_precinct_samples_ELT);
    kdu_long visible_precinct_samples = (kdu_long) visible_precinct_samples_ELT;
    jlong visible_packet_samples_ELT; __env->GetLongArrayRegion(_visible_packet_samples,0,1,&visible_packet_samples_ELT);
    kdu_long visible_packet_samples = (kdu_long) visible_packet_samples_ELT;
    jlong max_visible_packet_samples_ELT; __env->GetLongArrayRegion(_max_visible_packet_samples,0,1,&max_visible_packet_samples_ELT);
    kdu_long max_visible_packet_samples = (kdu_long) max_visible_packet_samples_ELT;
    int max_region_layers = (int) _max_region_layers;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_codestream_packets(*istream_ref,*region,visible_precinct_samples,visible_packet_samples,max_visible_packet_samples,max_region_layers);
    visible_precinct_samples_ELT = (jlong) visible_precinct_samples;
  __env->SetLongArrayRegion(_visible_precinct_samples,0,1,&visible_precinct_samples_ELT);
    visible_packet_samples_ELT = (jlong) visible_packet_samples;
  __env->SetLongArrayRegion(_visible_packet_samples,0,1,&visible_packet_samples_ELT);
    max_visible_packet_samples_ELT = (jlong) max_visible_packet_samples;
  __env->SetLongArrayRegion(_max_visible_packet_samples,0,1,&max_visible_packet_samples_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1point(JNIEnv *__env, jobject _self, jobject _point, jint _enumerator, jfloat _visibility_threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    int enumerator = (int) _enumerator;
    float visibility_threshold = (float) _visibility_threshold;
    kdu_ilayer_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->find_point(*point,enumerator,visibility_threshold);
    jobject _Result = NULL;
      {
        kdu_ilayer_ref *Result = new kdu_ilayer_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_ilayer_ref_CLS,Kdu_ilayer_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Map_1region(JNIEnv *__env, jobject _self, jobject _region, jobject _istream_ref)
{
  try {
    if (_region == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    kdu_istream_ref Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->map_region(*region,*istream_ref);
    jobject _Result = NULL;
      {
        kdu_istream_ref *Result = new kdu_istream_ref; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_istream_ref_CLS,Kdu_istream_ref_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Inverse_1map_1region(JNIEnv *__env, jobject _self, jobject _region, jobject _istream_ref)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->inverse_map_region(*region,*istream_ref);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1ilayer_1region(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jboolean _apply_cropping)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_ilayer_ref_CLS==NULL)
      Kdu_ilayer_ref_LOADER(__env);
    kdu_ilayer_ref *ilayer_ref = (kdu_ilayer_ref *)
      _kdu_long_to_addr(__env->GetLongField(_ilayer_ref,Kdu_ilayer_ref_PTR) & ~((jlong) 1));
    bool apply_cropping = (_apply_cropping)?true:false;
    kdu_dims Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->find_ilayer_region(*ilayer_ref,apply_cropping);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1istream_1region(JNIEnv *__env, jobject _self, jobject _istream_ref, jboolean _apply_cropping)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    bool apply_cropping = (_apply_cropping)?true:false;
    kdu_dims Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->find_istream_region(*istream_ref,apply_cropping);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1compatible_1jpip_1window(JNIEnv *__env, jobject _self, jobject _fsiz, jobject _roi_dims, jintArray _round_direction, jobject _region)
{
  try {
    if ((_fsiz == NULL) || (_roi_dims == NULL) || (_round_direction == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_coords *fsiz = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_fsiz,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims *roi_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_roi_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jint round_direction_ELT; __env->GetIntArrayRegion(_round_direction,0,1,&round_direction_ELT);
    int round_direction = (int) round_direction_ELT;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_compatible_jpip_window(*fsiz,*roi_dims,round_direction,*region);
    round_direction_ELT = (jint) round_direction;
  __env->SetIntArrayRegion(_round_direction,0,1,&round_direction_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Load_1metadata_1matches(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->load_metadata_matches();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Generate_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _anchor_flags, jobject _region, jint _num_box_types, jlongArray _box_types, jint _num_descend_box_types, jlongArray _descend_box_types, jboolean _priority, jint _max_descend_depth)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_window *client_window = (kdu_window *)
      _kdu_long_to_addr((_client_window==NULL)?((jlong) 0):(__env->GetLongField(_client_window,Kdu_window_PTR) & ~((jlong) 1)));
    int anchor_flags = (int) _anchor_flags;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    int num_box_types = (int) _num_box_types;
    kdu_uint32 *box_types = NULL;
    jlong *box_types_ELTS = NULL;
    jsize box_types_L = 0;
    if (_box_types != NULL)
      {
        box_types_ELTS = __env->GetLongArrayElements(_box_types,NULL);
        box_types_L = __env->GetArrayLength(_box_types);
        box_types = new kdu_uint32[box_types_L];
        { for (int i=0; i<box_types_L; i++) box_types[i] = (kdu_uint32)(box_types_ELTS[i]); }
      }
    int num_descend_box_types = (int) _num_descend_box_types;
    kdu_uint32 *descend_box_types = NULL;
    jlong *descend_box_types_ELTS = NULL;
    jsize descend_box_types_L = 0;
    if (_descend_box_types != NULL)
      {
        descend_box_types_ELTS = __env->GetLongArrayElements(_descend_box_types,NULL);
        descend_box_types_L = __env->GetArrayLength(_descend_box_types);
        descend_box_types = new kdu_uint32[descend_box_types_L];
        { for (int i=0; i<descend_box_types_L; i++) descend_box_types[i] = (kdu_uint32)(descend_box_types_ELTS[i]); }
      }
    bool priority = (_priority)?true:false;
    kdu_int32 max_descend_depth = (kdu_int32) _max_descend_depth;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->generate_metareq(client_window,anchor_flags,*region,num_box_types,box_types,num_descend_box_types,descend_box_types,priority,max_descend_depth);
    } catch (...) {
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    if (_descend_box_types != NULL)
      {
        delete[] descend_box_types;
        __env->ReleaseLongArrayElements(_descend_box_types,descend_box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types != NULL)
      {
        for (int i=0; i<box_types_L; i++) box_types_ELTS[i] = (jlong)(box_types[i]);
      }
    if (_descend_box_types != NULL)
      {
        for (int i=0; i<descend_box_types_L; i++) descend_box_types_ELTS[i] = (jlong)(descend_box_types[i]);
      }
    jint _Result = (jint) Result;
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    if (_descend_box_types != NULL)
      {
        delete[] descend_box_types;
        __env->ReleaseLongArrayElements(_descend_box_types,descend_box_types_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Configure_1overlays(JNIEnv *__env, jobject _self, jboolean _enable, jint _min_display_size, jfloat _blending_factor, jint _max_painting_border, jobject _dependency, jint _dependency_effect, jlongArray _aux_params, jint _num_aux_params)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool enable = (_enable)?true:false;
    int min_display_size = (int) _min_display_size;
    float blending_factor = (float) _blending_factor;
    int max_painting_border = (int) _max_painting_border;
    void *dependency_S = _kdu_long_to_addr((_dependency==NULL)?((jlong) 0):(__env->GetLongField(_dependency,Jpx_metanode_PTR)));
    jpx_metanode dependency = *((jpx_metanode *)(&dependency_S));
    int dependency_effect = (int) _dependency_effect;
    kdu_uint32 *aux_params = NULL;
    jlong *aux_params_ELTS = NULL;
    jsize aux_params_L = 0;
    if (_aux_params != NULL)
      {
        aux_params_ELTS = __env->GetLongArrayElements(_aux_params,NULL);
        aux_params_L = __env->GetArrayLength(_aux_params);
        aux_params = new kdu_uint32[aux_params_L];
        { for (int i=0; i<aux_params_L; i++) aux_params[i] = (kdu_uint32)(aux_params_ELTS[i]); }
      }
    int num_aux_params = (int) _num_aux_params;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->configure_overlays(enable,min_display_size,blending_factor,max_painting_border,dependency,dependency_effect,aux_params,num_aux_params);
    } catch (...) {
    if (_aux_params != NULL)
      {
        delete[] aux_params;
        __env->ReleaseLongArrayElements(_aux_params,aux_params_ELTS,0);
      }
    throw;
    }
    if (_aux_params != NULL)
      {
        for (int i=0; i<aux_params_L; i++) aux_params_ELTS[i] = (jlong)(aux_params[i]);
      }
    if (_aux_params != NULL)
      {
        delete[] aux_params;
        __env->ReleaseLongArrayElements(_aux_params,aux_params_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Update_1overlays(JNIEnv *__env, jobject _self, jboolean _start_from_scratch)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool start_from_scratch = (_start_from_scratch)?true:false;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->update_overlays(start_from_scratch);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Search_1overlays(JNIEnv *__env, jobject _self, jobject _point, jobject _istream_ref, jfloat _visibility_threshold)
{
  try {
    if (_istream_ref == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_istream_ref_CLS==NULL)
      Kdu_istream_ref_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_istream_ref *istream_ref = (kdu_istream_ref *)
      _kdu_long_to_addr(__env->GetLongField(_istream_ref,Kdu_istream_ref_PTR) & ~((jlong) 1));
    float visibility_threshold = (float) _visibility_threshold;
    jpx_metanode Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->search_overlays(*point,*istream_ref,visibility_threshold);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1overlay_1info(JNIEnv *__env, jobject _self, jintArray _total_roi_nodes, jintArray _hidden_roi_nodes)
{
  try {
    if ((_total_roi_nodes == NULL) || (_hidden_roi_nodes == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    jint total_roi_nodes_ELT; __env->GetIntArrayRegion(_total_roi_nodes,0,1,&total_roi_nodes_ELT);
    int total_roi_nodes = (int) total_roi_nodes_ELT;
    jint hidden_roi_nodes_ELT; __env->GetIntArrayRegion(_hidden_roi_nodes,0,1,&hidden_roi_nodes_ELT);
    int hidden_roi_nodes = (int) hidden_roi_nodes_ELT;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_overlay_info(total_roi_nodes,hidden_roi_nodes);
    total_roi_nodes_ELT = (jint) total_roi_nodes;
  __env->SetIntArrayRegion(_total_roi_nodes,0,1,&total_roi_nodes_ELT);
    hidden_roi_nodes_ELT = (jint) hidden_roi_nodes;
  __env->SetIntArrayRegion(_hidden_roi_nodes,0,1,&hidden_roi_nodes_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

bool _jni_delegator__kdu_region_compositor::custom_paint_overlay(kdu_compositor_buf *buffer, kdu_dims buffer_region, kdu_dims bounding_region, jpx_metanode node, kdu_overlay_params *painting_params, kdu_coords image_offset, kdu_coords subsampling, bool transpose, bool vflip, bool hflip, kdu_coords expansion_numerator, kdu_coords expansion_denominator, kdu_coords compositing_offset)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_overlay_params_CLS==NULL)
      Kdu_overlay_params_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    jobject _buffer = NULL;
    if (buffer != NULL)
      {
        _buffer = __env->NewObject(Kdu_compositor_buf_CLS,Kdu_compositor_buf_INIT_PTR,
                (jlong) _addr_to_kdu_long(buffer));
      }
    kdu_dims *_buffer_region_BUF = new kdu_dims; *_buffer_region_BUF = buffer_region;
    jobject _buffer_region = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_buffer_region_BUF))+1); // Enable auto-destroy
    kdu_dims *_bounding_region_BUF = new kdu_dims; *_bounding_region_BUF = bounding_region;
    jobject _bounding_region = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_bounding_region_BUF))+1); // Enable auto-destroy
    void *node_S = *((void **)(&(node)));
    jobject _node = __env->NewObject(Jpx_metanode_CLS,Jpx_metanode_INIT_PTR,
            (jlong) _addr_to_kdu_long(node_S));
    jobject _painting_params = NULL;
    if (painting_params != NULL)
      {
        _painting_params = __env->NewObject(Kdu_overlay_params_CLS,Kdu_overlay_params_INIT_PTR,
                (jlong) _addr_to_kdu_long(painting_params));
      }
    kdu_coords *_image_offset_BUF = new kdu_coords; *_image_offset_BUF = image_offset;
    jobject _image_offset = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_image_offset_BUF))+1); // Enable auto-destroy
    kdu_coords *_subsampling_BUF = new kdu_coords; *_subsampling_BUF = subsampling;
    jobject _subsampling = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_subsampling_BUF))+1); // Enable auto-destroy
    jboolean _transpose = (transpose)?true:false;
    jboolean _vflip = (vflip)?true:false;
    jboolean _hflip = (hflip)?true:false;
    kdu_coords *_expansion_numerator_BUF = new kdu_coords; *_expansion_numerator_BUF = expansion_numerator;
    jobject _expansion_numerator = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_expansion_numerator_BUF))+1); // Enable auto-destroy
    kdu_coords *_expansion_denominator_BUF = new kdu_coords; *_expansion_denominator_BUF = expansion_denominator;
    jobject _expansion_denominator = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_expansion_denominator_BUF))+1); // Enable auto-destroy
    kdu_coords *_compositing_offset_BUF = new kdu_coords; *_compositing_offset_BUF = compositing_offset;
    jobject _compositing_offset = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_compositing_offset_BUF))+1); // Enable auto-destroy
    jmethodID __Custom_paint_overlay_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Custom_paint_overlay","(Lkdu_jni/Kdu_compositor_buf;Lkdu_jni/Kdu_dims;Lkdu_jni/Kdu_dims;Lkdu_jni/Jpx_metanode;Lkdu_jni/Kdu_overlay_params;Lkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;ZZZLkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Custom_paint_overlay_ID,_buffer,_buffer_region,_bounding_region,_node,_painting_params,_image_offset,_subsampling,_transpose,_vflip,_hflip,_expansion_numerator,_expansion_denominator,_compositing_offset);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return (_Result)?true:false;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return (bool) 0;
}

kdu_compositor_buf *_jni_delegator__kdu_region_compositor::allocate_buffer(kdu_coords min_size, kdu_coords &actual_size, bool read_access_required)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *_min_size_BUF = new kdu_coords; *_min_size_BUF = min_size;
    jobject _min_size = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
            ((jlong) _addr_to_kdu_long(_min_size_BUF))+1); // Enable auto-destroy
    jobject _actual_size = NULL;
      _actual_size = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
              (jlong) _addr_to_kdu_long(&actual_size));
    jboolean _read_access_required = (read_access_required)?true:false;
    jmethodID __Allocate_buffer_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Allocate_buffer","(Lkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;Z)Lkdu_jni/Kdu_compositor_buf;");
    jobject _Result;
    _Result = __env->CallObjectMethod(_self,__Allocate_buffer_ID,_min_size,_actual_size,_read_access_required);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    kdu_compositor_buf *Result = (kdu_compositor_buf *)
      _kdu_long_to_addr((_Result==NULL)?((jlong) 0):(__env->GetLongField(_Result,Kdu_compositor_buf_PTR) & ~((jlong) 1)));
    return Result;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
  return NULL;
}

void _jni_delegator__kdu_region_compositor::delete_buffer(kdu_compositor_buf *buf)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    jobject _buf = NULL;
    if (buf != NULL)
      {
        _buf = __env->NewObject(Kdu_compositor_buf_CLS,Kdu_compositor_buf_INIT_PTR,
                (jlong) _addr_to_kdu_long(buf));
      }
    jmethodID __Delete_buffer_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Delete_buffer","(Lkdu_jni/Kdu_compositor_buf;)V");
    __env->CallVoidMethod(_self,__Delete_buffer_ID,_buf);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

/*****************************************************************************/
/*                          Kdu_region_decompressor                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_region_decompressor_CLS != NULL) return;
  try {
    Kdu_region_decompressor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_region_decompressor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_region_decompressor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_region_decompressor *self = (kdu_region_decompressor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_region_decompressor *self =
      new kdu_region_decompressor();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1safe_1expansion_1factors(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jdoubleArray _min_prod, jdoubleArray _max_x, jdoubleArray _max_y, jint _access_mode)
{
  try {
    if ((_min_prod == NULL) || (_max_x == NULL) || (_max_y == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = (kdu_channel_mapping *)
      _kdu_long_to_addr((_mapping==NULL)?((jlong) 0):(__env->GetLongField(_mapping,Kdu_channel_mapping_PTR) & ~((jlong) 1)));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    jdouble min_prod_ELT; __env->GetDoubleArrayRegion(_min_prod,0,1,&min_prod_ELT);
    double min_prod = (double) min_prod_ELT;
    jdouble max_x_ELT; __env->GetDoubleArrayRegion(_max_x,0,1,&max_x_ELT);
    double max_x = (double) max_x_ELT;
    jdouble max_y_ELT; __env->GetDoubleArrayRegion(_max_y,0,1,&max_y_ELT);
    double max_y = (double) max_y_ELT;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->get_safe_expansion_factors(codestream,mapping,single_component,discard_levels,min_prod,max_x,max_y,access_mode);
    min_prod_ELT = (jdouble) min_prod;
  __env->SetDoubleArrayRegion(_min_prod,0,1,&min_prod_ELT);
    max_x_ELT = (jdouble) max_x;
  __env->SetDoubleArrayRegion(_max_x,0,1,&max_x_ELT);
    max_y_ELT = (jdouble) max_y;
  __env->SetDoubleArrayRegion(_max_y,0,1,&max_y_ELT);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1render_1dims(JNIEnv *__env, jclass this_class, jobject _codestream_region, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_dims *codestream_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_codestream_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_subs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_subs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    Result_copy = kdu_region_decompressor::find_render_dims(*codestream_region,*ref_comp_subs,*ref_comp_expand_numerator,*ref_comp_expand_denominator);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1codestream_1point(JNIEnv *__env, jclass this_class, jobject _render_point, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *render_point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_render_point,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_subs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_subs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    bool allow_fractional_mapping = (_allow_fractional_mapping)?true:false;
    kdu_coords Result_copy;
    Result_copy = kdu_region_decompressor::find_codestream_point(*render_point,*ref_comp_subs,*ref_comp_expand_numerator,*ref_comp_expand_denominator,allow_fractional_mapping);
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1render_1point(JNIEnv *__env, jclass this_class, jobject _codestream_point, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *codestream_point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_codestream_point,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_subs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_subs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    bool allow_fractional_mapping = (_allow_fractional_mapping)?true:false;
    kdu_coords Result_copy;
    Result_copy = kdu_region_decompressor::find_render_point(*codestream_point,*ref_comp_subs,*ref_comp_expand_numerator,*ref_comp_expand_denominator,allow_fractional_mapping);
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1render_1cover_1dims(JNIEnv *__env, jclass this_class, jobject _codestream_dims, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_dims *codestream_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_codestream_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_subs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_subs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    bool allow_fractional_mapping = (_allow_fractional_mapping)?true:false;
    kdu_dims Result_copy;
    Result_copy = kdu_region_decompressor::find_render_cover_dims(*codestream_dims,*ref_comp_subs,*ref_comp_expand_numerator,*ref_comp_expand_denominator,allow_fractional_mapping);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1codestream_1cover_1dims(JNIEnv *__env, jclass this_class, jobject _render_dims, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_dims *render_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_render_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_subs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_subs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *ref_comp_expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_ref_comp_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    bool allow_fractional_mapping = (_allow_fractional_mapping)?true:false;
    kdu_dims Result_copy;
    Result_copy = kdu_region_decompressor::find_codestream_cover_dims(*render_dims,*ref_comp_subs,*ref_comp_expand_numerator,*ref_comp_expand_denominator,allow_fractional_mapping);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1rendered_1image_1dims__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1channel_1mapping_2IILkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2I(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jobject _expand_numerator, jobject _expand_denominator, jint _access_mode)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = (kdu_channel_mapping *)
      _kdu_long_to_addr((_mapping==NULL)?((jlong) 0):(__env->GetLongField(_mapping,Kdu_channel_mapping_PTR) & ~((jlong) 1)));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    kdu_coords *expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    kdu_dims Result_copy;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_rendered_image_dims(codestream,mapping,single_component,discard_levels,*expand_numerator,*expand_denominator,access_mode);
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1rendered_1image_1dims__(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_rendered_image_dims();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Set_1white_1stretch(JNIEnv *__env, jobject _self, jint _white_stretch_precision)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    int white_stretch_precision = (int) _white_stretch_precision;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_white_stretch(white_stretch_precision);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Set_1interpolation_1behaviour(JNIEnv *__env, jobject _self, jfloat _max_overshoot, jint _zero_overshoot_threshold)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    float max_overshoot = (float) _max_overshoot;
    int zero_overshoot_threshold = (int) _zero_overshoot_threshold;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_interpolation_behaviour(max_overshoot,zero_overshoot_threshold);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jint _max_layers, jobject _region, jobject _expand_numerator, jobject _expand_denominator, jboolean _precise, jint _access_mode, jboolean _fastest, jobject _env, jobject _env_queue)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = (kdu_channel_mapping *)
      _kdu_long_to_addr((_mapping==NULL)?((jlong) 0):(__env->GetLongField(_mapping,Kdu_channel_mapping_PTR) & ~((jlong) 1)));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_coords *expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    bool precise = (_precise)?true:false;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    bool fastest = (_fastest)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->start(codestream,mapping,single_component,discard_levels,max_layers,*region,*expand_numerator,*expand_denominator,precise,access_mode,fastest,env,env_queue);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3ILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jintArray _buffer, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region)
{
  try {
    if ((_incomplete_region == NULL) || (_new_region == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    kdu_coords *buffer_origin = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_buffer_origin,Kdu_coords_PTR) & ~((jlong) 1));
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims *incomplete_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_incomplete_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->process(buffer,*buffer_origin,row_gap,suggested_increment,max_region_pixels,*incomplete_region,*new_region);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3B_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2IZII(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jint _precision_bits, jboolean _measure_row_gap_in_pixels, jint _expand_monochrome, jint _fill_alpha)
{
  try {
    if ((_incomplete_region == NULL) || (_new_region == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int *channel_offsets = NULL;
    jint *channel_offsets_ELTS = NULL;
    if (_channel_offsets != NULL)
      {
        channel_offsets_ELTS = __env->GetIntArrayElements(_channel_offsets,NULL);
        channel_offsets = (int *) channel_offsets_ELTS;
      }
    int pixel_gap = (int) _pixel_gap;
    kdu_coords *buffer_origin = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_buffer_origin,Kdu_coords_PTR) & ~((jlong) 1));
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims *incomplete_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_incomplete_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    int precision_bits = (int) _precision_bits;
    bool measure_row_gap_in_pixels = (_measure_row_gap_in_pixels)?true:false;
    int expand_monochrome = (int) _expand_monochrome;
    int fill_alpha = (int) _fill_alpha;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->process(buffer,channel_offsets,pixel_gap,*buffer_origin,row_gap,suggested_increment,max_region_pixels,*incomplete_region,*new_region,precision_bits,measure_row_gap_in_pixels,expand_monochrome,fill_alpha);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3I_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2IZII(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jint _precision_bits, jboolean _measure_row_gap_in_pixels, jint _expand_monochrome, jint _fill_alpha)
{
  try {
    if ((_incomplete_region == NULL) || (_new_region == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_uint16 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    jsize buffer_L = 0;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer_L = __env->GetArrayLength(_buffer);
        buffer = new kdu_uint16[buffer_L];
        { for (int i=0; i<buffer_L; i++) buffer[i] = (kdu_uint16)(buffer_ELTS[i]); }
      }
    int *channel_offsets = NULL;
    jint *channel_offsets_ELTS = NULL;
    if (_channel_offsets != NULL)
      {
        channel_offsets_ELTS = __env->GetIntArrayElements(_channel_offsets,NULL);
        channel_offsets = (int *) channel_offsets_ELTS;
      }
    int pixel_gap = (int) _pixel_gap;
    kdu_coords *buffer_origin = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_buffer_origin,Kdu_coords_PTR) & ~((jlong) 1));
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims *incomplete_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_incomplete_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    int precision_bits = (int) _precision_bits;
    bool measure_row_gap_in_pixels = (_measure_row_gap_in_pixels)?true:false;
    int expand_monochrome = (int) _expand_monochrome;
    int fill_alpha = (int) _fill_alpha;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->process(buffer,channel_offsets,pixel_gap,*buffer_origin,row_gap,suggested_increment,max_region_pixels,*incomplete_region,*new_region,precision_bits,measure_row_gap_in_pixels,expand_monochrome,fill_alpha);
    } catch (...) {
    if (_buffer != NULL)
      {
        delete[] buffer;
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        for (int i=0; i<buffer_L; i++) buffer_ELTS[i] = (jint)(buffer[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        delete[] buffer;
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3F_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2ZZII(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jboolean _normalize, jboolean _measure_row_gap_in_pixels, jint _expand_monochrome, jint _fill_alpha)
{
  try {
    if ((_incomplete_region == NULL) || (_new_region == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int *channel_offsets = NULL;
    jint *channel_offsets_ELTS = NULL;
    if (_channel_offsets != NULL)
      {
        channel_offsets_ELTS = __env->GetIntArrayElements(_channel_offsets,NULL);
        channel_offsets = (int *) channel_offsets_ELTS;
      }
    int pixel_gap = (int) _pixel_gap;
    kdu_coords *buffer_origin = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_buffer_origin,Kdu_coords_PTR) & ~((jlong) 1));
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims *incomplete_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_incomplete_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool normalize = (_normalize)?true:false;
    bool measure_row_gap_in_pixels = (_measure_row_gap_in_pixels)?true:false;
    int expand_monochrome = (int) _expand_monochrome;
    int fill_alpha = (int) _fill_alpha;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->process(buffer,channel_offsets,pixel_gap,*buffer_origin,row_gap,suggested_increment,max_region_pixels,*incomplete_region,*new_region,normalize,measure_row_gap_in_pixels,expand_monochrome,fill_alpha);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Finish(JNIEnv *__env, jobject _self, jintArray _failure_exception, jboolean _do_cs_terminate)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    kdu_exception *failure_exception = NULL;
    jint *failure_exception_ELTS = NULL;
    jsize failure_exception_L = 0;
    if (_failure_exception != NULL)
      {
        failure_exception_ELTS = __env->GetIntArrayElements(_failure_exception,NULL);
        failure_exception_L = __env->GetArrayLength(_failure_exception);
        failure_exception = new kdu_exception[failure_exception_L];
        { for (int i=0; i<failure_exception_L; i++) failure_exception[i] = (kdu_exception)(failure_exception_ELTS[i]); }
      }
    bool do_cs_terminate = (_do_cs_terminate)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->finish(failure_exception,do_cs_terminate);
    } catch (...) {
    if (_failure_exception != NULL)
      {
        delete[] failure_exception;
        __env->ReleaseIntArrayElements(_failure_exception,failure_exception_ELTS,0);
      }
    throw;
    }
    if (_failure_exception != NULL)
      {
        for (int i=0; i<failure_exception_L; i++) failure_exception_ELTS[i] = (jint)(failure_exception[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_failure_exception != NULL)
      {
        delete[] failure_exception;
        __env->ReleaseIntArrayElements(_failure_exception,failure_exception_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                              Kdu_resolution                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_resolution_CLS != NULL) return;
  try {
    Kdu_resolution_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1next(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.access_next();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_resolution_CLS,Kdu_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Which(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.which();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1dwt_1level(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_dwt_level();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (_dims == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    self.get_dims(*dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1valid_1precincts(JNIEnv *__env, jobject _self, jobject _indices)
{
  try {
    if (_indices == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    self.get_valid_precincts(*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Open_1precinct(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_precinct Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.open_precinct(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_precinct_CLS,Kdu_precinct_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1id(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_id(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1relevance(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    double Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_relevance(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jdouble _Result = (jdouble) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jdouble) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1packets(JNIEnv *__env, jobject _self, jobject _precinct_idx, jobject _env, jboolean _parse_if_necessary)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool parse_if_necessary = (_parse_if_necessary)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_packets(*precinct_idx,env,parse_if_necessary);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1samples(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_samples(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1node(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    kdu_node Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.access_node();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_node_CLS,Kdu_node_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1valid_1band_1indices(JNIEnv *__env, jobject _self, jintArray _min_idx)
{
  try {
    if (_min_idx == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    jint min_idx_ELT; __env->GetIntArrayRegion(_min_idx,0,1,&min_idx_ELT);
    int min_idx = (int) min_idx_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_valid_band_indices(min_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    min_idx_ELT = (jint) min_idx;
  __env->SetIntArrayRegion(_min_idx,0,1,&min_idx_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1subband(JNIEnv *__env, jobject _self, jint _band_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int band_idx = (int) _band_idx;
    kdu_subband Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.access_subband(band_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_subband_CLS,Kdu_subband_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1reversible(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_reversible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Propagate_1roi(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.propagate_roi();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                               Kdu_roi_image                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1image_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_roi_image_CLS != NULL) return;
  try {
    Kdu_roi_image_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1image_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_roi_image_CLS==NULL)
      Kdu_roi_image_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_roi_image_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_roi_image_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_roi_image *self = (kdu_roi_image *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1roi_1image_Acquire_1node(JNIEnv *__env, jobject _self, jint _component, jobject _tile_region)
{
  try {
    if (Kdu_roi_image_CLS==NULL)
      Kdu_roi_image_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int component = (int) _component;
    kdu_dims *tile_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_tile_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_roi_node *Result;
    kdu_roi_image *self = (kdu_roi_image *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_roi_image_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->acquire_node(component,*tile_region);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_roi_node_CLS,Kdu_roi_node_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                               Kdu_roi_node                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_roi_node_CLS != NULL) return;
  try {
    Kdu_roi_node_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_roi_node_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_roi_node_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_roi_node *self = (kdu_roi_node *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Release(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    kdu_roi_node *self = (kdu_roi_node *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_roi_node_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->release();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Pull(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _width)
{
  try {
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int width = (int) _width;
    try { // So we can clean up temporary arrays
    kdu_roi_node *self = (kdu_roi_node *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_roi_node_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->pull(buf,width);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                               Kdu_run_queue                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_run_queue_CLS != NULL) return;
  try {
    Kdu_run_queue_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_run_queue_CLS==NULL)
      Kdu_run_queue_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_run_queue_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_run_queue_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_run_queue *self = (kdu_run_queue *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1run_1queue_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_run_queue *self =
      new kdu_run_queue();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Activate(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_run_queue_CLS==NULL)
      Kdu_run_queue_LOADER(__env);
    kdu_run_queue *self = (kdu_run_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_run_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->activate();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Deactivate(JNIEnv *__env, jobject _self, jobject _caller)
{
  try {
    if (Kdu_run_queue_CLS==NULL)
      Kdu_run_queue_LOADER(__env);
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *caller = (kdu_thread_entity *)
      _kdu_long_to_addr((_caller==NULL)?((jlong) 0):(__env->GetLongField(_caller,Kdu_thread_entity_PTR) & ~((jlong) 1)));
    kdu_run_queue *self = (kdu_run_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_run_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->deactivate(caller);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                           Kdu_sample_allocator                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_sample_allocator_CLS != NULL) return;
  try {
    Kdu_sample_allocator_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_sample_allocator_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_sample_allocator_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_sample_allocator *self = (kdu_sample_allocator *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_sample_allocator *self =
      new kdu_sample_allocator();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Restart(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    kdu_sample_allocator *self = (kdu_sample_allocator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sample_allocator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->restart();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Finalize(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    kdu_sample_allocator *self = (kdu_sample_allocator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sample_allocator_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->finalize();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                             Kdu_sampled_range                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_sampled_range_CLS != NULL) return;
  try {
    Kdu_sampled_range_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_sampled_range_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_sampled_range_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_sampled_range *self = (kdu_sampled_range *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_sampled_range *self =
      new kdu_sampled_range();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__Lkdu_1jni_Kdu_1sampled_1range_2(JNIEnv *__env, jclass this_class, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    kdu_sampled_range *src = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_sampled_range_PTR) & ~((jlong) 1));
    kdu_sampled_range *self =
      new kdu_sampled_range(*src);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__I(JNIEnv *__env, jclass this_class, jint _val)
{
  try {
    int val = (int) _val;
    kdu_sampled_range *self =
      new kdu_sampled_range(val);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__II(JNIEnv *__env, jclass this_class, jint _from, jint _to)
{
  try {
    int from = (int) _from;
    int to = (int) _to;
    kdu_sampled_range *self =
      new kdu_sampled_range(from,to);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__III(JNIEnv *__env, jclass this_class, jint _from, jint _to, jint _step)
{
  try {
    int from = (int) _from;
    int to = (int) _to;
    int step = (int) _step;
    kdu_sampled_range *self =
      new kdu_sampled_range(from,to,step);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    bool Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_empty();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1from(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_from();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1to(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_to();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1step(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_step();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1remapping_1id(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int which = (int) _which;
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_remapping_id(which);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1context_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_context_type();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1from(JNIEnv *__env, jobject _self, jint _from)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int from = (int) _from;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_from(from);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1to(JNIEnv *__env, jobject _self, jint _to)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int to = (int) _to;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_to(to);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1step(JNIEnv *__env, jobject _self, jint _step)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int step = (int) _step;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_step(step);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1remapping_1id(JNIEnv *__env, jobject _self, jint _which, jint _id_val)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int which = (int) _which;
    int id_val = (int) _id_val;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_remapping_id(which,id_val);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1context_1type(JNIEnv *__env, jobject _self, jint _ctp)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int ctp = (int) _ctp;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_context_type(ctp);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                 Kdu_serve                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_serve_CLS != NULL) return;
  try {
    Kdu_serve_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_serve_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_serve_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_serve *self = (kdu_serve *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1serve_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_serve *self =
      new kdu_serve();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Initialize(JNIEnv *__env, jobject _self, jobject _target, jint _max_chunk_size, jint _chunk_prefix_bytes, jboolean _ignore_relevance_info)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    kdu_serve_target *target = (kdu_serve_target *)
      _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Kdu_serve_target_PTR) & ~((jlong) 1)));
    int max_chunk_size = (int) _max_chunk_size;
    int chunk_prefix_bytes = (int) _chunk_prefix_bytes;
    bool ignore_relevance_info = (_ignore_relevance_info)?true:false;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->initialize(target,max_chunk_size,chunk_prefix_bytes,ignore_relevance_info);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->destroy();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Set_1window(JNIEnv *__env, jobject _self, jobject _window, jobject _pref_updates, jobject _model_instructions, jboolean _is_stateless, jint _context_id)
{
  try {
    if (_window == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1));
    kdu_window_prefs *pref_updates = (kdu_window_prefs *)
      _kdu_long_to_addr((_pref_updates==NULL)?((jlong) 0):(__env->GetLongField(_pref_updates,Kdu_window_prefs_PTR) & ~((jlong) 1)));
    kdu_window_model *model_instructions = (kdu_window_model *)
      _kdu_long_to_addr((_model_instructions==NULL)?((jlong) 0):(__env->GetLongField(_model_instructions,Kdu_window_model_PTR) & ~((jlong) 1)));
    bool is_stateless = (_is_stateless)?true:false;
    int context_id = (int) _context_id;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_window(*window,pref_updates,model_instructions,is_stateless,context_id);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_Get_1window(JNIEnv *__env, jobject _self, jobject _window, jint _context_id)
{
  try {
    if (_window == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1));
    int context_id = (int) _context_id;
    bool Result;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_window(*window,context_id);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_Get_1image_1done(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    bool Result;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_image_done();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_Push_1extra_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _num_bytes)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->push_extra_data(data,num_bytes);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Window_1finished(JNIEnv *__env, jobject _self, jint _context_id)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    int context_id = (int) _context_id;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->window_finished(context_id);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                             Kdu_serve_target                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_serve_target_CLS != NULL) return;
  try {
    Kdu_serve_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_serve_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_serve_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_serve_target *self = (kdu_serve_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1codestream_1ranges(JNIEnv *__env, jobject _self, jintArray _num_ranges, jint _compositing_layer_idx)
{
  try {
    if (_num_ranges == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    jint num_ranges_ELT; __env->GetIntArrayRegion(_num_ranges,0,1,&num_ranges_ELT);
    int num_ranges = (int) num_ranges_ELT;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    int *Result;
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_codestream_ranges(num_ranges,compositing_layer_idx);
    num_ranges_ELT = (jint) num_ranges;
  __env->SetIntArrayRegion(_num_ranges,0,1,&num_ranges_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1codestream_1siz_1info(JNIEnv *__env, jobject _self, jint _codestream_id, jobject _image_dims, jobject _tile_partition, jobject _tile_indices, jintArray _num_components, jintArray _num_output_components, jintArray _max_discard_levels, jintArray _max_quality_layers, jobject _component_subs, jobject _output_component_subs)
{
  try {
    if ((_image_dims == NULL) || (_tile_partition == NULL) || (_tile_indices == NULL) || (_num_components == NULL) || (_num_output_components == NULL) || (_max_discard_levels == NULL) || (_max_quality_layers == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    kdu_dims *image_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_image_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *tile_partition = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_tile_partition,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *tile_indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_tile_indices,Kdu_dims_PTR) & ~((jlong) 1));
    jint num_components_ELT; __env->GetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    int num_components = (int) num_components_ELT;
    jint num_output_components_ELT; __env->GetIntArrayRegion(_num_output_components,0,1,&num_output_components_ELT);
    int num_output_components = (int) num_output_components_ELT;
    jint max_discard_levels_ELT; __env->GetIntArrayRegion(_max_discard_levels,0,1,&max_discard_levels_ELT);
    int max_discard_levels = (int) max_discard_levels_ELT;
    jint max_quality_layers_ELT; __env->GetIntArrayRegion(_max_quality_layers,0,1,&max_quality_layers_ELT);
    int max_quality_layers = (int) max_quality_layers_ELT;
    kdu_coords *component_subs = (kdu_coords *)
      _kdu_long_to_addr((_component_subs==NULL)?((jlong) 0):(__env->GetLongField(_component_subs,Kdu_coords_PTR) & ~((jlong) 1)));
    kdu_coords *output_component_subs = (kdu_coords *)
      _kdu_long_to_addr((_output_component_subs==NULL)?((jlong) 0):(__env->GetLongField(_output_component_subs,Kdu_coords_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_codestream_siz_info(codestream_id,*image_dims,*tile_partition,*tile_indices,num_components,num_output_components,max_discard_levels,max_quality_layers,component_subs,output_component_subs);
    num_components_ELT = (jint) num_components;
  __env->SetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    num_output_components_ELT = (jint) num_output_components;
  __env->SetIntArrayRegion(_num_output_components,0,1,&num_output_components_ELT);
    max_discard_levels_ELT = (jint) max_discard_levels;
  __env->SetIntArrayRegion(_max_discard_levels,0,1,&max_discard_levels_ELT);
    max_quality_layers_ELT = (jint) max_quality_layers;
  __env->SetIntArrayRegion(_max_quality_layers,0,1,&max_quality_layers_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1codestream_1rd_1info(JNIEnv *__env, jobject _self, jint _codestream_id, jintArray _num_layer_slopes, jintArray _num_layer_lengths, jintArray _layer_log_slopes, jlongArray _layer_lengths)
{
  try {
    if ((_num_layer_slopes == NULL) || (_num_layer_lengths == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    jint num_layer_slopes_ELT; __env->GetIntArrayRegion(_num_layer_slopes,0,1,&num_layer_slopes_ELT);
    int num_layer_slopes = (int) num_layer_slopes_ELT;
    jint num_layer_lengths_ELT; __env->GetIntArrayRegion(_num_layer_lengths,0,1,&num_layer_lengths_ELT);
    int num_layer_lengths = (int) num_layer_lengths_ELT;
    int *layer_log_slopes = NULL;
    jint *layer_log_slopes_ELTS = NULL;
    if (_layer_log_slopes != NULL)
      {
        layer_log_slopes_ELTS = __env->GetIntArrayElements(_layer_log_slopes,NULL);
        layer_log_slopes = (int *) layer_log_slopes_ELTS;
      }
    kdu_long *layer_lengths = NULL;
    jlong *layer_lengths_ELTS = NULL;
    jsize layer_lengths_L = 0;
    if (_layer_lengths != NULL)
      {
        layer_lengths_ELTS = __env->GetLongArrayElements(_layer_lengths,NULL);
        layer_lengths_L = __env->GetArrayLength(_layer_lengths);
        layer_lengths = new kdu_long[layer_lengths_L];
        { for (int i=0; i<layer_lengths_L; i++) layer_lengths[i] = (kdu_long)(layer_lengths_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_codestream_rd_info(codestream_id,num_layer_slopes,num_layer_lengths,layer_log_slopes,layer_lengths);
    } catch (...) {
    if (_layer_log_slopes != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_log_slopes,layer_log_slopes_ELTS,0);
      }
    if (_layer_lengths != NULL)
      {
        delete[] layer_lengths;
        __env->ReleaseLongArrayElements(_layer_lengths,layer_lengths_ELTS,0);
      }
    throw;
    }
    num_layer_slopes_ELT = (jint) num_layer_slopes;
  __env->SetIntArrayRegion(_num_layer_slopes,0,1,&num_layer_slopes_ELT);
    num_layer_lengths_ELT = (jint) num_layer_lengths;
  __env->SetIntArrayRegion(_num_layer_lengths,0,1,&num_layer_lengths_ELT);
    if (_layer_lengths != NULL)
      {
        for (int i=0; i<layer_lengths_L; i++) layer_lengths_ELTS[i] = (jlong)(layer_lengths[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_layer_log_slopes != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_log_slopes,layer_log_slopes_ELTS,0);
      }
    if (_layer_lengths != NULL)
      {
        delete[] layer_lengths;
        __env->ReleaseLongArrayElements(_layer_lengths,layer_lengths_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1serve_1target_Attach_1to_1codestream(JNIEnv *__env, jobject _self, jint _codestream_id, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    kdu_codestream Result;
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->attach_to_codestream(codestream_id,thread_handle);
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_codestream_CLS,Kdu_codestream_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Detach_1from_1codestream(JNIEnv *__env, jobject _self, jint _codestream_id, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->detach_from_codestream(codestream_id,thread_handle);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Lock_1codestreams(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->lock_codestreams(num_codestreams,codestream_indices,thread_handle);
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    throw;
    }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Release_1codestreams(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->release_codestreams(num_codestreams,codestream_indices,thread_handle);
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    throw;
    }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1serve_1target_Access_1context(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    if (Kdu_window_context_CLS==NULL)
      Kdu_window_context_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    kdu_window_context Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_context(context_type,context_idx,remapping_ids);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Kdu_window_context_CLS,Kdu_window_context_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_1target_Find_1roi(JNIEnv *__env, jobject _self, jint _stream_id, jstring _roi_name)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int stream_id = (int) _stream_id;
    const char *roi_name = NULL;
    if (_roi_name != NULL)
      {
        roi_name = __env->GetStringUTFChars(_roi_name,NULL);
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_roi(stream_id,roi_name);
    } catch (...) {
    if (_roi_name != NULL)
      {
        __env->ReleaseStringUTFChars(_roi_name,roi_name);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_roi_name != NULL)
      {
        __env->ReleaseStringUTFChars(_roi_name,roi_name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1roi_1details(JNIEnv *__env, jobject _self, jint _index, jobject _resolution, jobject _region)
{
  try {
    if ((_resolution == NULL) || (_region == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int index = (int) _index;
    kdu_coords *resolution = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_resolution,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    const char * Result;
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_roi_details(index,*resolution,*region);
    jstring _Result = __env->NewStringUTF(Result);
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_servex                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_servex_CLS != NULL) return;
  try {
    Kdu_servex_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_servex_CLS==NULL)
      Kdu_servex_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_servex_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_servex_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_servex *self = (kdu_servex *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1servex_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_servex *self =
      new kdu_servex();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Open(JNIEnv *__env, jobject _self, jstring _filename, jint _phld_threshold, jint _per_client_cache, jlong _cache_fp, jboolean _cache_exists, jlong _sub_start, jlong _sub_lim)
{
  try {
    if (Kdu_servex_CLS==NULL)
      Kdu_servex_LOADER(__env);
    const char *filename = NULL;
    if (_filename != NULL)
      {
        filename = __env->GetStringUTFChars(_filename,NULL);
      }
    int phld_threshold = (int) _phld_threshold;
    int per_client_cache = (int) _per_client_cache;
    FILE *cache_fp = (FILE *) _kdu_long_to_addr(_cache_fp);
    bool cache_exists = (_cache_exists)?true:false;
    kdu_long sub_start = (kdu_long) _sub_start;
    kdu_long sub_lim = (kdu_long) _sub_lim;
    try { // So we can clean up temporary arrays
    kdu_servex *self = (kdu_servex *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_servex_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(filename,phld_threshold,per_client_cache,cache_fp,cache_exists,sub_start,sub_lim);
    } catch (...) {
    if (_filename != NULL)
      {
        __env->ReleaseStringUTFChars(_filename,filename);
      }
    throw;
    }
    if (_filename != NULL)
      {
        __env->ReleaseStringUTFChars(_filename,filename);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_servex_CLS==NULL)
      Kdu_servex_LOADER(__env);
    kdu_servex *self = (kdu_servex *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_servex_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                          Kdu_simple_file_source                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_file_source_CLS != NULL) return;
  try {
    Kdu_simple_file_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_file_source_CLS==NULL)
      Kdu_simple_file_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_file_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_file_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_file_source *self = (kdu_simple_file_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_file_source *self =
      new kdu_simple_file_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1create__Ljava_lang_String_2Z(JNIEnv *__env, jclass this_class, jstring _fname, jboolean _allow_seeks)
{
  try {
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool allow_seeks = (_allow_seeks)?true:false;
    kdu_simple_file_source *self =
      new kdu_simple_file_source(fname,allow_seeks);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_file_source_CLS==NULL)
      Kdu_simple_file_source_LOADER(__env);
    bool Result;
    kdu_simple_file_source *self = (kdu_simple_file_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Open(JNIEnv *__env, jobject _self, jstring _fname, jboolean _allow_seeks, jboolean _return_on_failure)
{
  try {
    if (Kdu_simple_file_source_CLS==NULL)
      Kdu_simple_file_source_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool allow_seeks = (_allow_seeks)?true:false;
    bool return_on_failure = (_return_on_failure)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_simple_file_source *self = (kdu_simple_file_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open(fname,allow_seeks,return_on_failure);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                          Kdu_simple_file_target                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_file_target_CLS != NULL) return;
  try {
    Kdu_simple_file_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_file_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_file_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_file_target *self = (kdu_simple_file_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_file_target *self =
      new kdu_simple_file_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1create__Ljava_lang_String_2Z(JNIEnv *__env, jclass this_class, jstring _fname, jboolean _append_to_existing)
{
  try {
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool append_to_existing = (_append_to_existing)?true:false;
    kdu_simple_file_target *self =
      new kdu_simple_file_target(fname,append_to_existing);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    bool Result;
    kdu_simple_file_target *self = (kdu_simple_file_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Open(JNIEnv *__env, jobject _self, jstring _fname, jboolean _append_to_existing, jboolean _return_on_failure)
{
  try {
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool append_to_existing = (_append_to_existing)?true:false;
    bool return_on_failure = (_return_on_failure)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_simple_file_target *self = (kdu_simple_file_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open(fname,append_to_existing,return_on_failure);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Strip_1tail(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes)
{
  try {
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_simple_file_target *self = (kdu_simple_file_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->strip_tail(buf,num_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                          Kdu_simple_video_source                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_video_source_CLS != NULL) return;
  try {
    Kdu_simple_video_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_video_source_CLS==NULL)
      Kdu_simple_video_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_video_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_video_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_video_source *self = (kdu_simple_video_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_video_source *self =
      new kdu_simple_video_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1create__Ljava_lang_String_2_3J(JNIEnv *__env, jclass this_class, jstring _fname, jlongArray _flags)
{
  try {
    if (_flags == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    jlong flags_ELT; __env->GetLongArrayRegion(_flags,0,1,&flags_ELT);
    kdu_uint32 flags = (kdu_uint32) flags_ELT;
    kdu_simple_video_source *self =
      new kdu_simple_video_source(fname,flags);
    flags_ELT = (jlong) flags;
  __env->SetLongArrayRegion(_flags,0,1,&flags_ELT);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_video_source_CLS==NULL)
      Kdu_simple_video_source_LOADER(__env);
    bool Result;
    kdu_simple_video_source *self = (kdu_simple_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Open(JNIEnv *__env, jobject _self, jstring _fname, jlongArray _flags)
{
  try {
    if (_flags == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_simple_video_source_CLS==NULL)
      Kdu_simple_video_source_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    jlong flags_ELT; __env->GetLongArrayRegion(_flags,0,1,&flags_ELT);
    kdu_uint32 flags = (kdu_uint32) flags_ELT;
    try { // So we can clean up temporary arrays
    kdu_simple_video_source *self = (kdu_simple_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(fname,flags);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    flags_ELT = (jlong) flags;
  __env->SetLongArrayRegion(_flags,0,1,&flags_ELT);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                          Kdu_simple_video_target                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_video_target_CLS != NULL) return;
  try {
    Kdu_simple_video_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_video_target_CLS==NULL)
      Kdu_simple_video_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_video_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_video_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_video_target *self = (kdu_simple_video_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_video_target *self =
      new kdu_simple_video_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1create__Ljava_lang_String_2JJJ(JNIEnv *__env, jclass this_class, jstring _fname, jlong _timescale, jlong _frame_period, jlong _flags)
{
  try {
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    kdu_uint32 timescale = (kdu_uint32) _timescale;
    kdu_uint32 frame_period = (kdu_uint32) _frame_period;
    kdu_uint32 flags = (kdu_uint32) _flags;
    kdu_simple_video_target *self =
      new kdu_simple_video_target(fname,timescale,frame_period,flags);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_video_target_CLS==NULL)
      Kdu_simple_video_target_LOADER(__env);
    bool Result;
    kdu_simple_video_target *self = (kdu_simple_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Open(JNIEnv *__env, jobject _self, jstring _fname, jlong _timescale, jlong _frame_period, jlong _flags)
{
  try {
    if (Kdu_simple_video_target_CLS==NULL)
      Kdu_simple_video_target_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    kdu_uint32 timescale = (kdu_uint32) _timescale;
    kdu_uint32 frame_period = (kdu_uint32) _frame_period;
    kdu_uint32 flags = (kdu_uint32) _flags;
    try { // So we can clean up temporary arrays
    kdu_simple_video_target *self = (kdu_simple_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->open(fname,timescale,frame_period,flags);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                           Kdu_stripe_compressor                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_stripe_compressor_CLS != NULL) return;
  try {
    Kdu_stripe_compressor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_stripe_compressor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_stripe_compressor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_stripe_compressor *self = (kdu_stripe_compressor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_stripe_compressor *self =
      new kdu_stripe_compressor();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jint _num_layer_specs, jlongArray _layer_sizes, jintArray _layer_slopes, jint _min_slope_threshold, jboolean _no_prediction, jboolean _force_precise, jboolean _record_layer_info_in_comment, jdouble _size_tolerance, jint _num_components, jboolean _want_fastest, jobject _env, jobject _env_queue, jint _env_dbuf_height)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    jlong *layer_sizes_ELTS = NULL;
    jsize layer_sizes_L = 0;
    if (_layer_sizes != NULL)
      {
        layer_sizes_ELTS = __env->GetLongArrayElements(_layer_sizes,NULL);
        layer_sizes_L = __env->GetArrayLength(_layer_sizes);
        layer_sizes = new kdu_long[layer_sizes_L];
        { for (int i=0; i<layer_sizes_L; i++) layer_sizes[i] = (kdu_long)(layer_sizes_ELTS[i]); }
      }
    kdu_uint16 *layer_slopes = NULL;
    jint *layer_slopes_ELTS = NULL;
    jsize layer_slopes_L = 0;
    if (_layer_slopes != NULL)
      {
        layer_slopes_ELTS = __env->GetIntArrayElements(_layer_slopes,NULL);
        layer_slopes_L = __env->GetArrayLength(_layer_slopes);
        layer_slopes = new kdu_uint16[layer_slopes_L];
        { for (int i=0; i<layer_slopes_L; i++) layer_slopes[i] = (kdu_uint16)(layer_slopes_ELTS[i]); }
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (_no_prediction)?true:false;
    bool force_precise = (_force_precise)?true:false;
    bool record_layer_info_in_comment = (_record_layer_info_in_comment)?true:false;
    double size_tolerance = (double) _size_tolerance;
    int num_components = (int) _num_components;
    bool want_fastest = (_want_fastest)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int env_dbuf_height = (int) _env_dbuf_height;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance,num_components,want_fastest,env,env_queue,env_dbuf_height);
    } catch (...) {
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
    throw;
    }
    if (_layer_sizes != NULL)
      {
        for (int i=0; i<layer_sizes_L; i++) layer_sizes_ELTS[i] = (jlong)(layer_sizes[i]);
      }
    if (_layer_slopes != NULL)
      {
        for (int i=0; i<layer_slopes_L; i++) layer_slopes_ELTS[i] = (jint)(layer_slopes[i]);
      }
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Finish(JNIEnv *__env, jobject _self, jint _num_layer_specs, jlongArray _layer_sizes, jintArray _layer_slopes)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    jlong *layer_sizes_ELTS = NULL;
    jsize layer_sizes_L = 0;
    if (_layer_sizes != NULL)
      {
        layer_sizes_ELTS = __env->GetLongArrayElements(_layer_sizes,NULL);
        layer_sizes_L = __env->GetArrayLength(_layer_sizes);
        layer_sizes = new kdu_long[layer_sizes_L];
        { for (int i=0; i<layer_sizes_L; i++) layer_sizes[i] = (kdu_long)(layer_sizes_ELTS[i]); }
      }
    kdu_uint16 *layer_slopes = NULL;
    jint *layer_slopes_ELTS = NULL;
    jsize layer_slopes_L = 0;
    if (_layer_slopes != NULL)
      {
        layer_slopes_ELTS = __env->GetIntArrayElements(_layer_slopes,NULL);
        layer_slopes_L = __env->GetArrayLength(_layer_slopes);
        layer_slopes = new kdu_uint16[layer_slopes_L];
        { for (int i=0; i<layer_slopes_L; i++) layer_slopes[i] = (kdu_uint16)(layer_slopes_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->finish(num_layer_specs,layer_sizes,layer_slopes);
    } catch (...) {
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
    throw;
    }
    if (_layer_sizes != NULL)
      {
        for (int i=0; i<layer_sizes_L; i++) layer_sizes_ELTS[i] = (jlong)(layer_sizes[i]);
      }
    if (_layer_slopes != NULL)
      {
        for (int i=0; i<layer_slopes_L; i++) layer_slopes_ELTS[i] = (jint)(layer_slopes[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Get_1recommended_1stripe_1heights(JNIEnv *__env, jobject _self, jint _preferred_min_height, jint _absolute_max_height, jintArray _stripe_heights, jintArray _max_stripe_heights)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    int preferred_min_height = (int) _preferred_min_height;
    int absolute_max_height = (int) _absolute_max_height;
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *max_stripe_heights = NULL;
    jint *max_stripe_heights_ELTS = NULL;
    if (_max_stripe_heights != NULL)
      {
        max_stripe_heights_ELTS = __env->GetIntArrayElements(_max_stripe_heights,NULL);
        max_stripe_heights = (int *) max_stripe_heights_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_recommended_stripe_heights(preferred_min_height,absolute_max_height,stripe_heights,max_stripe_heights);
    } catch (...) {
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3B_3I_3I_3I_3I_3II(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3S_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jshortArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed_ELTS[i])?true:false; }
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3I_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed_ELTS[i])?true:false; }
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3F_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed_ELTS[i])?true:false; }
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                          Kdu_stripe_decompressor                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_stripe_decompressor_CLS != NULL) return;
  try {
    Kdu_stripe_decompressor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_stripe_decompressor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_stripe_decompressor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_stripe_decompressor *self = (kdu_stripe_decompressor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_stripe_decompressor *self =
      new kdu_stripe_decompressor();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jboolean _force_precise, jboolean _want_fastest, jobject _env, jobject _env_queue, jint _env_dbuf_height)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    bool force_precise = (_force_precise)?true:false;
    bool want_fastest = (_want_fastest)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int env_dbuf_height = (int) _env_dbuf_height;
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->start(codestream,force_precise,want_fastest,env,env_queue,env_dbuf_height);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Finish(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    bool Result;
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->finish();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Get_1recommended_1stripe_1heights(JNIEnv *__env, jobject _self, jint _preferred_min_height, jint _absolute_max_height, jintArray _stripe_heights, jintArray _max_stripe_heights)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    int preferred_min_height = (int) _preferred_min_height;
    int absolute_max_height = (int) _absolute_max_height;
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *max_stripe_heights = NULL;
    jint *max_stripe_heights_ELTS = NULL;
    if (_max_stripe_heights != NULL)
      {
        max_stripe_heights_ELTS = __env->GetIntArrayElements(_max_stripe_heights,NULL);
        max_stripe_heights = (int *) max_stripe_heights_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_recommended_stripe_heights(preferred_min_height,absolute_max_height,stripe_heights,max_stripe_heights);
    } catch (...) {
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3B_3I_3I_3I_3I_3I(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3S_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jshortArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed_ELTS[i])?true:false; }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3I_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed_ELTS[i])?true:false; }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3F_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed_ELTS[i])?true:false; }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Kdu_subband                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_subband_CLS != NULL) return;
  try {
    Kdu_subband_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1band_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_band_idx();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1subband_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_resolution_CLS,Kdu_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Is_1top_1level_1band(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.is_top_level_band();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1K_1max(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_K_max();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1K_1max_1prime(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_K_max_prime();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Get_1reversible(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_reversible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1subband_Get_1delta(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_delta();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jfloat _Result = (jfloat) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jfloat) 0;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1subband_Get_1msb_1wmse(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_msb_wmse();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jfloat _Result = (jfloat) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jfloat) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Get_1roi_1weight(JNIEnv *__env, jobject _self, jfloatArray _energy_weight)
{
  try {
    if (_energy_weight == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    jfloat energy_weight_ELT; __env->GetFloatArrayRegion(_energy_weight,0,1,&energy_weight_ELT);
    float energy_weight = (float) energy_weight_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_roi_weight(energy_weight);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    energy_weight_ELT = (jfloat) energy_weight;
  __env->SetFloatArrayRegion(_energy_weight,0,1,&energy_weight_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (_dims == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.get_dims(*dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1valid_1blocks(JNIEnv *__env, jobject _self, jobject _indices)
{
  try {
    if (_indices == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.get_valid_blocks(*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1block_1size(JNIEnv *__env, jobject _self, jobject _nominal_size, jobject _first_size)
{
  try {
    if ((_nominal_size == NULL) || (_first_size == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *nominal_size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_nominal_size,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *first_size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_first_size,Kdu_coords_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.get_block_size(*nominal_size,*first_size);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1block_1geometry(JNIEnv *__env, jobject _self, jbooleanArray _transpose, jbooleanArray _vflip, jbooleanArray _hflip)
{
  try {
    if ((_transpose == NULL) || (_vflip == NULL) || (_hflip == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    jboolean transpose_ELT; __env->GetBooleanArrayRegion(_transpose,0,1,&transpose_ELT);
    bool transpose = (transpose_ELT)?true:false;
    jboolean vflip_ELT; __env->GetBooleanArrayRegion(_vflip,0,1,&vflip_ELT);
    bool vflip = (vflip_ELT)?true:false;
    jboolean hflip_ELT; __env->GetBooleanArrayRegion(_hflip,0,1,&hflip_ELT);
    bool hflip = (hflip_ELT)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_block_geometry(transpose,vflip,hflip);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    transpose_ELT = (jboolean) transpose;
  __env->SetBooleanArrayRegion(_transpose,0,1,&transpose_ELT);
    vflip_ELT = (jboolean) vflip;
  __env->SetBooleanArrayRegion(_vflip,0,1,&vflip_ELT);
    hflip_ELT = (jboolean) hflip;
  __env->SetBooleanArrayRegion(_hflip,0,1,&hflip_ELT);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Block_1row_1generated(JNIEnv *__env, jobject _self, jint _block_height, jboolean _subband_finished, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int block_height = (int) _block_height;
    bool subband_finished = (_subband_finished)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.block_row_generated(block_height,subband_finished,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Attach_1block_1notifier(JNIEnv *__env, jobject _self, jobject _client_queue, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_queue *client_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_client_queue==NULL)?((jlong) 0):(__env->GetLongField(_client_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.attach_block_notifier(client_queue,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Advance_1block_1rows_1needed(JNIEnv *__env, jobject _self, jobject _client_queue, jlong _delta_rows_needed, jlong _quantum_bits, jlong _num_quantum_blocks, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_queue *client_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_client_queue==NULL)?((jlong) 0):(__env->GetLongField(_client_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    kdu_uint32 delta_rows_needed = (kdu_uint32) _delta_rows_needed;
    kdu_uint32 quantum_bits = (kdu_uint32) _quantum_bits;
    kdu_uint32 num_quantum_blocks = (kdu_uint32) _num_quantum_blocks;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.advance_block_rows_needed(client_queue,delta_rows_needed,quantum_bits,num_quantum_blocks,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Detach_1block_1notifier(JNIEnv *__env, jobject _self, jobject _client_queue, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_queue *client_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_client_queue==NULL)?((jlong) 0):(__env->GetLongField(_client_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.detach_block_notifier(client_queue,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1subband_Open_1block(JNIEnv *__env, jobject _self, jobject _block_idx, jintArray _return_tpart, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_coords *block_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_block_idx,Kdu_coords_PTR) & ~((jlong) 1));
    int *return_tpart = NULL;
    jint *return_tpart_ELTS = NULL;
    if (_return_tpart != NULL)
      {
        return_tpart_ELTS = __env->GetIntArrayElements(_return_tpart,NULL);
        return_tpart = (int *) return_tpart_ELTS;
      }
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_block *Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.open_block(*block_idx,return_tpart,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_return_tpart != NULL)
      {
        __env->ReleaseIntArrayElements(_return_tpart,return_tpart_ELTS,0);
      }
    throw;
    }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_block_CLS,Kdu_block_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    if (_return_tpart != NULL)
      {
        __env->ReleaseIntArrayElements(_return_tpart,return_tpart_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Close_1block(JNIEnv *__env, jobject _self, jobject _block, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.close_block(block,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1conservative_1slope_1threshold(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    kdu_uint16 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_conservative_slope_threshold();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

/*****************************************************************************/
/*                               Kdu_synthesis                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_synthesis_CLS != NULL) return;
  try {
    Kdu_synthesis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_synthesis_CLS==NULL)
      Kdu_synthesis_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_synthesis_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_synthesis_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_synthesis *self = (kdu_synthesis *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1create__Lkdu_1jni_Kdu_1node_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFILkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2I(JNIEnv *__env, jclass this_class, jobject _node, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jint _pull_offset, jobject _env, jobject _env_queue, jint _flags)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *node_S = _kdu_long_to_addr((_node==NULL)?((jlong) 0):(__env->GetLongField(_node,Kdu_node_PTR)));
    kdu_node node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    int flags = (int) _flags;
    kdu_synthesis *self =
      new kdu_synthesis(node,allocator,use_shorts,normalization,pull_offset,env,env_queue,flags);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1create__Lkdu_1jni_Kdu_1resolution_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2(JNIEnv *__env, jclass this_class, jobject _resolution, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _env, jobject _env_queue)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    void *resolution_S = _kdu_long_to_addr((_resolution==NULL)?((jlong) 0):(__env->GetLongField(_resolution,Kdu_resolution_PTR)));
    kdu_resolution resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_env_queue==NULL)?((jlong) 0):(__env->GetLongField(_env_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    kdu_synthesis *self =
      new kdu_synthesis(resolution,allocator,use_shorts,normalization,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                             Kdu_thread_entity                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_entity_CLS != NULL) return;
  try {
    Kdu_thread_entity_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_entity_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_entity_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_thread_entity *self = (kdu_thread_entity *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_thread_entity *self =
      new kdu_thread_entity();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1entity_New_1instance(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->new_instance();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_thread_entity_CLS,Kdu_thread_entity_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Is_1group_1owner(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_group_owner();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1thread_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_thread_id();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Check_1current_1thread(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->check_current_thread();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Change_1group_1owner_1thread(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->change_group_owner_thread();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Create(JNIEnv *__env, jobject _self, jlong _cpu_affinity, jboolean _also_set_owner_affinity)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_long cpu_affinity = (kdu_long) _cpu_affinity;
    bool also_set_owner_affinity = (_also_set_owner_affinity)?true:false;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->create(cpu_affinity,also_set_owner_affinity);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->destroy();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Set_1min_1thread_1concurrency(JNIEnv *__env, jobject _self, jint _min_concurrency)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int min_concurrency = (int) _min_concurrency;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_min_thread_concurrency(min_concurrency);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1num_1threads(JNIEnv *__env, jobject _self, jstring _domain_name)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    const char *domain_name = NULL;
    if (_domain_name != NULL)
      {
        domain_name = __env->GetStringUTFChars(_domain_name,NULL);
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_num_threads(domain_name);
    } catch (...) {
    if (_domain_name != NULL)
      {
        __env->ReleaseStringUTFChars(_domain_name,domain_name);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_domain_name != NULL)
      {
        __env->ReleaseStringUTFChars(_domain_name,domain_name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Add_1thread(JNIEnv *__env, jobject _self, jstring _domain_name)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    const char *domain_name = NULL;
    if (_domain_name != NULL)
      {
        domain_name = __env->GetStringUTFChars(_domain_name,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->add_thread(domain_name);
    } catch (...) {
    if (_domain_name != NULL)
      {
        __env->ReleaseStringUTFChars(_domain_name,domain_name);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_domain_name != NULL)
      {
        __env->ReleaseStringUTFChars(_domain_name,domain_name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Declare_1first_1owner_1wait_1safe(JNIEnv *__env, jobject _self, jboolean _is_safe)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool is_safe = (_is_safe)?true:false;
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->declare_first_owner_wait_safe(is_safe);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Set_1yield_1frequency(JNIEnv *__env, jobject _self, jint _worker_yield_freq)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int worker_yield_freq = (int) _worker_yield_freq;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_yield_frequency(worker_yield_freq);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1job_1count_1stats(JNIEnv *__env, jobject _self, jlongArray _group_owner_job_count)
{
  try {
    if (_group_owner_job_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    jlong group_owner_job_count_ELT; __env->GetLongArrayRegion(_group_owner_job_count,0,1,&group_owner_job_count_ELT);
    kdu_long group_owner_job_count = (kdu_long) group_owner_job_count_ELT;
    kdu_long Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_job_count_stats(group_owner_job_count);
    group_owner_job_count_ELT = (jlong) group_owner_job_count;
  __env->SetLongArrayRegion(_group_owner_job_count,0,1,&group_owner_job_count_ELT);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Attach_1queue(JNIEnv *__env, jobject _self, jobject _queue, jobject _super_queue, jstring _domain_name, jlong _min_sequencing_idx, jint _queue_flags)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    kdu_thread_queue *queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_queue==NULL)?((jlong) 0):(__env->GetLongField(_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    kdu_thread_queue *super_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_super_queue==NULL)?((jlong) 0):(__env->GetLongField(_super_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    const char *domain_name = NULL;
    if (_domain_name != NULL)
      {
        domain_name = __env->GetStringUTFChars(_domain_name,NULL);
      }
    kdu_long min_sequencing_idx = (kdu_long) _min_sequencing_idx;
    int queue_flags = (int) _queue_flags;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->attach_queue(queue,super_queue,domain_name,min_sequencing_idx,queue_flags);
    } catch (...) {
    if (_domain_name != NULL)
      {
        __env->ReleaseStringUTFChars(_domain_name,domain_name);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_domain_name != NULL)
      {
        __env->ReleaseStringUTFChars(_domain_name,domain_name);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Advance_1work_1domains(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->advance_work_domains();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1condition(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    if (Kdu_thread_entity_condition_CLS==NULL)
      Kdu_thread_entity_condition_LOADER(__env);
    kdu_thread_entity_condition *Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_condition();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_thread_entity_condition_CLS,Kdu_thread_entity_condition_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Wait_1for_1condition(JNIEnv *__env, jobject _self, jstring _debug_text)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    const char *debug_text = NULL;
    if (_debug_text != NULL)
      {
        debug_text = __env->GetStringUTFChars(_debug_text,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->wait_for_condition(debug_text);
    } catch (...) {
    if (_debug_text != NULL)
      {
        __env->ReleaseStringUTFChars(_debug_text,debug_text);
      }
    throw;
    }
    if (_debug_text != NULL)
      {
        __env->ReleaseStringUTFChars(_debug_text,debug_text);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Signal_1condition(JNIEnv *__env, jobject _self, jobject _cond)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    if (Kdu_thread_entity_condition_CLS==NULL)
      Kdu_thread_entity_condition_LOADER(__env);
    kdu_thread_entity_condition *cond = (kdu_thread_entity_condition *)
      _kdu_long_to_addr((_cond==NULL)?((jlong) 0):(__env->GetLongField(_cond,Kdu_thread_entity_condition_PTR) & ~((jlong) 1)));
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->signal_condition(cond);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Join(JNIEnv *__env, jobject _self, jobject _root_queue, jboolean _descendants_only, jintArray _exc_code)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    kdu_thread_queue *root_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_root_queue==NULL)?((jlong) 0):(__env->GetLongField(_root_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    bool descendants_only = (_descendants_only)?true:false;
    kdu_exception *exc_code = NULL;
    jint *exc_code_ELTS = NULL;
    jsize exc_code_L = 0;
    if (_exc_code != NULL)
      {
        exc_code_ELTS = __env->GetIntArrayElements(_exc_code,NULL);
        exc_code_L = __env->GetArrayLength(_exc_code);
        exc_code = new kdu_exception[exc_code_L];
        { for (int i=0; i<exc_code_L; i++) exc_code[i] = (kdu_exception)(exc_code_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->join(root_queue,descendants_only,exc_code);
    } catch (...) {
    if (_exc_code != NULL)
      {
        delete[] exc_code;
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    throw;
    }
    if (_exc_code != NULL)
      {
        for (int i=0; i<exc_code_L; i++) exc_code_ELTS[i] = (jint)(exc_code[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_exc_code != NULL)
      {
        delete[] exc_code;
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Terminate(JNIEnv *__env, jobject _self, jobject _root_queue, jboolean _descendants_only, jintArray _exc_code)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    kdu_thread_queue *root_queue = (kdu_thread_queue *)
      _kdu_long_to_addr((_root_queue==NULL)?((jlong) 0):(__env->GetLongField(_root_queue,Kdu_thread_queue_PTR) & ~((jlong) 1)));
    bool descendants_only = (_descendants_only)?true:false;
    kdu_exception *exc_code = NULL;
    jint *exc_code_ELTS = NULL;
    jsize exc_code_L = 0;
    if (_exc_code != NULL)
      {
        exc_code_ELTS = __env->GetIntArrayElements(_exc_code,NULL);
        exc_code_L = __env->GetArrayLength(_exc_code);
        exc_code = new kdu_exception[exc_code_L];
        { for (int i=0; i<exc_code_L; i++) exc_code[i] = (kdu_exception)(exc_code_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->terminate(root_queue,descendants_only,exc_code);
    } catch (...) {
    if (_exc_code != NULL)
      {
        delete[] exc_code;
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    throw;
    }
    if (_exc_code != NULL)
      {
        for (int i=0; i<exc_code_L; i++) exc_code_ELTS[i] = (jint)(exc_code[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_exc_code != NULL)
      {
        delete[] exc_code;
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Handle_1exception(JNIEnv *__env, jobject _self, jint _exc_code)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_exception exc_code = (kdu_exception) _exc_code;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->handle_exception(exc_code);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                        Kdu_thread_entity_condition                        */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_1condition_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_entity_condition_CLS != NULL) return;
  try {
    Kdu_thread_entity_condition_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_1condition_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_entity_condition_CLS==NULL)
      Kdu_thread_entity_condition_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_entity_condition_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_entity_condition_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_thread_entity_condition *self = (kdu_thread_entity_condition *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

/*****************************************************************************/
/*                              Kdu_thread_env                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_env_CLS != NULL) return;
  try {
    Kdu_thread_env_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_env_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_env_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_thread_env *self = (kdu_thread_env *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_thread_env *self =
      new kdu_thread_env();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1env_Get_1block(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_block *Result;
    kdu_thread_env *self = (kdu_thread_env *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_env_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_block();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_block_CLS,Kdu_block_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1env_Cs_1terminate(JNIEnv *__env, jobject _self, jobject _codestream, jintArray _exc_code)
{
  try {
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_exception *exc_code = NULL;
    jint *exc_code_ELTS = NULL;
    jsize exc_code_L = 0;
    if (_exc_code != NULL)
      {
        exc_code_ELTS = __env->GetIntArrayElements(_exc_code,NULL);
        exc_code_L = __env->GetArrayLength(_exc_code);
        exc_code = new kdu_exception[exc_code_L];
        { for (int i=0; i<exc_code_L; i++) exc_code[i] = (kdu_exception)(exc_code_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_thread_env *self = (kdu_thread_env *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_env_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->cs_terminate(codestream,exc_code);
    } catch (...) {
    if (_exc_code != NULL)
      {
        delete[] exc_code;
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    throw;
    }
    if (_exc_code != NULL)
      {
        for (int i=0; i<exc_code_L; i++) exc_code_ELTS[i] = (jint)(exc_code[i]);
      }
    jboolean _Result = (jboolean) Result;
    if (_exc_code != NULL)
      {
        delete[] exc_code;
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                             Kdu_thread_queue                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_queue_CLS != NULL) return;
  try {
    Kdu_thread_queue_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_queue_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_queue_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_thread_queue *self = (kdu_thread_queue *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_thread_queue *self =
      new kdu_thread_queue();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Is_1attached(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    bool Result;
    kdu_thread_queue *self = (kdu_thread_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_attached();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Force_1detach(JNIEnv *__env, jobject _self, jobject _caller)
{
  try {
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *caller = (kdu_thread_entity *)
      _kdu_long_to_addr((_caller==NULL)?((jlong) 0):(__env->GetLongField(_caller,Kdu_thread_entity_PTR) & ~((jlong) 1)));
    kdu_thread_queue *self = (kdu_thread_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->force_detach(caller);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Get_1sequence_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    kdu_long Result;
    kdu_thread_queue *self = (kdu_thread_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_sequence_idx();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Get_1max_1jobs(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    int Result;
    kdu_thread_queue *self = (kdu_thread_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_jobs();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Update_1dependencies(JNIEnv *__env, jobject _self, jint _new_dependencies, jint _delta_max_dependencies, jobject _caller)
{
  try {
    if (Kdu_thread_queue_CLS==NULL)
      Kdu_thread_queue_LOADER(__env);
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_int32 new_dependencies = (kdu_int32) _new_dependencies;
    kdu_int32 delta_max_dependencies = (kdu_int32) _delta_max_dependencies;
    kdu_thread_entity *caller = (kdu_thread_entity *)
      _kdu_long_to_addr((_caller==NULL)?((jlong) 0):(__env->GetLongField(_caller,Kdu_thread_entity_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_thread_queue *self = (kdu_thread_queue *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_queue_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->update_dependencies(new_dependencies,delta_max_dependencies,caller);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                          Kdu_thread_safe_message                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_safe_message_CLS != NULL) return;
  try {
    Kdu_thread_safe_message_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_safe_message_CLS==NULL)
      Kdu_thread_safe_message_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_safe_message_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_safe_message_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_thread_safe_message *self = (_aux_extended__kdu_thread_safe_message *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_thread_safe_message *self_delegator =(_jni_delegator__kdu_thread_safe_message *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_thread_safe_message *self =
      new _aux_extended__kdu_thread_safe_message();
    self->_delegator = new _jni_delegator__kdu_thread_safe_message(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_safe_message_CLS==NULL)
      Kdu_thread_safe_message_LOADER(__env);
    _aux_extended__kdu_thread_safe_message *self = (_aux_extended__kdu_thread_safe_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_safe_message_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_thread_safe_message *self_delegator = (_jni_delegator__kdu_thread_safe_message *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

void _jni_delegator__kdu_thread_safe_message::flush(bool end_of_message)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_thread_safe_message_CLS==NULL)
      Kdu_thread_safe_message_LOADER(__env);
    jboolean _end_of_message = (end_of_message)?true:false;
    jmethodID __Flush_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Flush","(Z)V");
    __env->CallVoidMethod(_self,__Flush_ID,_end_of_message);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

void _jni_delegator__kdu_thread_safe_message::start_message()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_thread_safe_message_CLS==NULL)
      Kdu_thread_safe_message_LOADER(__env);
    jmethodID __Start_message_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Start_message","()V");
    __env->CallVoidMethod(_self,__Start_message_ID);
    jthrowable __cbk_exc = __env->ExceptionOccurred();
    if (__cbk_exc != NULL)
      {
        kdu_exception __kdu_exc = KDU_NULL_EXCEPTION;
        if (__env->IsInstanceOf(__cbk_exc,
                 __env->FindClass("java/lang/OutOfMemoryError")))
          __kdu_exc = KDU_MEMORY_EXCEPTION;
        else
          {
            jclass __cbk_class = __env->FindClass("kdu_jni/KduException");
            if (__cbk_class != NULL)
              {
                __kdu_exc = KDU_CONVERTED_EXCEPTION;
                if (__env->IsInstanceOf(__cbk_exc,__cbk_class))
                  {
                    jfieldID field_id = __env->GetFieldID(__cbk_class,
                                          "kdu_exception_code","I");
                    if (field_id != NULL)
                      __kdu_exc = (kdu_exception)
                                __env->GetIntField(__cbk_exc,field_id);                  }
              }
          }
        __env->ExceptionClear();
        kdu_rethrow(__kdu_exc);
      }
    return;
  } catch(std::bad_alloc &exc) { throw exc; }
  catch(...) { }
  throw KDU_CONVERTED_EXCEPTION;
}

/*****************************************************************************/
/*                                Kdu_tiffdir                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_tiffdir_CLS != NULL) return;
  try {
    Kdu_tiffdir_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_tiffdir_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_tiffdir_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_tiffdir *self = (kdu_tiffdir *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_tiffdir *self =
      new kdu_tiffdir();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Init(JNIEnv *__env, jobject _self, jboolean _littlendian, jboolean _bigtiff)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool littlendian = (_littlendian)?true:false;
    bool bigtiff = (_bigtiff)?true:false;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(littlendian,bigtiff);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Opendir(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *src = (kdu_compressed_source *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->opendir(src);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1header(JNIEnv *__env, jobject _self, jobject _tgt, jlong _dir_offset)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *tgt = (kdu_compressed_target *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    kdu_long dir_offset = (kdu_long) _dir_offset;
    int Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->write_header(tgt,dir_offset);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Writedir(JNIEnv *__env, jobject _self, jobject _tgt, jlong _dir_offset)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *tgt = (kdu_compressed_target *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    kdu_long dir_offset = (kdu_long) _dir_offset;
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->writedir(tgt,dir_offset);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Is_1littlendian(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_littlendian();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Is_1native_1littlendian(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_native_littlendian();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1dirlength(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_long Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_dirlength();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1taglength(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_long Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_taglength(tag_type);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1fieldlength(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_fieldlength(tag_type);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Delete_1tag(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->delete_tag(tag_type);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Open_1tag(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint32 Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open_tag(tag_type);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3B(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jbyteArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_long length = (kdu_long) _length;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    jlong _Result = (jlong) Result;
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3I(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jintArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_long length = (kdu_long) _length;
    kdu_uint16 *data = NULL;
    jint *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetIntArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_uint16[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_uint16)(data_ELTS[i]); }
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jint)(data[i]);
      }
    jlong _Result = (jlong) Result;
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3D(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jdoubleArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_long length = (kdu_long) _length;
    double *data = NULL;
    jdouble *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetDoubleArrayElements(_data,NULL);
        data = (double *) data_ELTS;
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    jlong _Result = (jlong) Result;
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3J(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jlongArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_long length = (kdu_long) _length;
    kdu_long *data = NULL;
    jlong *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetLongArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_long[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_long)(data_ELTS[i]); }
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jlong)(data[i]);
      }
    jlong _Result = (jlong) Result;
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Create_1tag(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->create_tag(tag_type);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3B(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jbyteArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3I(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jintArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint16 *data = NULL;
    jint *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetIntArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_uint16[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_uint16)(data_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jint)(data[i]);
      }
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3D(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jdoubleArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    double *data = NULL;
    jdouble *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetDoubleArrayElements(_data,NULL);
        data = (double *) data_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3J(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jlongArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_long *data = NULL;
    jlong *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetLongArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_long[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_long)(data_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jlong)(data[i]);
      }
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI(JNIEnv *__env, jobject _self, jlong _tag_type, jint _val16)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint16 val16 = (kdu_uint16) _val16;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_tag(tag_type,val16);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JD(JNIEnv *__env, jobject _self, jlong _tag_type, jdouble _valdbl)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    double valdbl = (double) _valdbl;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_tag(tag_type,valdbl);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JJ(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _val64)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_long val64 = (kdu_long) _val64;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->write_tag(tag_type,val64);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Copy_1tag(JNIEnv *__env, jobject _self, jobject _src, jlong _tag_type)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_tiffdir *src = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_tiffdir_PTR) & ~((jlong) 1));
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_tag(*src,tag_type);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                 Kdu_tile                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_tile_CLS != NULL) return;
  try {
    Kdu_tile_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Close(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    self.close(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1tnum(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_tnum();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_Get_1tile_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result_copy = self.get_tile_idx();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1ycc(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_ycc();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Set_1components_1of_1interest(JNIEnv *__env, jobject _self, jint _num_components_of_interest, jintArray _components_of_interest)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int num_components_of_interest = (int) _num_components_of_interest;
    int *components_of_interest = NULL;
    jint *components_of_interest_ELTS = NULL;
    if (_components_of_interest != NULL)
      {
        components_of_interest_ELTS = __env->GetIntArrayElements(_components_of_interest,NULL);
        components_of_interest = (int *) components_of_interest_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    self.set_components_of_interest(num_components_of_interest,components_of_interest);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_components_of_interest != NULL)
      {
        __env->ReleaseIntArrayElements(_components_of_interest,components_of_interest_ELTS,0);
      }
    throw;
    }
    if (_components_of_interest != NULL)
      {
        __env->ReleaseIntArrayElements(_components_of_interest,components_of_interest_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1block_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jintArray _num_stage_inputs, jintArray _num_stage_outputs, jintArray _num_block_inputs, jintArray _num_block_outputs, jintArray _block_input_indices, jintArray _block_output_indices, jfloatArray _irrev_block_offsets, jintArray _rev_block_offsets, jintArray _stage_input_indices)
{
  try {
    if ((_num_stage_inputs == NULL) || (_num_stage_outputs == NULL) || (_num_block_inputs == NULL) || (_num_block_outputs == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    jint num_stage_inputs_ELT; __env->GetIntArrayRegion(_num_stage_inputs,0,1,&num_stage_inputs_ELT);
    int num_stage_inputs = (int) num_stage_inputs_ELT;
    jint num_stage_outputs_ELT; __env->GetIntArrayRegion(_num_stage_outputs,0,1,&num_stage_outputs_ELT);
    int num_stage_outputs = (int) num_stage_outputs_ELT;
    jint num_block_inputs_ELT; __env->GetIntArrayRegion(_num_block_inputs,0,1,&num_block_inputs_ELT);
    int num_block_inputs = (int) num_block_inputs_ELT;
    jint num_block_outputs_ELT; __env->GetIntArrayRegion(_num_block_outputs,0,1,&num_block_outputs_ELT);
    int num_block_outputs = (int) num_block_outputs_ELT;
    int *block_input_indices = NULL;
    jint *block_input_indices_ELTS = NULL;
    if (_block_input_indices != NULL)
      {
        block_input_indices_ELTS = __env->GetIntArrayElements(_block_input_indices,NULL);
        block_input_indices = (int *) block_input_indices_ELTS;
      }
    int *block_output_indices = NULL;
    jint *block_output_indices_ELTS = NULL;
    if (_block_output_indices != NULL)
      {
        block_output_indices_ELTS = __env->GetIntArrayElements(_block_output_indices,NULL);
        block_output_indices = (int *) block_output_indices_ELTS;
      }
    float *irrev_block_offsets = NULL;
    jfloat *irrev_block_offsets_ELTS = NULL;
    if (_irrev_block_offsets != NULL)
      {
        irrev_block_offsets_ELTS = __env->GetFloatArrayElements(_irrev_block_offsets,NULL);
        irrev_block_offsets = (float *) irrev_block_offsets_ELTS;
      }
    int *rev_block_offsets = NULL;
    jint *rev_block_offsets_ELTS = NULL;
    if (_rev_block_offsets != NULL)
      {
        rev_block_offsets_ELTS = __env->GetIntArrayElements(_rev_block_offsets,NULL);
        rev_block_offsets = (int *) rev_block_offsets_ELTS;
      }
    int *stage_input_indices = NULL;
    jint *stage_input_indices_ELTS = NULL;
    if (_stage_input_indices != NULL)
      {
        stage_input_indices_ELTS = __env->GetIntArrayElements(_stage_input_indices,NULL);
        stage_input_indices = (int *) stage_input_indices_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs,block_input_indices,block_output_indices,irrev_block_offsets,rev_block_offsets,stage_input_indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_block_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_input_indices,block_input_indices_ELTS,0);
      }
    if (_block_output_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_output_indices,block_output_indices_ELTS,0);
      }
    if (_irrev_block_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_block_offsets,irrev_block_offsets_ELTS,0);
      }
    if (_rev_block_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_block_offsets,rev_block_offsets_ELTS,0);
      }
    if (_stage_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_stage_input_indices,stage_input_indices_ELTS,0);
      }
    throw;
    }
    num_stage_inputs_ELT = (jint) num_stage_inputs;
  __env->SetIntArrayRegion(_num_stage_inputs,0,1,&num_stage_inputs_ELT);
    num_stage_outputs_ELT = (jint) num_stage_outputs;
  __env->SetIntArrayRegion(_num_stage_outputs,0,1,&num_stage_outputs_ELT);
    num_block_inputs_ELT = (jint) num_block_inputs;
  __env->SetIntArrayRegion(_num_block_inputs,0,1,&num_block_inputs_ELT);
    num_block_outputs_ELT = (jint) num_block_outputs;
  __env->SetIntArrayRegion(_num_block_outputs,0,1,&num_block_outputs_ELT);
    jboolean _Result = (jboolean) Result;
    if (_block_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_input_indices,block_input_indices_ELTS,0);
      }
    if (_block_output_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_output_indices,block_output_indices_ELTS,0);
      }
    if (_irrev_block_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_block_offsets,irrev_block_offsets_ELTS,0);
      }
    if (_rev_block_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_block_offsets,rev_block_offsets_ELTS,0);
      }
    if (_stage_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_stage_input_indices,stage_input_indices_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1matrix_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jfloatArray _coefficients)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    float *coefficients = NULL;
    jfloat *coefficients_ELTS = NULL;
    if (_coefficients != NULL)
      {
        coefficients_ELTS = __env->GetFloatArrayElements(_coefficients,NULL);
        coefficients = (float *) coefficients_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_matrix_info(stage_idx,block_idx,coefficients);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_coefficients,coefficients_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_coefficients,coefficients_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1rxform_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jintArray _coefficients, jintArray _active_outputs)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int *coefficients = NULL;
    jint *coefficients_ELTS = NULL;
    if (_coefficients != NULL)
      {
        coefficients_ELTS = __env->GetIntArrayElements(_coefficients,NULL);
        coefficients = (int *) coefficients_ELTS;
      }
    int *active_outputs = NULL;
    jint *active_outputs_ELTS = NULL;
    if (_active_outputs != NULL)
      {
        active_outputs_ELTS = __env->GetIntArrayElements(_active_outputs,NULL);
        active_outputs = (int *) active_outputs_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_rxform_info(stage_idx,block_idx,coefficients,active_outputs);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_coefficients,coefficients_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_coefficients,coefficients_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1dependency_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jbooleanArray _is_reversible, jfloatArray _irrev_coefficients, jfloatArray _irrev_offsets, jintArray _rev_coefficients, jintArray _rev_offsets, jintArray _active_outputs)
{
  try {
    if (_is_reversible == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    jboolean is_reversible_ELT; __env->GetBooleanArrayRegion(_is_reversible,0,1,&is_reversible_ELT);
    bool is_reversible = (is_reversible_ELT)?true:false;
    float *irrev_coefficients = NULL;
    jfloat *irrev_coefficients_ELTS = NULL;
    if (_irrev_coefficients != NULL)
      {
        irrev_coefficients_ELTS = __env->GetFloatArrayElements(_irrev_coefficients,NULL);
        irrev_coefficients = (float *) irrev_coefficients_ELTS;
      }
    float *irrev_offsets = NULL;
    jfloat *irrev_offsets_ELTS = NULL;
    if (_irrev_offsets != NULL)
      {
        irrev_offsets_ELTS = __env->GetFloatArrayElements(_irrev_offsets,NULL);
        irrev_offsets = (float *) irrev_offsets_ELTS;
      }
    int *rev_coefficients = NULL;
    jint *rev_coefficients_ELTS = NULL;
    if (_rev_coefficients != NULL)
      {
        rev_coefficients_ELTS = __env->GetIntArrayElements(_rev_coefficients,NULL);
        rev_coefficients = (int *) rev_coefficients_ELTS;
      }
    int *rev_offsets = NULL;
    jint *rev_offsets_ELTS = NULL;
    if (_rev_offsets != NULL)
      {
        rev_offsets_ELTS = __env->GetIntArrayElements(_rev_offsets,NULL);
        rev_offsets = (int *) rev_offsets_ELTS;
      }
    int *active_outputs = NULL;
    jint *active_outputs_ELTS = NULL;
    if (_active_outputs != NULL)
      {
        active_outputs_ELTS = __env->GetIntArrayElements(_active_outputs,NULL);
        active_outputs = (int *) active_outputs_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_dependency_info(stage_idx,block_idx,is_reversible,irrev_coefficients,irrev_offsets,rev_coefficients,rev_offsets,active_outputs);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_irrev_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_coefficients,irrev_coefficients_ELTS,0);
      }
    if (_irrev_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_offsets,irrev_offsets_ELTS,0);
      }
    if (_rev_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_coefficients,rev_coefficients_ELTS,0);
      }
    if (_rev_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_offsets,rev_offsets_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    throw;
    }
    is_reversible_ELT = (jboolean) is_reversible;
  __env->SetBooleanArrayRegion(_is_reversible,0,1,&is_reversible_ELT);
    jboolean _Result = (jboolean) Result;
    if (_irrev_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_coefficients,irrev_coefficients_ELTS,0);
      }
    if (_irrev_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_offsets,irrev_offsets_ELTS,0);
      }
    if (_rev_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_coefficients,rev_coefficients_ELTS,0);
      }
    if (_rev_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_offsets,rev_offsets_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1num_1components(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_num_components();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1num_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_num_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Parse_1all_1relevant_1packets(JNIEnv *__env, jobject _self, jboolean _start_from_scratch_if_possible, jobject _env)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    bool start_from_scratch_if_possible = (_start_from_scratch_if_possible)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.parse_all_relevant_packets(start_from_scratch_if_possible,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tile_Get_1parsed_1packet_1stats(JNIEnv *__env, jobject _self, jint _component_idx, jint _discard_levels, jint _num_layers, jlongArray _layer_bytes, jlongArray _layer_packets)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int component_idx = (int) _component_idx;
    int discard_levels = (int) _discard_levels;
    int num_layers = (int) _num_layers;
    kdu_long *layer_bytes = NULL;
    jlong *layer_bytes_ELTS = NULL;
    jsize layer_bytes_L = 0;
    if (_layer_bytes != NULL)
      {
        layer_bytes_ELTS = __env->GetLongArrayElements(_layer_bytes,NULL);
        layer_bytes_L = __env->GetArrayLength(_layer_bytes);
        layer_bytes = new kdu_long[layer_bytes_L];
        { for (int i=0; i<layer_bytes_L; i++) layer_bytes[i] = (kdu_long)(layer_bytes_ELTS[i]); }
      }
    kdu_long *layer_packets = NULL;
    jlong *layer_packets_ELTS = NULL;
    jsize layer_packets_L = 0;
    if (_layer_packets != NULL)
      {
        layer_packets_ELTS = __env->GetLongArrayElements(_layer_packets,NULL);
        layer_packets_L = __env->GetArrayLength(_layer_packets);
        layer_packets = new kdu_long[layer_packets_L];
        { for (int i=0; i<layer_packets_L; i++) layer_packets[i] = (kdu_long)(layer_packets_ELTS[i]); }
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_parsed_packet_stats(component_idx,discard_levels,num_layers,layer_bytes,layer_packets);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_packets != NULL)
      {
        delete[] layer_packets;
        __env->ReleaseLongArrayElements(_layer_packets,layer_packets_ELTS,0);
      }
    throw;
    }
    if (_layer_bytes != NULL)
      {
        for (int i=0; i<layer_bytes_L; i++) layer_bytes_ELTS[i] = (jlong)(layer_bytes[i]);
      }
    if (_layer_packets != NULL)
      {
        for (int i=0; i<layer_packets_L; i++) layer_packets_ELTS[i] = (jlong)(layer_packets[i]);
      }
    jlong _Result = (jlong) Result;
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_packets != NULL)
      {
        delete[] layer_packets;
        __env->ReleaseLongArrayElements(_layer_packets,layer_packets_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_Access_1component(JNIEnv *__env, jobject _self, jint _component_idx)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    int component_idx = (int) _component_idx;
    kdu_tile_comp Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.access_component(component_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_tile_comp_CLS,Kdu_tile_comp_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1tile_Find_1component_1gain_1info(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _restrict_to_interest)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool restrict_to_interest = (_restrict_to_interest)?true:false;
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.find_component_gain_info(comp_idx,restrict_to_interest);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jfloat _Result = (jfloat) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jfloat) 0;
}

/*****************************************************************************/
/*                               Kdu_tile_comp                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_tile_comp_CLS != NULL) return;
  try {
    Kdu_tile_comp_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1reversible(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_reversible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1subsampling(JNIEnv *__env, jobject _self, jobject _factors)
{
  try {
    if (_factors == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *factors = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_factors,Kdu_coords_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    self.get_subsampling(*factors);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1bit_1depth(JNIEnv *__env, jobject _self, jboolean _internal)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool internal = (_internal)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_bit_depth(internal);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1signed(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_signed();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1num_1resolutions(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_num_resolutions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Access_1resolution__I(JNIEnv *__env, jobject _self, jint _res_level)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    int res_level = (int) _res_level;
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.access_resolution(res_level);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_resolution_CLS,Kdu_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Access_1resolution__(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Kdu_resolution_CLS,Kdu_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_window                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_window_CLS != NULL) return;
  try {
    Kdu_window_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_window_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_window_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_window *self = (kdu_window *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_window *self =
      new kdu_window();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_Native_1create__Lkdu_1jni_Kdu_1window_2(JNIEnv *__env, jclass this_class, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *src = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_PTR) & ~((jlong) 1));
    kdu_window *self =
      new kdu_window(*src);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Init(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_empty();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Copy_1from(JNIEnv *__env, jobject _self, jobject _src, jboolean _copy_expansions)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *src = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_PTR) & ~((jlong) 1));
    bool copy_expansions = (_copy_expansions)?true:false;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_from(*src,copy_expansions);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Copy_1metareq_1from(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *src = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_PTR) & ~((jlong) 1));
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_metareq_from(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Metareq_1contains(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *rhs = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->metareq_contains(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Imagery_1contains(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *rhs = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->imagery_contains(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Contains(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *rhs = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->contains(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Imagery_1equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *rhs = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->imagery_equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (_rhs == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *rhs = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->equals(*rhs);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_resolution();
    jobject _Result = NULL;
      {
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_coords_CLS,Kdu_coords_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1resolution(JNIEnv *__env, jobject _self, jobject _resolution)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *resolution = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_resolution,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_resolution(*resolution);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_Get_1round_1direction(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_round_direction();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1round_1direction(JNIEnv *__env, jobject _self, jint _direction)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int direction = (int) _direction;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_round_direction(direction);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1region(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_region();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1region(JNIEnv *__env, jobject _self, jobject _region)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_region(*region);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1components(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_components();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_range_set_CLS,Kdu_range_set_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_codestreams();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_range_set_CLS,Kdu_range_set_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1contexts(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_contexts();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_range_set_CLS,Kdu_range_set_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Create_1context_1expansion(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int which = (int) _which;
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->create_context_expansion(which);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_range_set_CLS,Kdu_range_set_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1context_1expansion(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int which = (int) _which;
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_context_expansion(which);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_range_set_CLS,Kdu_range_set_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_Parse_1context(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    const char * Result;
    try { // So we can clean up temporary arrays
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->parse_context(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    jstring _Result = __env->NewStringUTF(Result);
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_Get_1max_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_max_layers();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1max_1layers(JNIEnv *__env, jobject _self, jint _val)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int val = (int) _val;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_layers(val);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Get_1metadata_1only(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_metadata_only();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1metadata_1only(JNIEnv *__env, jobject _self, jboolean _val)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    bool val = (_val)?true:false;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_metadata_only(val);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1metareq(JNIEnv *__env, jobject _self, jint _index)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int index = (int) _index;
    kdu_metareq *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_metareq(index);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Kdu_metareq_CLS,Kdu_metareq_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Init_1metareq(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init_metareq();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Add_1metareq(JNIEnv *__env, jobject _self, jlong _box_type, jint _qualifier, jboolean _priority, jint _byte_limit, jboolean _recurse, jlong _root_bin_id, jint _max_depth)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    bool priority = (_priority)?true:false;
    int byte_limit = (int) _byte_limit;
    bool recurse = (_recurse)?true:false;
    kdu_long root_bin_id = (kdu_long) _root_bin_id;
    int max_depth = (int) _max_depth;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->add_metareq(box_type,qualifier,priority,byte_limit,recurse,root_bin_id,max_depth);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_Parse_1metareq(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    const char * Result;
    try { // So we can clean up temporary arrays
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->parse_metareq(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    jstring _Result = __env->NewStringUTF(Result);
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                            Kdu_window_context                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1context_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_window_context_CLS != NULL) return;
  try {
    Kdu_window_context_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1context_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_context_CLS==NULL)
      Kdu_window_context_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_context_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Kdu_window_context_PARAM);
    kdu_window_context self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_window_context_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Kdu_window_context_PARAM,(jlong)(self_P));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1context_Get_1num_1members(JNIEnv *__env, jobject _self, jintArray _remapping_ids)
{
  try {
    if (Kdu_window_context_CLS==NULL)
      Kdu_window_context_LOADER(__env);
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_context_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Kdu_window_context_PARAM);
    kdu_window_context self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_num_members(remapping_ids);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_window_context_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Kdu_window_context_PARAM,(jlong)(self_P));
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1context_Get_1codestream(JNIEnv *__env, jobject _self, jintArray _remapping_ids, jint _member_idx)
{
  try {
    if (Kdu_window_context_CLS==NULL)
      Kdu_window_context_LOADER(__env);
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_context_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Kdu_window_context_PARAM);
    kdu_window_context self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_codestream(remapping_ids,member_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_window_context_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Kdu_window_context_PARAM,(jlong)(self_P));
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1context_Get_1components(JNIEnv *__env, jobject _self, jintArray _remapping_ids, jint _member_idx, jintArray _num_components)
{
  try {
    if (_num_components == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_context_CLS==NULL)
      Kdu_window_context_LOADER(__env);
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    jint num_components_ELT; __env->GetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    int num_components = (int) num_components_ELT;
    const int *Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_context_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Kdu_window_context_PARAM);
    kdu_window_context self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.get_components(remapping_ids,member_idx,num_components);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_window_context_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Kdu_window_context_PARAM,(jlong)(self_P));
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    num_components_ELT = (jint) num_components;
  __env->SetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    jlong _Result = (jlong) _addr_to_kdu_long(Result);
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1context_Perform_1remapping(JNIEnv *__env, jobject _self, jintArray _remapping_ids, jint _member_idx, jobject _resolution, jobject _region)
{
  try {
    if ((_resolution == NULL) || (_region == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_context_CLS==NULL)
      Kdu_window_context_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    kdu_coords *resolution = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_resolution,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_context_PTR) & ~((jlong) 1));
    kdu_int64 self_P = (kdu_int64)__env->GetLongField(_self,Kdu_window_context_PARAM);
    kdu_window_context self;
    ((void **) &self)[0] = self_S;
    ((kdu_int64 *) &self)[1] = self_P;
    Result = self.perform_remapping(remapping_ids,member_idx,*resolution,*region);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_window_context_PTR,(jlong) _addr_to_kdu_long(self_S));
self_P = ((kdu_int64 *)(&(self)))[1];
      __env->SetLongField(_self,Kdu_window_context_PARAM,(jlong)(self_P));
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                             Kdu_window_model                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_window_model_CLS != NULL) return;
  try {
    Kdu_window_model_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_window_model_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_window_model_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_window_model *self = (kdu_window_model *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_window_model *self =
      new kdu_window_model();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1create__Lkdu_1jni_Kdu_1window_1model_2(JNIEnv *__env, jclass this_class, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    kdu_window_model *src = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_model_PTR) & ~((jlong) 1));
    kdu_window_model *self =
      new kdu_window_model(*src);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Copy_1from(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    kdu_window_model *src = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_model_PTR) & ~((jlong) 1));
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_from(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Clear(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->clear();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Init__Z(JNIEnv *__env, jobject _self, jboolean _stateless)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    bool stateless = (_stateless)?true:false;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(stateless);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Init__ZZI(JNIEnv *__env, jobject _self, jboolean _stateless, jboolean _background_full, jint _default_stream_idx)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    bool stateless = (_stateless)?true:false;
    bool background_full = (_background_full)?true:false;
    int default_stream_idx = (int) _default_stream_idx;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init(stateless,background_full,default_stream_idx);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1model_Is_1stateless(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    bool Result;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_stateless();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1model_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    bool Result;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->is_empty();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Append(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    kdu_window_model *src = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_model_PTR) & ~((jlong) 1));
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->append(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Set_1codestream_1context(JNIEnv *__env, jobject _self, jint _stream_min, jint _stream_max)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_codestream_context(stream_min,stream_max);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Add_1instruction__IJII(JNIEnv *__env, jobject _self, jint _databin_class, jlong _bin_id, jint _flags, jint _limit)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long bin_id = (kdu_long) _bin_id;
    int flags = (int) _flags;
    int limit = (int) _limit;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->add_instruction(databin_class,bin_id,flags,limit);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Add_1instruction__IIIIIIJJII(JNIEnv *__env, jobject _self, jint _tmin, jint _tmax, jint _cmin, jint _cmax, jint _rmin, jint _rmax, jlong _pmin, jlong _pmax, jint _flags, jint _limit)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    int tmin = (int) _tmin;
    int tmax = (int) _tmax;
    int cmin = (int) _cmin;
    int cmax = (int) _cmax;
    int rmin = (int) _rmin;
    int rmax = (int) _rmax;
    kdu_long pmin = (kdu_long) _pmin;
    kdu_long pmax = (kdu_long) _pmax;
    int flags = (int) _flags;
    int limit = (int) _limit;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->add_instruction(tmin,tmax,cmin,cmax,rmin,rmax,pmin,pmax,flags,limit);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1meta_1instructions(JNIEnv *__env, jobject _self, jlongArray _bin_id, jintArray _buf)
{
  try {
    if (_bin_id == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    jlong bin_id_ELT; __env->GetLongArrayRegion(_bin_id,0,1,&bin_id_ELT);
    kdu_long bin_id = (kdu_long) bin_id_ELT;
    int *buf = NULL;
    jint *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetIntArrayElements(_buf,NULL);
        buf = (int *) buf_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_meta_instructions(bin_id,buf);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    bin_id_ELT = (jlong) bin_id;
  __env->SetLongArrayRegion(_bin_id,0,1,&bin_id_ELT);
    jint _Result = (jint) Result;
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1first_1atomic_1stream(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    int Result;
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_first_atomic_stream();
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1header_1instructions__II_3I(JNIEnv *__env, jobject _self, jint _stream_idx, jint _tnum, jintArray _buf)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    int tnum = (int) _tnum;
    int *buf = NULL;
    jint *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetIntArrayElements(_buf,NULL);
        buf = (int *) buf_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_header_instructions(stream_idx,tnum,buf);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1header_1instructions__I_3I_3I(JNIEnv *__env, jobject _self, jint _stream_idx, jintArray _tnum, jintArray _buf)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    int *tnum = NULL;
    jint *tnum_ELTS = NULL;
    if (_tnum != NULL)
      {
        tnum_ELTS = __env->GetIntArrayElements(_tnum,NULL);
        tnum = (int *) tnum_ELTS;
      }
    int *buf = NULL;
    jint *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetIntArrayElements(_buf,NULL);
        buf = (int *) buf_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_header_instructions(stream_idx,tnum,buf);
    } catch (...) {
    if (_tnum != NULL)
      {
        __env->ReleaseIntArrayElements(_tnum,tnum_ELTS,0);
      }
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jint _Result = (jint) Result;
    if (_tnum != NULL)
      {
        __env->ReleaseIntArrayElements(_tnum,tnum_ELTS,0);
      }
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1precinct_1instructions(JNIEnv *__env, jobject _self, jint _stream_idx, jintArray _tnum, jintArray _cnum, jintArray _rnum, jlongArray _pnum, jintArray _buf)
{
  try {
    if ((_tnum == NULL) || (_cnum == NULL) || (_rnum == NULL) || (_pnum == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    jint tnum_ELT; __env->GetIntArrayRegion(_tnum,0,1,&tnum_ELT);
    int tnum = (int) tnum_ELT;
    jint cnum_ELT; __env->GetIntArrayRegion(_cnum,0,1,&cnum_ELT);
    int cnum = (int) cnum_ELT;
    jint rnum_ELT; __env->GetIntArrayRegion(_rnum,0,1,&rnum_ELT);
    int rnum = (int) rnum_ELT;
    jlong pnum_ELT; __env->GetLongArrayRegion(_pnum,0,1,&pnum_ELT);
    kdu_long pnum = (kdu_long) pnum_ELT;
    int *buf = NULL;
    jint *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetIntArrayElements(_buf,NULL);
        buf = (int *) buf_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_precinct_instructions(stream_idx,tnum,cnum,rnum,pnum,buf);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    tnum_ELT = (jint) tnum;
  __env->SetIntArrayRegion(_tnum,0,1,&tnum_ELT);
    cnum_ELT = (jint) cnum;
  __env->SetIntArrayRegion(_cnum,0,1,&cnum_ELT);
    rnum_ELT = (jint) rnum;
  __env->SetIntArrayRegion(_rnum,0,1,&rnum_ELT);
    pnum_ELT = (jlong) pnum;
  __env->SetLongArrayRegion(_pnum,0,1,&pnum_ELT);
    jint _Result = (jint) Result;
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1precinct_1block(JNIEnv *__env, jobject _self, jint _stream_idx, jint _tnum, jint _cnum, jint _rnum, jint _t_across, jint _p_across, jlong _id_base, jlong _id_gap, jobject _region, jintArray _buf)
{
  try {
    if (Kdu_window_model_CLS==NULL)
      Kdu_window_model_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    int tnum = (int) _tnum;
    int cnum = (int) _cnum;
    int rnum = (int) _rnum;
    int t_across = (int) _t_across;
    int p_across = (int) _p_across;
    kdu_long id_base = (kdu_long) _id_base;
    kdu_long id_gap = (kdu_long) _id_gap;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    int *buf = NULL;
    jint *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetIntArrayElements(_buf,NULL);
        buf = (int *) buf_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_window_model *self = (kdu_window_model *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_model_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_precinct_block(stream_idx,tnum,cnum,rnum,t_across,p_across,id_base,id_gap,*region,buf);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    jboolean _Result = (jboolean) Result;
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                             Kdu_window_prefs                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_window_prefs_CLS != NULL) return;
  try {
    Kdu_window_prefs_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_window_prefs_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_window_prefs_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_window_prefs *self = (kdu_window_prefs *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_window_prefs *self =
      new kdu_window_prefs();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1create__Lkdu_1jni_Kdu_1window_1prefs_2(JNIEnv *__env, jclass this_class, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    kdu_window_prefs *src = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_prefs_PTR) & ~((jlong) 1));
    kdu_window_prefs *self =
      new kdu_window_prefs(*src);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Init(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->init();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Copy_1from(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    kdu_window_prefs *src = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_prefs_PTR) & ~((jlong) 1));
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->copy_from(*src);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Update(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (_src == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    kdu_window_prefs *src = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_prefs_PTR) & ~((jlong) 1));
    int Result;
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->update(*src);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Parse_1prefs(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    const char * Result;
    try { // So we can clean up temporary arrays
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->parse_prefs(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    jstring _Result = __env->NewStringUTF(Result);
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Set_1pref(JNIEnv *__env, jobject _self, jint _pref_flag, jboolean _make_required)
{
  try {
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    int pref_flag = (int) _pref_flag;
    bool make_required = (_make_required)?true:false;
    bool Result;
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->set_pref(pref_flag,make_required);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Set_1max_1bandwidth(JNIEnv *__env, jobject _self, jlong _max_bw, jboolean _make_required)
{
  try {
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    kdu_long max_bw = (kdu_long) _max_bw;
    bool make_required = (_make_required)?true:false;
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_bandwidth(max_bw,make_required);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Set_1bandwidth_1slice(JNIEnv *__env, jobject _self, jlong _bw_slice, jboolean _make_required)
{
  try {
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    kdu_uint32 bw_slice = (kdu_uint32) _bw_slice;
    bool make_required = (_make_required)?true:false;
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_bandwidth_slice(bw_slice,make_required);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Get_1colour_1description_1priority(JNIEnv *__env, jobject _self, jint _space, jint _prec, jbyte _approx)
{
  try {
    if (Kdu_window_prefs_CLS==NULL)
      Kdu_window_prefs_LOADER(__env);
    jp2_colour_space space = (jp2_colour_space) _space;
    int prec = (int) _prec;
    kdu_byte approx = (kdu_byte) _approx;
    int Result;
    kdu_window_prefs *self = (kdu_window_prefs *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_prefs_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_colour_description_priority(space,prec,approx);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

/*****************************************************************************/
/*                                Mcc_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mcc_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mcc_params_CLS != NULL) return;
  try {
    Mcc_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mcc_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mcc_params_CLS==NULL)
      Mcc_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mcc_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mcc_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mcc_params *self = (mcc_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mcc_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    mcc_params *self =
      new mcc_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Mco_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mco_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mco_params_CLS != NULL) return;
  try {
    Mco_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mco_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mco_params_CLS==NULL)
      Mco_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mco_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mco_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mco_params *self = (mco_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mco_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    mco_params *self =
      new mco_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Mct_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mct_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mct_params_CLS != NULL) return;
  try {
    Mct_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mct_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mct_params_CLS==NULL)
      Mct_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mct_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mct_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mct_params *self = (mct_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mct_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    mct_params *self =
      new mct_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Mj2_source                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_source_CLS != NULL) return;
  try {
    Mj2_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mj2_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mj2_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mj2_source *self = (mj2_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1source_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    mj2_source *self =
      new mj2_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    bool Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->exists();
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *src = (jp2_family_src *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    bool return_if_incompatible = (_return_if_incompatible)?true:false;
    int Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->open(src,return_if_incompatible);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->close();
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_ultimate_src();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_family_src_CLS,Jp2_family_src_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Get_1movie_1dims(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result_copy = self->get_movie_dims();
    jobject _Result = NULL;
      {
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        _Result = __env->NewObject(Kdu_dims_CLS,Kdu_dims_INIT_PTR,
                         ((jlong) _addr_to_kdu_long(Result))+1); // Auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1source_Get_1next_1track(JNIEnv *__env, jobject _self, jlong _prev_track_idx)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    kdu_uint32 prev_track_idx = (kdu_uint32) _prev_track_idx;
    kdu_uint32 Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_next_track(prev_track_idx);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1source_Get_1track_1type(JNIEnv *__env, jobject _self, jlong _track_idx)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    int Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_track_type(track_idx);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Access_1video_1track(JNIEnv *__env, jobject _self, jlong _track_idx)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    mj2_video_source *Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_video_track(track_idx);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Mj2_video_source_CLS,Mj2_video_source_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Find_1stream(JNIEnv *__env, jobject _self, jint _stream_idx, jlongArray _track_idx, jintArray _frame_idx, jintArray _field_idx)
{
  try {
    if ((_track_idx == NULL) || (_frame_idx == NULL) || (_field_idx == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    jlong track_idx_ELT; __env->GetLongArrayRegion(_track_idx,0,1,&track_idx_ELT);
    kdu_uint32 track_idx = (kdu_uint32) track_idx_ELT;
    jint frame_idx_ELT; __env->GetIntArrayRegion(_frame_idx,0,1,&frame_idx_ELT);
    int frame_idx = (int) frame_idx_ELT;
    jint field_idx_ELT; __env->GetIntArrayRegion(_field_idx,0,1,&field_idx_ELT);
    int field_idx = (int) field_idx_ELT;
    bool Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->find_stream(stream_idx,track_idx,frame_idx,field_idx);
    track_idx_ELT = (jlong) track_idx;
  __env->SetLongArrayRegion(_track_idx,0,1,&track_idx_ELT);
    frame_idx_ELT = (jint) frame_idx;
  __env->SetIntArrayRegion(_frame_idx,0,1,&frame_idx_ELT);
    field_idx_ELT = (jint) field_idx;
  __env->SetIntArrayRegion(_field_idx,0,1,&field_idx_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Count_1codestreams(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (_count == NULL)
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->count_codestreams(count);
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Mj2_target                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_target_CLS != NULL) return;
  try {
    Mj2_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    self.open(tgt);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    self.close();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1target_Add_1video_1track(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    mj2_video_target *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    Result = self.add_video_track();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Mj2_video_target_CLS,Mj2_video_target_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

/*****************************************************************************/
/*                             Mj2_video_source                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_video_source_CLS != NULL) return;
  try {
    Mj2_video_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mj2_video_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mj2_video_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mj2_video_source *self = (mj2_video_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1track_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_uint32 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_track_idx();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1compositing_1order(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_int16 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_compositing_order();
    jshort _Result = (jshort) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jshort) 0;
}

JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1graphics_1mode___3S_3S_3S(JNIEnv *__env, jobject _self, jshortArray _op_red, jshortArray _op_green, jshortArray _op_blue)
{
  try {
    if ((_op_red == NULL) || (_op_green == NULL) || (_op_blue == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    jshort op_red_ELT; __env->GetShortArrayRegion(_op_red,0,1,&op_red_ELT);
    kdu_int16 op_red = (kdu_int16) op_red_ELT;
    jshort op_green_ELT; __env->GetShortArrayRegion(_op_green,0,1,&op_green_ELT);
    kdu_int16 op_green = (kdu_int16) op_green_ELT;
    jshort op_blue_ELT; __env->GetShortArrayRegion(_op_blue,0,1,&op_blue_ELT);
    kdu_int16 op_blue = (kdu_int16) op_blue_ELT;
    kdu_int16 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_graphics_mode(op_red,op_green,op_blue);
    op_red_ELT = (jshort) op_red;
  __env->SetShortArrayRegion(_op_red,0,1,&op_red_ELT);
    op_green_ELT = (jshort) op_green;
  __env->SetShortArrayRegion(_op_green,0,1,&op_green_ELT);
    op_blue_ELT = (jshort) op_blue;
  __env->SetShortArrayRegion(_op_blue,0,1,&op_blue_ELT);
    jshort _Result = (jshort) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jshort) 0;
}

JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1graphics_1mode__(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_int16 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_graphics_mode();
    jshort _Result = (jshort) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jshort) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1geometry(JNIEnv *__env, jobject _self, jdoubleArray _presentation_width, jdoubleArray _presentation_height, jdoubleArray _matrix, jboolean _for_movie)
{
  try {
    if ((_presentation_width == NULL) || (_presentation_height == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    jdouble presentation_width_ELT; __env->GetDoubleArrayRegion(_presentation_width,0,1,&presentation_width_ELT);
    double presentation_width = (double) presentation_width_ELT;
    jdouble presentation_height_ELT; __env->GetDoubleArrayRegion(_presentation_height,0,1,&presentation_height_ELT);
    double presentation_height = (double) presentation_height_ELT;
    double *matrix = NULL;
    jdouble *matrix_ELTS = NULL;
    if (_matrix != NULL)
      {
        matrix_ELTS = __env->GetDoubleArrayElements(_matrix,NULL);
        matrix = (double *) matrix_ELTS;
      }
    bool for_movie = (_for_movie)?true:false;
    try { // So we can clean up temporary arrays
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->get_geometry(presentation_width,presentation_height,matrix,for_movie);
    } catch (...) {
    if (_matrix != NULL)
      {
        __env->ReleaseDoubleArrayElements(_matrix,matrix_ELTS,0);
      }
    throw;
    }
    presentation_width_ELT = (jdouble) presentation_width;
  __env->SetDoubleArrayRegion(_presentation_width,0,1,&presentation_width_ELT);
    presentation_height_ELT = (jdouble) presentation_height;
  __env->SetDoubleArrayRegion(_presentation_height,0,1,&presentation_height_ELT);
    if (_matrix != NULL)
      {
        __env->ReleaseDoubleArrayElements(_matrix,matrix_ELTS,0);
      }
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1cardinal_1geometry(JNIEnv *__env, jobject _self, jobject _pre_dims, jbooleanArray _transpose, jbooleanArray _vflip, jbooleanArray _hflip, jboolean _for_movie)
{
  try {
    if ((_pre_dims == NULL) || (_transpose == NULL) || (_vflip == NULL) || (_hflip == NULL))
      {
        generateJavaNullArgException(__env);
        throw KDU_NULL_EXCEPTION; // Just to get out of function
      }
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *pre_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_pre_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jboolean transpose_ELT; __env->GetBooleanArrayRegion(_transpose,0,1,&transpose_ELT);
    bool transpose = (transpose_ELT)?true:false;
    jboolean vflip_ELT; __env->GetBooleanArrayRegion(_vflip,0,1,&vflip_ELT);
    bool vflip = (vflip_ELT)?true:false;
    jboolean hflip_ELT; __env->GetBooleanArrayRegion(_hflip,0,1,&hflip_ELT);
    bool hflip = (hflip_ELT)?true:false;
    bool for_movie = (_for_movie)?true:false;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->get_cardinal_geometry(*pre_dims,transpose,vflip,hflip,for_movie);
    transpose_ELT = (jboolean) transpose;
  __env->SetBooleanArrayRegion(_transpose,0,1,&transpose_ELT);
    vflip_ELT = (jboolean) vflip;
  __env->SetBooleanArrayRegion(_vflip,0,1,&vflip_ELT);
    hflip_ELT = (jboolean) hflip;
  __env->SetBooleanArrayRegion(_hflip,0,1,&hflip_ELT);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_dimensions();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_dimensions_CLS,Jp2_dimensions_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_resolution_CLS,Jp2_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_palette_CLS,Jp2_palette_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jp2_channels_CLS,Jp2_channels_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_colour_CLS,Jp2_colour_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1stream_1idx(JNIEnv *__env, jobject _self, jint _field_idx)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    int field_idx = (int) _field_idx;
    int Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_stream_idx(field_idx);
    jint _Result = (jint) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1image_1box(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_image_box();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->NewObject(Jp2_input_box_CLS,Jp2_input_box_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1video_1source_Can_1open_1stream(JNIEnv *__env, jobject _self, jint _field_idx, jboolean _need_main_header)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    int field_idx = (int) _field_idx;
    bool need_main_header = (_need_main_header)?true:false;
    bool Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->can_open_stream(field_idx,need_main_header);
    jboolean _Result = (jboolean) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1frame_1instant__I(JNIEnv *__env, jobject _self, jint _frame_idx)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    int frame_idx = (int) _frame_idx;
    kdu_long Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_frame_instant(frame_idx);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1frame_1period__I(JNIEnv *__env, jobject _self, jint _frame_idx)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    int frame_idx = (int) _frame_idx;
    kdu_long Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_frame_period(frame_idx);
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

/*****************************************************************************/
/*                             Mj2_video_target                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_video_target_CLS != NULL) return;
  try {
    Mj2_video_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mj2_video_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mj2_video_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mj2_video_target *self = (mj2_video_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1target_Get_1track_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_uint32 Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->get_track_idx();
    jlong _Result = (jlong) Result;
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1compositing_1order(JNIEnv *__env, jobject _self, jshort _layer_idx)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_int16 layer_idx = (kdu_int16) _layer_idx;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_compositing_order(layer_idx);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1graphics_1mode(JNIEnv *__env, jobject _self, jshort _graphics_mode, jshort _op_red, jshort _op_green, jshort _op_blue)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_int16 graphics_mode = (kdu_int16) _graphics_mode;
    kdu_int16 op_red = (kdu_int16) _op_red;
    kdu_int16 op_green = (kdu_int16) _op_green;
    kdu_int16 op_blue = (kdu_int16) _op_blue;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_graphics_mode(graphics_mode,op_red,op_green,op_blue);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_colour_CLS,Jp2_colour_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_palette_CLS,Jp2_palette_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        kdu_int64 Result_P = ((kdu_int64 *) &Result)[1];
        _Result = __env->NewObject(Jp2_channels_CLS,Jp2_channels_INIT_PTR_PARAM,
                         (jlong) _addr_to_kdu_long(Result_S),(jlong) Result_P); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        void *Result_S = *((void **) &Result);
        _Result = __env->NewObject(Jp2_resolution_CLS,Jp2_resolution_INIT_PTR,
                         (jlong) _addr_to_kdu_long(Result_S)); // No auto-destroy
      }
    return _Result;
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1timescale(JNIEnv *__env, jobject _self, jlong _ticks_per_second)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_uint32 ticks_per_second = (kdu_uint32) _ticks_per_second;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_timescale(ticks_per_second);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1field_1order(JNIEnv *__env, jobject _self, jint _order)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_field_order order = (kdu_field_order) _order;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_field_order(order);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1max_1frames_1per_1chunk(JNIEnv *__env, jobject _self, jlong _max_frames)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_uint32 max_frames = (kdu_uint32) _max_frames;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_max_frames_per_chunk(max_frames);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1frame_1period(JNIEnv *__env, jobject _self, jlong _num_ticks)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_long num_ticks = (kdu_long) _num_ticks;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    if (self == NULL)
      throw KDU_NULL_EXCEPTION;
    self->set_frame_period(num_ticks);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch (kdu_exception exc)
  { checkForJavaException(__env,false,exc); }
  catch (...)
  { checkForJavaException(__env,false,KDU_CONVERTED_EXCEPTION); }
}

/*****************************************************************************/
/*                                Org_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Org_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Org_params_CLS != NULL) return;
  try {
    Org_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Org_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Org_params_CLS==NULL)
      Org_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Org_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Org_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        org_params *self = (org_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Org_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    org_params *self =
      new org_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Poc_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Poc_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Poc_params_CLS != NULL) return;
  try {
    Poc_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Poc_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Poc_params_CLS==NULL)
      Poc_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Poc_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Poc_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        poc_params *self = (poc_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Poc_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    poc_params *self =
      new poc_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Qcd_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Qcd_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Qcd_params_CLS != NULL) return;
  try {
    Qcd_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Qcd_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Qcd_params_CLS==NULL)
      Qcd_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Qcd_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Qcd_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        qcd_params *self = (qcd_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Qcd_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    qcd_params *self =
      new qcd_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Rgn_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Rgn_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Rgn_params_CLS != NULL) return;
  try {
    Rgn_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Rgn_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Rgn_params_CLS==NULL)
      Rgn_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Rgn_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Rgn_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        rgn_params *self = (rgn_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Rgn_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    rgn_params *self =
      new rgn_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Siz_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Siz_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Siz_params_CLS != NULL) return;
  try {
    Siz_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Siz_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Siz_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Siz_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        siz_params *self = (siz_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Siz_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    siz_params *self =
      new siz_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc &)
  { checkForJavaException(__env,true,KDU_NULL_EXCEPTION); }
  catch(...) {};
  return (jlong) 0;
}
