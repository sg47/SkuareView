// This file has been automatically generated by "kdu_hyperdoc"
// Do not edit manually.
// Copyright 2001, David Taubman, The University of New South Wales (UNSW)

#ifndef KDU_JNI_H
#define KDU_JNI_H

#ifdef __llvm__
# include <JavaVM/jni.h>
#else
# include <jni.h>
#endif
     // If the compiler trips up here, you need to
     // modify the makefile/workspace to add the correct path to
     // the Java SDK "include" directory and machine-specific
     // sub-directory (e.g., "include/linux") on your
     // platform.  You may first need to install the Java SDK.

/*****************************************************************************/
/*                              kdu_jni_env_ref                              */
/*****************************************************************************/

#define KDU_JNI_ENV_REF_ID "JNI_ENV_REFERENCE"

class kdu_jni_env_ref : public kdu_thread_object {
  public: // Member functions
    kdu_jni_env_ref(JNIEnv *env_ref, JavaVM *jvm_ref)
      : kdu_thread_object(KDU_JNI_ENV_REF_ID)
      {
        this->env = env_ref; this->jvm = jvm_ref;
      }
    ~kdu_jni_env_ref()
      {
        jvm->DetachCurrentThread();
      }
    JNIEnv *get_env() { return env; }
  private: // Data
    JNIEnv *env;
    JavaVM *jvm;
  };


/*****************************************************************************/
/*                                Kdu_global                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Ceil_1ratio(JNIEnv *__env, jclass this_class, jint _num, jint _den);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Floor_1ratio(JNIEnv *__env, jclass this_class, jint _num, jint _den);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Jp2_14cc_1to_1int__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Jp2_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1global_Jp2_1is_1superbox(JNIEnv *__env, jobject _self, jlong _box_type);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Jpb_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Jpx_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1convert_1rgb_1to_1ycc(JNIEnv *__env, jclass this_class, jobject _c1, jobject _c2, jobject _c3);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1convert_1ycc_1to_1rgb(JNIEnv *__env, jclass this_class, jobject _c1, jobject _c2, jobject _c3, jint _width);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1errors(JNIEnv *__env, jobject _self, jobject _handler);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1text__Ljava_lang_String_2JLjava_lang_String_2Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _context, jlong _id, jstring _lead_in, jstring _text);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1text__Ljava_lang_String_2J_3I_3I(JNIEnv *__env, jobject _self, jstring _context, jlong _id, jintArray _lead_in, jintArray _text);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1warnings(JNIEnv *__env, jobject _self, jobject _handler);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1fseek__JJ(JNIEnv *__env, jobject _self, jlong _fp, jlong _offset);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1fseek__JJI(JNIEnv *__env, jobject _self, jlong _fp, jlong _offset, jint _origin);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1ftell(JNIEnv *__env, jobject _self, jlong _fp);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1altivec_1exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1core_1version(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1mmx_1level(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1num_1processors(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1sparcvis_1exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1parse_1type_1code(JNIEnv *__env, jclass this_class, jstring _string, jintArray _num_chars);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1print_1error(JNIEnv *__env, jobject _self, jstring _message);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1print_1warning(JNIEnv *__env, jobject _self, jstring _message);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1rethrow(JNIEnv *__env, jclass this_class, jint _exc);
extern "C"
JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1round(JNIEnv *__env, jclass this_class, jdouble _x);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Long_1ceil_1ratio(JNIEnv *__env, jclass this_class, jlong _num, jlong _den);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Long_1floor_1ratio(JNIEnv *__env, jclass this_class, jlong _num, jlong _den);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Mj2_1add_1box_1descriptions(JNIEnv *__env, jobject _self, jobject _textualizer);

/*****************************************************************************/
/*                                Ads_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Ads_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Ads_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Ads_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Atk_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Atk_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Atk_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Atk_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Cod_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Cod_1params_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Cod_1params_Is_1valid_1decomp_1terminator(JNIEnv *__env, jclass this_class, jint _val);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Cod_1params_Transpose_1decomp(JNIEnv *__env, jclass this_class, jint _val);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Cod_1params_Expand_1decomp_1bands(JNIEnv *__env, jclass this_class, jint _decomp_val, jshortArray _band_descriptors);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Get_1max_1decomp_1levels(JNIEnv *__env, jclass this_class, jint _decomp_val, jintArray _max_horizontal_levels, jintArray _max_vertical_levels);

/*****************************************************************************/
/*                                Crg_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Crg_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Crg_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Crg_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Dfs_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Dfs_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Dfs_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Dfs_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                            Jp2_box_textualizer                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Add_1box_1type(JNIEnv *__env, jobject _self, jlong _box_type, jstring _box_name);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Get_1box_1name(JNIEnv *__env, jobject _self, jlong _box_type);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Check_1textualizer_1function(JNIEnv *__env, jobject _self, jlong _box_type);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1box_1textualizer_Textualize_1box(JNIEnv *__env, jobject _self, jobject _box, jobject _tgt, jboolean _xml_embedded, jint _max_len);

/*****************************************************************************/
/*                               Jp2_channels                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Init(JNIEnv *__env, jobject _self, jint _num_colours);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1colour_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1opacity_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1premult_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1chroma_1key(JNIEnv *__env, jobject _self, jint _colour_idx, jint _key_val);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1channels_Get_1num_1colours(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1colour_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1opacity_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1premult_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1chroma_1key(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _key_val);

/*****************************************************************************/
/*                                Jp2_colour                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__I(JNIEnv *__env, jobject _self, jint _space);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__IIIIIIIIIIJI(JNIEnv *__env, jobject _self, jint _space, jint _Lrange, jint _Loff, jint _Lbits, jint _Arange, jint _Aoff, jint _Abits, jint _Brange, jint _Boff, jint _Bbits, jlong _illuminant, jint _temperature);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3B(JNIEnv *__env, jobject _self, jbyteArray _icc_profile);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3BI_3B(JNIEnv *__env, jobject _self, jbyteArray _uuid, jint _data_bytes, jbyteArray _data);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__DDI(JNIEnv *__env, jobject _self, jdouble _gamma, jdouble _beta, jint _num_points);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3D_3D_3DDDIZ(JNIEnv *__env, jobject _self, jdoubleArray _xy_red, jdoubleArray _xy_green, jdoubleArray _xy_blue, jdouble _gamma, jdouble _beta, jint _num_points, jboolean _reference_is_D50);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1num_1colours(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1space(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Is_1opponent_1space(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1precedence(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jbyte JNICALL Java_kdu_1jni_Jp2_1colour_Get_1approximation_1level(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_Get_1icc_1profile___3I(JNIEnv *__env, jobject _self, jintArray _num_bytes);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1icc_1profile___3BI(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _buf_len);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1lab_1params(JNIEnv *__env, jobject _self, jintArray _Lrange, jintArray _Loff, jintArray _Lbits, jintArray _Arange, jintArray _Aoff, jintArray _Abits, jintArray _Brange, jintArray _Boff, jintArray _Bbits, jlongArray _illuminant, jintArray _temperature);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1jab_1params(JNIEnv *__env, jobject _self, jintArray _Lrange, jintArray _Loff, jintArray _Lbits, jintArray _Arange, jintArray _Aoff, jintArray _Abits, jintArray _Brange, jintArray _Boff, jintArray _Bbits);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Check_1cie_1default(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1vendor_1uuid(JNIEnv *__env, jobject _self, jbyteArray _uuid);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_Get_1vendor_1data(JNIEnv *__env, jobject _self, jintArray _num_bytes);

/*****************************************************************************/
/*                           Jp2_colour_converter                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Clear(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Init(JNIEnv *__env, jobject _self, jobject _colour, jboolean _use_wide_gamut, jboolean _prefer_fast_approximations);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Get_1wide_1gamut(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Is_1approximate(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Is_1non_1trivial(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1lum(JNIEnv *__env, jobject _self, jobject _line, jint _width);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1rgb(JNIEnv *__env, jobject _self, jobject _red, jobject _green, jobject _blue, jint _width);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1rgb4(JNIEnv *__env, jobject _self, jobject _red, jobject _green, jobject _blue, jobject _extra, jint _width);

/*****************************************************************************/
/*                            Jp2_data_references                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1data_1references_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1data_1references_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Add_1url(JNIEnv *__env, jobject _self, jstring _url, jint _url_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Add_1file_1url(JNIEnv *__env, jobject _self, jstring _pathname, jint _url_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1num_1urls(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Find_1url(JNIEnv *__env, jobject _self, jstring _url);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1url(JNIEnv *__env, jobject _self, jint _idx);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1file_1url(JNIEnv *__env, jobject _self, jint _idx);

/*****************************************************************************/
/*                              Jp2_dimensions                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Init__Lkdu_1jni_Kdu_1coords_2IZI(JNIEnv *__env, jobject _self, jobject _size, jint _num_components, jboolean _unknown_space, jint _compression_type);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Init__Lkdu_1jni_Siz_1params_2Z(JNIEnv *__env, jobject _self, jobject _siz, jboolean _unknown_space);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__Lkdu_1jni_Kdu_1params_2(JNIEnv *__env, jobject _self, jobject _root);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__IZ(JNIEnv *__env, jobject _self, jint _profile, jboolean _is_jpx_baseline);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__Lkdu_1jni_Jp2_1dimensions_2(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Set_1precision(JNIEnv *__env, jobject _self, jint _component_idx, jint _bit_depth, jboolean _is_signed);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Set_1ipr_1box_1available(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1size(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1num_1components(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Colour_1space_1known(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _component_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1signed(JNIEnv *__env, jobject _self, jint _component_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1compression_1type(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Is_1ipr_1box_1available(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                              Jp2_family_src                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Ljava_lang_String_2Z(JNIEnv *__env, jobject _self, jstring _fname, jboolean _allow_seeks);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Lkdu_1jni_Kdu_1compressed_1source_2(JNIEnv *__env, jobject _self, jobject _indirect);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Lkdu_1jni_Kdu_1cache_2(JNIEnv *__env, jobject _self, jobject _cache);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Close(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Uses_1cache(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Is_1top_1level_1complete(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Is_1codestream_1main_1header_1complete(JNIEnv *__env, jobject _self, jlong _logical_codestream_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1family_1src_Get_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1family_1src_Get_1filename(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Acquire_1lock(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Release_1lock(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Synch_1with_1cache(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                              Jp2_family_tgt                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _fname);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__Lkdu_1jni_Kdu_1compressed_1target_2(JNIEnv *__env, jobject _self, jobject _indirect);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__J(JNIEnv *__env, jobject _self, jlong _simulated_start_pos);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Get_1bytes_1written(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Close(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                               Jp2_input_box                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1jpx_1box(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open__Lkdu_1jni_Jp2_1family_1src_2Lkdu_1jni_Jp2_1locator_2(JNIEnv *__env, jobject _self, jobject _src, jobject _locator);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open__Lkdu_1jni_Jp2_1input_1box_2(JNIEnv *__env, jobject _self, jobject _super_box);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open_1next(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open_1as(JNIEnv *__env, jobject _self, jlong _box_type, jobject _ultimate_src, jobject _box_locator, jobject _contents_locator, jlong _contents_length);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Close_1without_1checking(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Transplant(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Fork(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Has_1caching_1source(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1type(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1locator(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1contents_1locator(JNIEnv *__env, jobject _self, jintArray _class_id);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1header_1length(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1remaining_1bytes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1bytes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Is_1complete(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Load_1in_1memory(JNIEnv *__env, jobject _self, jint _max_bytes);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3J(JNIEnv *__env, jobject _self, jlongArray _dword);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3I(JNIEnv *__env, jobject _self, jintArray _dword);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3S(JNIEnv *__env, jobject _self, jshortArray _word);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3B(JNIEnv *__env, jobject _self, jbyteArray _byte);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Set_1codestream_1scope(JNIEnv *__env, jobject _self, jlong _logical_codestream_id, jboolean _need_main_header);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1codestream_1scope(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Jp2_locator                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1locator_Is_1null(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Get_1file_1pos(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Set_1file_1pos(JNIEnv *__env, jobject _self, jlong _pos);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Get_1databin_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Get_1databin_1pos(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                              Jp2_output_box                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__Lkdu_1jni_Jp2_1family_1tgt_2JZZ(JNIEnv *__env, jobject _self, jobject _tgt, jlong _box_type, jboolean _rubber_length, jboolean _headerless);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__Lkdu_1jni_Jp2_1output_1box_2JZZ(JNIEnv *__env, jobject _self, jobject _super_box, jlong _box_type, jboolean _rubber_length, jboolean _headerless);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__J(JNIEnv *__env, jobject _self, jlong _box_type);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open_1next(JNIEnv *__env, jobject _self, jlong _box_type, jboolean _rubber_length, jboolean _headerless);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1box_1type(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1box_1length(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1start_1pos(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1header_1length(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1output_1box_Use_1long_1header(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1contents(JNIEnv *__env, jobject _self, jlongArray _contents_length);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Write_1box(JNIEnv *__env, jobject _self, jobject _tgt, jboolean _force_headerless);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Set_1rubber_1length(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Write_1header_1last(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Reopen(JNIEnv *__env, jobject _self, jlong _box_type, jlong _offset);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write_1free_1and_1close(JNIEnv *__env, jobject _self, jlong _free_bytes);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__J(JNIEnv *__env, jobject _self, jlong _dword);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__I(JNIEnv *__env, jobject _self, jint _dword);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__S(JNIEnv *__env, jobject _self, jshort _word);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__B(JNIEnv *__env, jobject _self, jbyte _byte);

/*****************************************************************************/
/*                                Jp2_palette                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1palette_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Init(JNIEnv *__env, jobject _self, jint _num_luts, jint _num_entries);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Set_1lut(JNIEnv *__env, jobject _self, jint _lut_idx, jintArray _lut, jint _bit_depth, jboolean _is_signed);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1num_1entries(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1num_1luts(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _lut_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1palette_Get_1signed(JNIEnv *__env, jobject _self, jint _lut_idx);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Get_1lut__I_3F(JNIEnv *__env, jobject _self, jint _lut_idx, jfloatArray _lut);

/*****************************************************************************/
/*                              Jp2_resolution                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1resolution_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Init(JNIEnv *__env, jobject _self, jfloat _aspect_ratio);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Set_1different_1capture_1aspect_1ratio(JNIEnv *__env, jobject _self, jfloat _aspect_ratio);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Set_1resolution(JNIEnv *__env, jobject _self, jfloat _resolution, jboolean _for_display);
extern "C"
JNIEXPORT jfloat JNICALL Java_kdu_1jni_Jp2_1resolution_Get_1aspect_1ratio(JNIEnv *__env, jobject _self, jboolean _for_display);
extern "C"
JNIEXPORT jfloat JNICALL Java_kdu_1jni_Jp2_1resolution_Get_1resolution(JNIEnv *__env, jobject _self, jboolean _for_display);

/*****************************************************************************/
/*                                Jp2_source                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1source_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1source_Read_1header(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1source_Get_1header_1bytes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1dimensions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1palette(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1colour(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1resolution(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Jp2_target                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1target_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open__Lkdu_1jni_Jp2_1family_1tgt_2(JNIEnv *__env, jobject _self, jobject _tgt);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open__Lkdu_1jni_Jp2_1family_1tgt_2JZ(JNIEnv *__env, jobject _self, jobject _tgt, jlong _box_type, jboolean _rubber_length);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open__Lkdu_1jni_Jp2_1output_1box_2JZ(JNIEnv *__env, jobject _self, jobject _super_box, jlong _box_type, jboolean _rubber_length);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Write_1header(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open_1codestream(JNIEnv *__env, jobject _self, jboolean _rubber_length);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1dimensions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1colour(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1palette(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1resolution(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                         Jp2_threadsafe_family_src                         */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1threadsafe_1family_1src_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1threadsafe_1family_1src_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1threadsafe_1family_1src_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Jpb_source                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1source_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpb_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpb_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpb_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jbyte JNICALL Java_kdu_1jni_Jpb_1source_Get_1frame_1space(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1source_Get_1frame_1timecode(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Jpb_target                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1target_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpb_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt, jint _timescale, jint _frame_duration, jint _field_order, jbyte _frame_space, jlong _max_bitrate, jlong _initial_timecode, jint _timecode_flags);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpb_1target_Set_1next_1timecode(JNIEnv *__env, jobject _self, jlong _timecode);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1target_Get_1next_1timecode(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpb_1target_Get_1last_1timecode(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                           Jpx_codestream_source                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Get_1codestream_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Get_1header_1loc(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1dimensions(JNIEnv *__env, jobject _self, jboolean _finalize_compatibility);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1palette(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Enum_1layer_1ids(JNIEnv *__env, jobject _self, jint _last_layer_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Stream_1ready(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1fragment_1list(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Open_1stream(JNIEnv *__env, jobject _self, jobject _my_resource);

/*****************************************************************************/
/*                           Jpx_codestream_target                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Get_1codestream_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1dimensions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1palette(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Copy_1attributes(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1fragment_1list(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Add_1fragment(JNIEnv *__env, jobject _self, jstring _url_or_path, jlong _offset, jlong _length, jboolean _is_path);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Write_1fragment_1table(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Open_1stream(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1stream(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                             Jpx_compatibility                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jp2(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jp2_1compatible(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jpxb_1compatible(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Has_1reader_1requirements_1box(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Check_1standard_1feature(JNIEnv *__env, jobject _self, jint _feature_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Check_1vendor_1feature(JNIEnv *__env, jobject _self, jbyteArray _uuid);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1standard_1feature__I_3I(JNIEnv *__env, jobject _self, jint _which, jintArray _feature_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1standard_1feature__I_3I_3Z(JNIEnv *__env, jobject _self, jint _which, jintArray _feature_id, jbooleanArray _is_supported);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1vendor_1feature__I_3B(JNIEnv *__env, jobject _self, jint _which, jbyteArray _uuid);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1vendor_1feature__I_3B_3Z(JNIEnv *__env, jobject _self, jint _which, jbyteArray _uuid, jbooleanArray _is_supported);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1standard_1feature_1support(JNIEnv *__env, jobject _self, jint _feature_id, jboolean _is_supported);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1vendor_1feature_1support(JNIEnv *__env, jobject _self, jbyteArray _uuid, jboolean _is_supported);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Test_1fully_1understand(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Test_1decode_1completely(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1used_1standard_1feature(JNIEnv *__env, jobject _self, jint _feature_id, jbyte _fully_understand_sub_expression, jbyte _decode_completely_sub_expression);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1used_1vendor_1feature(JNIEnv *__env, jobject _self, jbyteArray _uuid, jbyte _fully_understand_sub_expression, jbyte _decode_completely_sub_expression);

/*****************************************************************************/
/*                        Jpx_composited_orientation                         */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Native_1create__ZZZ(JNIEnv *__env, jclass this_class, jboolean _transpose_first, jboolean _flip_vert, jboolean _flip_horz);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Is_1non_1trivial(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Init__ZZZ(JNIEnv *__env, jobject _self, jboolean _transpose_first, jboolean _flip_vert, jboolean _flip_horz);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Init__IZ(JNIEnv *__env, jobject _self, jint _rotation, jboolean _flip);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composited_1orientation_Append(JNIEnv *__env, jobject _self, jobject _rhs);

/*****************************************************************************/
/*                              Jpx_composition                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Get_1global_1info(JNIEnv *__env, jobject _self, jobject _size);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1track_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1timescale(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1tracks(JNIEnv *__env, jobject _self, jlongArray _count, jboolean _global_only);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1track_1frames(JNIEnv *__env, jobject _self, jlong _track_idx, jintArray _count);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1track_1time(JNIEnv *__env, jobject _self, jlong _track_idx, jlongArray _count);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Count_1track_1frames_1before_1time(JNIEnv *__env, jobject _self, jlong _track_idx, jlong _max_end_time, jintArray _count);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1composition_Access_1frame(JNIEnv *__env, jobject _self, jlong _track_idx, jint _frame_idx, jboolean _must_exist, jboolean _include_persistents);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Find_1layer_1match(JNIEnv *__env, jobject _self, jobject _frame, jintArray _inst_idx, jlong _track_idx, jintArray _layers, jint _num_layers, jint _container_id, jboolean _include_persistents, jint _flags);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Find_1numlist_1match(JNIEnv *__env, jobject _self, jobject _frame, jintArray _inst_idx, jlong _track_idx, jobject _numlist, jint _max_inferred_layers, jboolean _include_persistents, jint _flags);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1next_1frame(JNIEnv *__env, jobject _self, jlong _last_frame);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1prev_1frame(JNIEnv *__env, jobject _self, jlong _last_frame);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1composition_Access_1owner(JNIEnv *__env, jobject _self, jlong _frame_ref);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1composition_Get_1interface_1for_1frame(JNIEnv *__env, jclass this_class, jlong _frame, jint _iteration_idx, jboolean _include_persistents);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Get_1frame_1info(JNIEnv *__env, jobject _self, jlong _frame_ref, jintArray _num_instructions, jintArray _duration, jintArray _repeat_count, jbooleanArray _is_persistent);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1last_1persistent_1frame(JNIEnv *__env, jobject _self, jlong _frame_ref);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Get_1instruction(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _instruction_idx, jintArray _rel_layer_idx, jintArray _rel_increment, jbooleanArray _is_reused, jobject _source_dims, jobject _target_dims, jobject _orientation);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Get_1original_1iset(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _instruction_idx, jintArray _iset_idx, jintArray _inum_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Map_1rel_1layer_1idx(JNIEnv *__env, jobject _self, jint _rel_layer_idx);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Add_1frame(JNIEnv *__env, jobject _self, jint _duration, jint _repeat_count, jboolean _is_persistent);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Add_1instruction(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _rel_layer_idx, jint _rel_increment, jobject _source_dims, jobject _target_dims, jobject _orient);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Set_1loop_1count(JNIEnv *__env, jobject _self, jint _count);

/*****************************************************************************/
/*                           Jpx_container_source                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1container_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1container_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1num_1top_1codestreams(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1num_1top_1layers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1base_1codestreams(JNIEnv *__env, jobject _self, jintArray _num_base_codestreams);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1base_1layers(JNIEnv *__env, jobject _self, jintArray _num_base_layers);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1source_Count_1repetitions(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1source_Access_1layer(JNIEnv *__env, jobject _self, jint _base_idx, jint _rep_idx, jboolean _need_stream_headers, jboolean _find_first_rep);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1source_Access_1codestream(JNIEnv *__env, jobject _self, jint _base_idx, jint _rep_idx, jboolean _need_main_header, jboolean _find_first_rep);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1source_Check_1compatibility(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _any_repetition);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1num_1tracks(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1source_Get_1track_1base_1layers(JNIEnv *__env, jobject _self, jlong _track_idx, jintArray _num_track_base_layers);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1source_Access_1presentation_1track(JNIEnv *__env, jobject _self, jlong _track_idx);

/*****************************************************************************/
/*                           Jpx_container_target                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1container_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1container_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1container_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1num_1top_1codestreams(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1num_1top_1layers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1base_1codestreams(JNIEnv *__env, jobject _self, jintArray _num_base_codestreams);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1container_1target_Get_1base_1layers(JNIEnv *__env, jobject _self, jintArray _num_base_layers);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1target_Access_1layer(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1target_Access_1codestream(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1container_1target_Add_1presentation_1track(JNIEnv *__env, jobject _self, jint _track_layers);

/*****************************************************************************/
/*                             Jpx_fragment_list                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Add_1fragment(JNIEnv *__env, jobject _self, jint _url_idx, jlong _offset, jlong _length);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1total_1length(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1num_1fragments(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1fragment(JNIEnv *__env, jobject _self, jint _frag_idx, jintArray _url_idx, jlongArray _offset, jlongArray _length);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Locate_1fragment(JNIEnv *__env, jobject _self, jlong _pos, jlongArray _bytes_into_fragment);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Any_1local_1fragments(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                 Jpx_frame                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1global_1info(JNIEnv *__env, jobject _self, jobject _size);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1frame_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_Get_1track_1idx(JNIEnv *__env, jobject _self, jbooleanArray _last_in_context);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1frame_Access_1next(JNIEnv *__env, jobject _self, jlong _track_idx, jboolean _must_exist);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1frame_Access_1prev(JNIEnv *__env, jobject _self, jlong _track_idx, jboolean _must_exist);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1info(JNIEnv *__env, jobject _self, jlongArray _start_time, jlongArray _duration);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Is_1persistent(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Get_1num_1persistent_1instructions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Get_1instruction(JNIEnv *__env, jobject _self, jint _instruction_idx, jintArray _layer_idx, jobject _source_dims, jobject _target_dims, jobject _orientation);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_Find_1last_1instruction_1for_1layer(JNIEnv *__env, jobject _self, jint _layer_idx, jint _lim_inst_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_Get_1original_1iset(JNIEnv *__env, jobject _self, jint _instruction_idx, jintArray _iset_idx, jintArray _inum_idx);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_Get_1old_1ref(JNIEnv *__env, jobject _self, jintArray _instruction_idx, jintArray _instance_idx);

/*****************************************************************************/
/*                            Jpx_frame_expander                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Reset(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Construct__Lkdu_1jni_Jpx_1source_2Lkdu_1jni_Jpx_1frame_2Lkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jobject _source, jobject _frame, jobject _region_of_interest);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Construct__Lkdu_1jni_Jpx_1source_2JIZLkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jobject _source, jlong _frame_ref, jint _iteration_idx, jboolean _follow_persistence, jobject _region_of_interest);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Test_1codestream_1visibility__Lkdu_1jni_Jpx_1source_2Lkdu_1jni_Jpx_1frame_2ILkdu_1jni_Jpx_1metanode_2_3IILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2ZI(JNIEnv *__env, jclass this_class, jobject _source, jobject _frame, jint _codestream_idx, jobject _numlist, jintArray _layer_indices, jint _num_layers, jobject _composition_region, jobject _codestream_roi, jboolean _ignore_use_in_alpha, jint _initial_matches_to_skip);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Test_1codestream_1visibility__Lkdu_1jni_Jpx_1source_2JIZI_3IILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2ZI(JNIEnv *__env, jclass this_class, jobject _source, jlong _frame, jint _iteration_idx, jboolean _follow_persistence, jint _codestream_idx, jintArray _layer_indices, jint _num_layers, jobject _composition_region, jobject _codestream_roi, jboolean _ignore_use_in_alpha, jint _initial_matches_to_skip);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Has_1non_1covering_1members(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1num_1members(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1member__I_3I_3ZLkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2Lkdu_1jni_Jpx_1composited_1orientation_2(JNIEnv *__env, jobject _self, jint _which, jintArray _layer_idx, jbooleanArray _covers_composition, jobject _source_dims, jobject _target_dims, jobject _orientation);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1member__I_3I_3I_3ZLkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2Lkdu_1jni_Jpx_1composited_1orientation_2(JNIEnv *__env, jobject _self, jint _which, jintArray _instruction_idx, jintArray _layer_idx, jbooleanArray _covers_composition, jobject _source_dims, jobject _target_dims, jobject _orientation);

/*****************************************************************************/
/*                               Jpx_input_box                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1input_1box_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1input_1box_Open_1as(JNIEnv *__env, jobject _self, jobject _frag_list, jobject _data_refs, jobject _ultimate_src, jlong _box_type);

/*****************************************************************************/
/*                             Jpx_layer_source                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1layer_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1header_1loc(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1resolution(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1colour(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1num_1codestreams(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1codestream_1id(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1layer_1size(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1source_Have_1stream_1headers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1codestream_1registration(JNIEnv *__env, jobject _self, jint _which, jobject _alignment, jobject _sampling, jobject _denominator);

/*****************************************************************************/
/*                             Jpx_layer_target                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1target_Get_1layer_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1resolution(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Add_1colour(JNIEnv *__env, jobject _self, jint _prec, jbyte _approx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1colour(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Set_1codestream_1registration(JNIEnv *__env, jobject _self, jint _codestream_id, jobject _alignment, jobject _sampling, jobject _denominator);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Copy_1attributes(JNIEnv *__env, jobject _self, jobject _src);

/*****************************************************************************/
/*                             Jpx_meta_manager                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Set_1box_1filter(JNIEnv *__env, jobject _self, jint _num_box_types, jlongArray _box_types);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Set_1behaviour(JNIEnv *__env, jobject _self, jint _parsing_behaviour, jint _writing_behaviour);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Access_1root(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Locate_1node(JNIEnv *__env, jobject _self, jlong _file_pos);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Get_1touched_1nodes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Peek_1touched_1nodes(JNIEnv *__env, jobject _self, jlong _box_type, jobject _last_peeked);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Peek_1and_1clear_1touched_1nodes(JNIEnv *__env, jobject _self, jint _num_box_types, jlongArray _box_types, jobject _last_peeked);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Copy(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Reset_1copy_1locators(JNIEnv *__env, jobject _self, jobject _src, jboolean _recursive, jboolean _fixup_unresolved_links);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Load_1matches(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Enumerate_1matches(JNIEnv *__env, jobject _self, jobject _last_node, jint _codestream_idx, jint _compositing_layer_idx, jboolean _applies_to_rendered_result, jobject _region, jint _min_size, jboolean _exclude_region_numlists, jboolean _ignore_missing_numlist_categories, jboolean _exclude_duplicate_numlists);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Insert_1node(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _applies_to_rendered_result, jint _num_regions, jobject _regions, jobject _root, jint _container_id);

/*****************************************************************************/
/*                               Jpx_metanode                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1info(JNIEnv *__env, jobject _self, jintArray _num_codestreams, jintArray _num_layers, jbooleanArray _applies_to_rendered_result);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1lmap(JNIEnv *__env, jobject _self, jintArray _base, jintArray _span);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1cmap(JNIEnv *__env, jobject _self, jintArray _base, jintArray _span);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1codestream_1rep(JNIEnv *__env, jobject _self, jint _stream_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1container_1layer_1rep(JNIEnv *__env, jobject _self, jint _layer_idx);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1codestreams(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1layers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1numlist_1codestreams(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1numlist_1layers(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1codestream(JNIEnv *__env, jobject _self, jint _which, jint _rep_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1layer(JNIEnv *__env, jobject _self, jint _which, jint _rep_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1numlist_1codestream(JNIEnv *__env, jobject _self, jint _stream_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1numlist_1layer(JNIEnv *__env, jobject _self, jint _layer_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1numlist_1stream(JNIEnv *__env, jobject _self, jint _codestream_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1numlist_1layer(JNIEnv *__env, jobject _self, jint _layer_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1next_1identical_1numlist(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1first_1identical_1numlist(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1container(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Compare_1numlists(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1numlist_1descendants(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1num_1regions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1region(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1width(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1bounding_1box(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1region(JNIEnv *__env, jobject _self, jobject _region);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Has_1dependent_1roi_1nodes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1box_1type(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1label(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1uuid(JNIEnv *__env, jobject _self, jbyteArray _uuid);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1cross_1reference(JNIEnv *__env, jobject _self, jobject _frags);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1link(JNIEnv *__env, jobject _self, jintArray _link_type, jboolean _try_to_resolve);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Enum_1linkers(JNIEnv *__env, jobject _self, jobject _last_linker);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Open_1existing(JNIEnv *__env, jobject _self, jobject _box);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1descendants(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1descendant(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1descendant_1by_1type(JNIEnv *__env, jobject _self, jint _which, jint _num_box_types_of_interest, jlongArray _box_types_of_interest);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Check_1descendants_1complete(JNIEnv *__env, jobject _self, jint _num_box_types_of_interest, jlongArray _box_types_of_interest);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1next_1descendant(JNIEnv *__env, jobject _self, jobject _ref, jint _limit_cmd, jlongArray _box_types);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1prev_1descendant(JNIEnv *__env, jobject _self, jobject _ref, jint _limit_cmd, jlongArray _box_types);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1sequence_1index(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1parent(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Find_1path_1to(JNIEnv *__env, jobject _self, jobject _target, jint _descending_flags, jint _ascending_flags, jint _num_exclusion_categories, jlongArray _exclusion_box_types, jintArray _exclusion_flags, jboolean _unify_groups);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1parent(JNIEnv *__env, jobject _self, jobject _new_parent);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1numlist(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _applies_to_rendered_result, jint _container_id);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1regions(JNIEnv *__env, jobject _self, jint _num_regions, jobject _regions);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1label(JNIEnv *__env, jobject _self, jstring _text);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1to_1label(JNIEnv *__env, jobject _self, jstring _text);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1delayed(JNIEnv *__env, jobject _self, jlong _box_type, jint _i_param);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1to_1delayed(JNIEnv *__env, jobject _self, jlong _box_type, jint _i_param);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1link(JNIEnv *__env, jobject _self, jobject _target, jint _link_type, jboolean _avoid_duplicates);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1to_1link(JNIEnv *__env, jobject _self, jobject _target, jint _link_type);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Preserve_1for_1links(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1copy(JNIEnv *__env, jobject _self, jobject _src, jboolean _recursive, jboolean _link_to_internal_copies);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Delete_1node(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Is_1changed(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Ancestor_1changed(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Is_1deleted(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Child_1removed(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Touch(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1state_1ref(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Generate_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _num_box_types_of_interest, jlongArray _box_types_of_interest, jint _num_descend_box_types, jlongArray _descend_box_types, jboolean _priority, jint _max_descend_depth, jint _qualifier);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Generate_1link_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _num_box_types_of_interest, jlongArray _box_types_of_interest, jint _num_descend_box_types, jlongArray _descend_box_types, jboolean _priority, jint _max_descend_depth, jint _qualifier);

/*****************************************************************************/
/*                                  Jpx_roi                                  */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1roi_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1rectangle(JNIEnv *__env, jobject _self, jobject _rect, jboolean _coded, jbyte _priority);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1quadrilateral(JNIEnv *__env, jobject _self, jobject _v1, jobject _v2, jobject _v3, jobject _v4, jboolean _coded, jbyte _priority);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1ellipse__Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2ZB(JNIEnv *__env, jobject _self, jobject _centre, jobject _extent, jobject _skew, jboolean _coded, jbyte _priority);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Init_1ellipse__Lkdu_1jni_Kdu_1coords_2_3DDZB(JNIEnv *__env, jobject _self, jobject _centre, jdoubleArray _axis_extents, jdouble _tan_theta, jboolean _coded, jbyte _priority);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Clip_1region(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Fix_1inconsistencies(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Is_1simple(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Get_1bounding_1rect(JNIEnv *__env, jobject _self, jobject _rect);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1rectangle(JNIEnv *__env, jobject _self, jobject _rectangle);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1quadrilateral(JNIEnv *__env, jobject _self, jobject _v1, jobject _v2, jobject _v3, jobject _v4);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1ellipse__Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2(JNIEnv *__env, jobject _self, jobject _centre, jobject _extent, jobject _skew);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Get_1ellipse__Lkdu_1jni_Kdu_1coords_2_3D_3D(JNIEnv *__env, jobject _self, jobject _centre, jdoubleArray _axis_extents, jdoubleArray _tan_theta);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Check_1geometry(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Check_1edge_1intersection(JNIEnv *__env, jobject _self, jint _n, jobject _v1, jobject _v2);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_Measure_1span(JNIEnv *__env, jobject _self, jdoubleArray _width, jdoubleArray _length);
extern "C"
JNIEXPORT jdouble JNICALL Java_kdu_1jni_Jpx_1roi_Measure_1area(JNIEnv *__env, jobject _self, jdoubleArray _centroid_x, jdoubleArray _centroid_y);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_Contains(JNIEnv *__env, jobject _self, jobject _point);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_Find_1boundary_1projection(JNIEnv *__env, jobject _self, jdouble _x0, jdouble _y0, jdoubleArray _xp, jdoubleArray _yp, jdouble _max_distance, jdouble _tolerance);

/*****************************************************************************/
/*                              Jpx_roi_editor                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Set_1max_1undo_1history(JNIEnv *__env, jobject _self, jint _history);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Is_1empty(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Copy_1from(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Reset(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Set_1mode(JNIEnv *__env, jobject _self, jint _mode);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Init(JNIEnv *__env, jobject _self, jobject _regions, jint _num_regions);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1regions(JNIEnv *__env, jobject _self, jintArray _num_regions);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Modify_1region(JNIEnv *__env, jobject _self, jint _idx, jobject _src);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1bounding_1box(JNIEnv *__env, jobject _self, jobject _bb, jboolean _include_scribble);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Contains_1encoded_1regions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Is_1simple(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1history_1info(JNIEnv *__env, jobject _self, jintArray _available_undo_elts, jbooleanArray _can_redo);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Find_1nearest_1anchor(JNIEnv *__env, jobject _self, jobject _point, jboolean _modify_for_selection);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Find_1nearest_1boundary_1point(JNIEnv *__env, jobject _self, jobject _point, jboolean _exclude_selected_region);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Find_1nearest_1guide_1point(JNIEnv *__env, jobject _self, jobject _point);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Select_1anchor(JNIEnv *__env, jobject _self, jobject _point, jboolean _advance);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Drag_1selected_1anchor(JNIEnv *__env, jobject _self, jobject _new_point);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Can_1move_1selected_1anchor(JNIEnv *__env, jobject _self, jobject _new_point, jboolean _check_roid_limit);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Move_1selected_1anchor(JNIEnv *__env, jobject _self, jobject _new_point);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Cancel_1drag(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Cancel_1selection(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Add_1region(JNIEnv *__env, jobject _self, jboolean _ellipses, jobject _visible_frame);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Delete_1selected_1region(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jdouble JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Measure_1complexity(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Clear_1scribble_1points(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Add_1scribble_1point(JNIEnv *__env, jobject _self, jobject _point);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1scribble_1points(JNIEnv *__env, jobject _self, jintArray _num_points);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1scribble_1point(JNIEnv *__env, jobject _self, jobject _point, jint _which);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Convert_1scribble_1path(JNIEnv *__env, jobject _self, jboolean _replace_content, jint _conversion_flags, jdouble _accuracy);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Split_1selected_1anchor(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Set_1path_1thickness(JNIEnv *__env, jobject _self, jint _thickness, jbooleanArray _success);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Fill_1closed_1paths(JNIEnv *__env, jobject _self, jbooleanArray _success, jint _required_member_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Undo(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Redo(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1selection(JNIEnv *__env, jobject _self, jobject _point, jintArray _num_point_instances);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Enum_1paths(JNIEnv *__env, jobject _self, jlongArray _path_flags, jbyteArray _path_members, jobject _path_start, jobject _path_end);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1region(JNIEnv *__env, jobject _self, jint _idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1path_1segment_1for_1region(JNIEnv *__env, jobject _self, jint _idx, jobject _ep1, jobject _ep2);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1anchor(JNIEnv *__env, jobject _self, jobject _point, jint _which, jboolean _selected_region_only, jboolean _dragged);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1edge(JNIEnv *__env, jobject _self, jobject _from, jobject _to, jint _which, jboolean _selected_region_only, jboolean _dragged, jboolean _want_shared_flag);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1curve(JNIEnv *__env, jobject _self, jobject _centre, jobject _extent, jobject _skew, jint _which, jboolean _selected_region_only, jboolean _dragged);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1roi_1editor_Get_1path_1segment(JNIEnv *__env, jobject _self, jobject _from, jobject _to, jint _which);

/*****************************************************************************/
/*                                Jpx_source                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1source_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1compatibility(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1data_1references(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1codestreams(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1compositing_1layers(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1containers(JNIEnv *__env, jobject _self, jintArray _count);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1codestream(JNIEnv *__env, jobject _self, jint _which, jboolean _need_main_header);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1layer(JNIEnv *__env, jobject _self, jint _which, jboolean _need_stream_headers);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Get_1num_1layer_1codestreams(JNIEnv *__env, jobject _self, jint _which_layer);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Get_1layer_1codestream_1id(JNIEnv *__env, jobject _self, jint _which_layer, jint _which_stream);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1container(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Find_1unique_1compatible_1container(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1composition(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Generate_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _min_frame_idx, jint _max_frame_idx, jint _max_layer_idx, jint _max_codestream_idx, jboolean _priority);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1meta_1manager(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Close(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Jpx_target                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1target_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1compatibility(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1data_1references(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1codestream(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1layer(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1composition(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Expect_1containers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1container(JNIEnv *__env, jobject _self, jint _num_base_codestreams, jint _num_base_layers, jint _repetition_factor);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1container(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Configure_1codestream_1aggregation(JNIEnv *__env, jobject _self, jint _min_j2cx_streams, jint _max_j2cx_streams);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1meta_1manager(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Write_1headers(JNIEnv *__env, jobject _self, jintArray _i_param);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Write_1metadata(JNIEnv *__env, jobject _self, jintArray _i_param);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1target_Close(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                               Kdu_analysis                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1create__Lkdu_1jni_Kdu_1node_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1roi_1node_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2I(JNIEnv *__env, jclass this_class, jobject _node, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jobject _env_queue, jint _flags);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1create__Lkdu_1jni_Kdu_1resolution_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1roi_1node_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2(JNIEnv *__env, jclass this_class, jobject _resolution, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jobject _env_queue);

/*****************************************************************************/
/*                                 Kdu_block                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1max_1passes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1passes(JNIEnv *__env, jobject _self, jint _new_passes, jboolean _copy_existing);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1max_1bytes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1bytes(JNIEnv *__env, jobject _self, jint _new_bytes, jboolean _copy_existing);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1samples(JNIEnv *__env, jobject _self, jint _new_samples);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1contexts(JNIEnv *__env, jobject _self, jint _new_contexts);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Map_1storage(JNIEnv *__env, jobject _self, jint _contexts, jint _samples, jint _retained_state);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1block_Get_1size(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1size(JNIEnv *__env, jobject _self, jobject _new_size);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1block_Get_1region(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1region(JNIEnv *__env, jobject _self, jobject _new_region);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1transpose(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1transpose(JNIEnv *__env, jobject _self, jboolean _new_transpose);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1vflip(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1vflip(JNIEnv *__env, jobject _self, jboolean _new_vflip);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1hflip(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1hflip(JNIEnv *__env, jobject _self, jboolean _new_hflip);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1modes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1modes(JNIEnv *__env, jobject _self, jint _new_modes);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1orientation(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1orientation(JNIEnv *__env, jobject _self, jint _new_orientation);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1missing_1msbs(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1missing_1msbs(JNIEnv *__env, jobject _self, jint _new_msbs);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1num_1passes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1num_1passes(JNIEnv *__env, jobject _self, jint _new_passes);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1pass_1lengths(JNIEnv *__env, jobject _self, jintArray _buffer);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1pass_1lengths(JNIEnv *__env, jobject _self, jintArray _buffer);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1pass_1slopes(JNIEnv *__env, jobject _self, jintArray _buffer);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1pass_1slopes(JNIEnv *__env, jobject _self, jintArray _buffer);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1buffered_1bytes(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _first_idx, jint _num_bytes);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1buffered_1bytes(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _first_idx, jint _num_bytes);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Start_1timing(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Finish_1timing(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Initialize_1timing(JNIEnv *__env, jobject _self, jint _iterations);
extern "C"
JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1block_Get_1timing_1stats(JNIEnv *__env, jobject _self, jlongArray _unique_samples, jdoubleArray _time_wasted);

/*****************************************************************************/
/*                             Kdu_block_decoder                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Decode(JNIEnv *__env, jobject _self, jobject _block);

/*****************************************************************************/
/*                             Kdu_block_encoder                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Encode(JNIEnv *__env, jobject _self, jobject _block, jboolean _reversible, jdouble _msb_wmse, jint _estimated_slope_threshold);

/*****************************************************************************/
/*                                 Kdu_cache                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Attach_1to(JNIEnv *__env, jobject _self, jobject _existing);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Add_1to_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbyteArray _data, jint _offset, jint _num_bytes, jboolean _is_final, jboolean _add_as_most_recent, jboolean _mark_if_augmented);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Get_1databin_1length(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbooleanArray _is_complete);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Promote_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Demote_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1max_1codestream_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1codestream(JNIEnv *__env, jobject _self, jlong _stream_id);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1lru_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _only_if_marked);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1mru_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _only_if_marked);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1cache_Mark_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _mark_state);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Clear_1all_1marks(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Set_1all_1marks(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Get_1databin_1prefix(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbyteArray _buf, jint _max_bytes);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Set_1read_1scope(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbooleanArray _is_complete);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1peak_1cache_1memory(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1transferred_1bytes(JNIEnv *__env, jobject _self, jint _databin_class);


class _jni_delegator__kdu_cache : public _aux_delegator__kdu_cache {
  private: // Data
    JavaVM *jvm;
    jobject _self;
    JNIEnv * _jniEnv( void )
      {
        JNIEnv *__env;
        if (jvm->GetEnv(reinterpret_cast<void **>(&__env),JNI_VERSION_1_1) < 0)
          {
            kdu_thread *thrd = kdu_thread::get_thread_ref();
            if (thrd == NULL)
              throw KDU_NULL_EXCEPTION;
            kdu_jni_env_ref *env_ref = (kdu_jni_env_ref *) thrd->find_thread_object(KDU_JNI_ENV_REF_ID);
            if (env_ref != NULL)
              __env = env_ref->get_env();
            else
              {
                if (jvm->AttachCurrentThread(reinterpret_cast<void **> (&__env),NULL) < 0)
                  throw KDU_NULL_EXCEPTION;
                env_ref = new kdu_jni_env_ref(__env,jvm);
                thrd->add_thread_object(env_ref);
              }
          }
        return __env;
      }
  public: // Member functions
    _jni_delegator__kdu_cache(JNIEnv *__env)
      {
        if (__env->GetJavaVM(&( this->jvm)) < 0)
          throw KDU_NULL_EXCEPTION;
        this->_self = NULL;
      }
    ~_jni_delegator__kdu_cache()
      {
        if (this->_self != NULL)
          _jniEnv()->DeleteGlobalRef(_self);
      }
    void _init(JNIEnv *__env, jobject _self)
      {
        if (this->_self == NULL)
          this->_self = __env->NewGlobalRef(_self);
      }
    void  acquire_lock();
    void  release_lock();
  };

/*****************************************************************************/
/*                            Kdu_channel_mapping                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Clear(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__IIZ(JNIEnv *__env, jobject _self, jint _num_identical_channels, jint _bit_depth, jboolean _is_signed);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Kdu_1codestream_2(JNIEnv *__env, jobject _self, jobject _codestream);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Jp2_1colour_2Lkdu_1jni_Jp2_1channels_2ILkdu_1jni_Jp2_1palette_2Lkdu_1jni_Jp2_1dimensions_2(JNIEnv *__env, jobject _self, jobject _colour, jobject _channels, jint _codestream_idx, jobject _palette, jobject _codestream_dimensions);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Jp2_1source_2Z(JNIEnv *__env, jobject _self, jobject _jp2_in, jboolean _ignore_alpha);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Add_1alpha_1to_1configuration(JNIEnv *__env, jobject _self, jobject _channels, jint _codestream_idx, jobject _palette, jobject _codestream_dimensions, jboolean _ignore_premultiplied_alpha);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1num_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Set_1num_1channels(JNIEnv *__env, jobject _self, jint _num);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1num_1colour_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1source_1component(JNIEnv *__env, jobject _self, jint _n);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1default_1rendering_1precision(JNIEnv *__env, jobject _self, jint _n);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1default_1rendering_1signed(JNIEnv *__env, jobject _self, jint _n);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1colour_1converter(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Kdu_client                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1client_Check_1compatible_1url(JNIEnv *__env, jclass this_class, jstring _url, jboolean _resource_component_must_exist);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Install_1context_1translator(JNIEnv *__env, jobject _self, jobject _translator);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Install_1notifier(JNIEnv *__env, jobject _self, jobject _notifier);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Set_1primary_1timeout(JNIEnv *__env, jobject _self, jlong _timeout_usecs);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Set_1aux_1tcp_1timeout(JNIEnv *__env, jobject _self, jlong _timeout_usecs);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1client_Connect(JNIEnv *__env, jobject _self, jstring _server, jstring _proxy, jstring _request, jstring _channel_transport, jstring _cache_dir, jint _mode, jstring _compatible_url);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1interactive(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1one_1time_1request(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Connect_1request_1has_1non_1empty_1window(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1client_Get_1target_1name(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Check_1compatible_1connection(JNIEnv *__env, jobject _self, jstring _server, jstring _request, jint _mode, jstring _compatible_url);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1client_Add_1queue(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1active(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Target_1started(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1alive(JNIEnv *__env, jobject _self, jint _queue_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1idle(JNIEnv *__env, jobject _self, jint _queue_id);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Disconnect(JNIEnv *__env, jobject _self, jboolean _keep_transport_open, jint _timeout_milliseconds, jint _queue_id, jboolean _wait_for_completion);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Post_1window(JNIEnv *__env, jobject _self, jobject _window, jint _queue_id, jboolean _preemptive, jobject _prefs, jlong _custom_id, jlong _service_usecs);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Sync_1timing(JNIEnv *__env, jobject _self, jint _queue_id, jlong _app_time_usecs, jboolean _expect_preemptive);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Get_1timed_1request_1horizon(JNIEnv *__env, jobject _self, jint _queue_id, jboolean _expect_preemptive);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Trim_1timed_1requests(JNIEnv *__env, jobject _self, jint _queue_id, jlongArray _custom_id, jbooleanArray _partially_sent);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1window_1in_1progress(JNIEnv *__env, jobject _self, jobject _window, jint _queue_id, jintArray _status_flags, jlongArray _custom_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1window_1info(JNIEnv *__env, jobject _self, jint _queue_id, jintArray _status_flags, jlongArray _custom_id, jobject _window, jlongArray _service_usecs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Post_1oob_1window(JNIEnv *__env, jobject _self, jobject _window, jint _caller_id, jboolean _preemptive);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1oob_1window_1in_1progress(JNIEnv *__env, jobject _self, jobject _window, jint _caller_id, jintArray _status_flags);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1client_Get_1status(JNIEnv *__env, jobject _self, jint _queue_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1timing_1info(JNIEnv *__env, jobject _self, jint _queue_id, jdoubleArray _request_rtt, jdoubleArray _suggested_min_posting_interval);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Get_1received_1bytes(JNIEnv *__env, jobject _self, jint _queue_id, jdoubleArray _non_idle_seconds, jdoubleArray _seconds_since_first_active);

/*****************************************************************************/
/*                            Kdu_client_notifier                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1init(JNIEnv *__env, jobject _self);


class _jni_delegator__kdu_client_notifier : public _aux_delegator__kdu_client_notifier {
  private: // Data
    JavaVM *jvm;
    jobject _self;
    JNIEnv * _jniEnv( void )
      {
        JNIEnv *__env;
        if (jvm->GetEnv(reinterpret_cast<void **>(&__env),JNI_VERSION_1_1) < 0)
          {
            kdu_thread *thrd = kdu_thread::get_thread_ref();
            if (thrd == NULL)
              throw KDU_NULL_EXCEPTION;
            kdu_jni_env_ref *env_ref = (kdu_jni_env_ref *) thrd->find_thread_object(KDU_JNI_ENV_REF_ID);
            if (env_ref != NULL)
              __env = env_ref->get_env();
            else
              {
                if (jvm->AttachCurrentThread(reinterpret_cast<void **> (&__env),NULL) < 0)
                  throw KDU_NULL_EXCEPTION;
                env_ref = new kdu_jni_env_ref(__env,jvm);
                thrd->add_thread_object(env_ref);
              }
          }
        return __env;
      }
  public: // Member functions
    _jni_delegator__kdu_client_notifier(JNIEnv *__env)
      {
        if (__env->GetJavaVM(&( this->jvm)) < 0)
          throw KDU_NULL_EXCEPTION;
        this->_self = NULL;
      }
    ~_jni_delegator__kdu_client_notifier()
      {
        if (this->_self != NULL)
          _jniEnv()->DeleteGlobalRef(_self);
      }
    void _init(JNIEnv *__env, jobject _self)
      {
        if (this->_self == NULL)
          this->_self = __env->NewGlobalRef(_self);
      }
    void  notify();
  };

/*****************************************************************************/
/*                           Kdu_client_translator                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Init(JNIEnv *__env, jobject _self, jobject _main_cache);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Close(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_1translator_Update(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1client_1translator_Access_1context(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids);

/*****************************************************************************/
/*                                Kdu_clientx                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                              Kdu_codestream                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Siz_1params_2Lkdu_1jni_Kdu_1compressed_1target_2Lkdu_1jni_Kdu_1dims_2IJLkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _siz, jobject _target, jobject _fragment_region, jint _fragment_tiles_generated, jlong _fragment_tile_bytes_generated, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Kdu_1compressed_1source_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _source, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Siz_1params_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _siz, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Restart__Lkdu_1jni_Kdu_1compressed_1target_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _target, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Restart__Lkdu_1jni_Kdu_1compressed_1source_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _source, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Share_1buffering(JNIEnv *__env, jobject _self, jobject _existing);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Enable_1restart(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1persistent(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Augment_1cache_1threshold(JNIEnv *__env, jobject _self, jint _extra_bytes);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1tile_1unloading_1threshold(JNIEnv *__env, jobject _self, jint _max_tiles_on_list, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Is_1last_1fragment(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Access_1siz(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1num_1components(JNIEnv *__env, jobject _self, jboolean _want_output_comps);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _want_output_comps);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1signed(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _want_output_comps);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1subsampling(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _subs, jboolean _want_output_comps);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1registration(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _scale, jobject _crg, jboolean _want_output_comps);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1relative_1registration(JNIEnv *__env, jobject _self, jint _comp_idx, jint _ref_comp_idx, jobject _scale, jobject _crg, jboolean _want_output_comps);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1dims(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _dims, jboolean _want_output_comps);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1tile_1partition(JNIEnv *__env, jobject _self, jobject _partition);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1valid_1tiles(JNIEnv *__env, jobject _self, jobject _indices);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Find_1tile(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _loc, jobject _tile_idx, jboolean _want_output_comps);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1tile_1dims(JNIEnv *__env, jobject _self, jobject _tile_idx, jint _comp_idx, jobject _dims, jboolean _want_output_comps);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1max_1tile_1layers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1min_1dwt_1levels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Can_1flip(JNIEnv *__env, jobject _self, jboolean _check_current_appearance_only);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Map_1region(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _comp_region, jobject _hires_region, jboolean _want_output_comps);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1textualization(JNIEnv *__env, jobject _self, jobject _output);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1max_1bytes(JNIEnv *__env, jobject _self, jlong _max_bytes, jboolean _simulate_parsing, jboolean _allow_periodic_trimming);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1min_1slope_1threshold(JNIEnv *__env, jobject _self, jint _min_slope);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1resilient(JNIEnv *__env, jobject _self, jboolean _expect_ubiquitous_sops);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1fussy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1fast(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Apply_1input_1restrictions__IIIILkdu_1jni_Kdu_1dims_2I(JNIEnv *__env, jobject _self, jint _first_component, jint _max_components, jint _discard_levels, jint _max_layers, jobject _region_of_interest, jint _access_mode);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Apply_1input_1restrictions__I_3IIILkdu_1jni_Kdu_1dims_2I(JNIEnv *__env, jobject _self, jint _num_indices, jintArray _component_indices, jint _discard_levels, jint _max_layers, jobject _region_of_interest, jint _access_mode);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Change_1appearance(JNIEnv *__env, jobject _self, jboolean _transpose, jboolean _vflip, jboolean _hflip);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1block_1truncation(JNIEnv *__env, jobject _self, jint _factor);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Open_1tile(JNIEnv *__env, jobject _self, jobject _tile_idx, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create_1tile(JNIEnv *__env, jobject _self, jobject _tile_idx, jobject _env);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1comment(JNIEnv *__env, jobject _self, jobject _prev);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Add_1comment(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Flush(JNIEnv *__env, jobject _self, jlongArray _layer_bytes, jint _num_layer_specs, jintArray _layer_thresholds, jboolean _trim_to_rate, jboolean _record_in_comseg, jdouble _tolerance, jobject _env, jint _flags);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Trans_1out(JNIEnv *__env, jobject _self, jlong _max_bytes, jlongArray _layer_bytes, jint _layer_bytes_entries, jboolean _record_in_comseg, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Ready_1for_1flush(JNIEnv *__env, jobject _self, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Auto_1flush(JNIEnv *__env, jobject _self, jint _first_tile_comp_trigger_point, jint _tile_comp_trigger_interval, jint _first_incr_trigger_point, jint _incr_trigger_interval, jlongArray _layer_bytes, jint _num_layer_specs, jintArray _layer_thresholds, jboolean _trim_to_rate, jboolean _record_in_comseg, jdouble _tolerance, jobject _env, jint _flags);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Auto_1trans_1out(JNIEnv *__env, jobject _self, jint _first_tile_comp_trigger_point, jint _tile_comp_trigger_interval, jint _first_incr_trigger_point, jint _incr_trigger_interval, jlong _max_bytes, jboolean _record_in_comseg, jobject _env);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1total_1bytes(JNIEnv *__env, jobject _self, jboolean _exclude_main_header);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1packet_1bytes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1num_1tparts(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Collect_1timing_1stats(JNIEnv *__env, jobject _self, jint _num_coder_iterations);
extern "C"
JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1timing_1stats(JNIEnv *__env, jobject _self, jlongArray _num_samples, jboolean _coder_only);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1compressed_1data_1memory(JNIEnv *__env, jobject _self, jboolean _get_peak_allocation);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1compressed_1state_1memory(JNIEnv *__env, jobject _self, jboolean _get_peak_allocation);

/*****************************************************************************/
/*                          Kdu_codestream_comment                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Get_1text(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Get_1data(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _offset, jint _length);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Check_1readonly(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Put_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _num_bytes);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Put_1text(JNIEnv *__env, jobject _self, jstring _string);

/*****************************************************************************/
/*                            Kdu_compositor_buf                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Init(JNIEnv *__env, jobject _self, jlong _buf, jint _row_gap);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Init_1float(JNIEnv *__env, jobject _self, jlong _float_buf, jint _row_gap);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Is_1read_1access_1allowed(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Set_1read_1accessibility(JNIEnv *__env, jobject _self, jboolean _read_access_required);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1buf(JNIEnv *__env, jobject _self, jintArray _row_gap, jboolean _read_write);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1float_1buf(JNIEnv *__env, jobject _self, jintArray _row_gap, jboolean _read_write);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1region(JNIEnv *__env, jobject _self, jobject _src_region, jintArray _tgt_buf, jint _tgt_offset, jint _tgt_row_gap);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1float_1region(JNIEnv *__env, jobject _self, jobject _src_region, jfloatArray _tgt_buf, jint _tgt_offset, jint _tgt_row_gap);

/*****************************************************************************/
/*                           Kdu_compressed_source                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Close(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Get_1capabilities(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Read(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Seek(JNIEnv *__env, jobject _self, jlong _offset);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Get_1pos(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Set_1tileheader_1scope(JNIEnv *__env, jobject _self, jint _tnum, jint _num_tiles);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Set_1precinct_1scope(JNIEnv *__env, jobject _self, jlong _unique_id);

/*****************************************************************************/
/*                      Kdu_compressed_source_nonnative                      */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Push_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _first_byte_pos, jint _num_bytes);


class _jni_delegator__kdu_compressed_source_nonnative : public _aux_delegator__kdu_compressed_source_nonnative {
  private: // Data
    JavaVM *jvm;
    jobject _self;
    JNIEnv * _jniEnv( void )
      {
        JNIEnv *__env;
        if (jvm->GetEnv(reinterpret_cast<void **>(&__env),JNI_VERSION_1_1) < 0)
          {
            kdu_thread *thrd = kdu_thread::get_thread_ref();
            if (thrd == NULL)
              throw KDU_NULL_EXCEPTION;
            kdu_jni_env_ref *env_ref = (kdu_jni_env_ref *) thrd->find_thread_object(KDU_JNI_ENV_REF_ID);
            if (env_ref != NULL)
              __env = env_ref->get_env();
            else
              {
                if (jvm->AttachCurrentThread(reinterpret_cast<void **> (&__env),NULL) < 0)
                  throw KDU_NULL_EXCEPTION;
                env_ref = new kdu_jni_env_ref(__env,jvm);
                thrd->add_thread_object(env_ref);
              }
          }
        return __env;
      }
  public: // Member functions
    _jni_delegator__kdu_compressed_source_nonnative(JNIEnv *__env)
      {
        if (__env->GetJavaVM(&( this->jvm)) < 0)
          throw KDU_NULL_EXCEPTION;
        this->_self = NULL;
      }
    ~_jni_delegator__kdu_compressed_source_nonnative()
      {
        if (this->_self != NULL)
          _jniEnv()->DeleteGlobalRef(_self);
      }
    void _init(JNIEnv *__env, jobject _self)
      {
        if (this->_self == NULL)
          this->_self = __env->NewGlobalRef(_self);
      }
    int  get_capabilities();
    bool  seek(kdu_long offset);
    kdu_long  get_pos();
    bool  set_tileheader_scope(int tnum, int num_tiles);
    bool  set_precinct_scope(kdu_long unique_id);
    int  post_read(int num_bytes);
  };

/*****************************************************************************/
/*                           Kdu_compressed_target                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Close(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Get_1capabilities(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1mainheader(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1mainheader(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1tileheader(JNIEnv *__env, jobject _self, jint _tnum, jint _num_tiles);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1tileheader(JNIEnv *__env, jobject _self, jint _tnum);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1precinct(JNIEnv *__env, jobject _self, jlong _unique_id);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1precinct(JNIEnv *__env, jobject _self, jlong _unique_id, jint _num_packets, jlongArray _packet_lengths);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1rewrite(JNIEnv *__env, jobject _self, jlong _backtrack);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1rewrite(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Write(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Set_1target_1size(JNIEnv *__env, jobject _self, jlong _num_bytes);

/*****************************************************************************/
/*                      Kdu_compressed_target_nonnative                      */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Retrieve_1packet_1lengths(JNIEnv *__env, jobject _self, jint _num_packets, jlongArray _packet_lengths);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Pull_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _first_byte_pos, jint _num_bytes);


class _jni_delegator__kdu_compressed_target_nonnative : public _aux_delegator__kdu_compressed_target_nonnative {
  private: // Data
    JavaVM *jvm;
    jobject _self;
    JNIEnv * _jniEnv( void )
      {
        JNIEnv *__env;
        if (jvm->GetEnv(reinterpret_cast<void **>(&__env),JNI_VERSION_1_1) < 0)
          {
            kdu_thread *thrd = kdu_thread::get_thread_ref();
            if (thrd == NULL)
              throw KDU_NULL_EXCEPTION;
            kdu_jni_env_ref *env_ref = (kdu_jni_env_ref *) thrd->find_thread_object(KDU_JNI_ENV_REF_ID);
            if (env_ref != NULL)
              __env = env_ref->get_env();
            else
              {
                if (jvm->AttachCurrentThread(reinterpret_cast<void **> (&__env),NULL) < 0)
                  throw KDU_NULL_EXCEPTION;
                env_ref = new kdu_jni_env_ref(__env,jvm);
                thrd->add_thread_object(env_ref);
              }
          }
        return __env;
      }
  public: // Member functions
    _jni_delegator__kdu_compressed_target_nonnative(JNIEnv *__env)
      {
        if (__env->GetJavaVM(&( this->jvm)) < 0)
          throw KDU_NULL_EXCEPTION;
        this->_self = NULL;
      }
    ~_jni_delegator__kdu_compressed_target_nonnative()
      {
        if (this->_self != NULL)
          _jniEnv()->DeleteGlobalRef(_self);
      }
    void _init(JNIEnv *__env, jobject _self)
      {
        if (this->_self == NULL)
          this->_self = __env->NewGlobalRef(_self);
      }
    int  get_capabilities();
    void  start_tileheader(int tnum, int num_tiles);
    void  end_tileheader(int tnum);
    void  start_precinct(kdu_long unique_id);
    void  post_end_precinct(int num_packets);
    bool  start_rewrite(kdu_long backtrack);
    bool  end_rewrite();
    void  set_target_size(kdu_long num_bytes);
    bool  post_write(int num_bytes);
  };

/*****************************************************************************/
/*                        Kdu_compressed_video_source                        */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1timescale(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1field_1order(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Set_1field_1mode(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1num_1frames(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Seek_1to_1frame(JNIEnv *__env, jobject _self, jint _frame_idx);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1duration(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Time_1to_1frame(JNIEnv *__env, jobject _self, jlong _time_instant);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1frame_1instant(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1frame_1period(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Open_1image(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Open_1stream(JNIEnv *__env, jobject _self, jint _field_idx, jobject _input_box);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Close_1image(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                        Kdu_compressed_video_target                        */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Open_1image(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Close_1image(JNIEnv *__env, jobject _self, jobject _codestream);

/*****************************************************************************/
/*                                Kdu_coords                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__II(JNIEnv *__env, jclass this_class, jint _x, jint _y);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__Lkdu_1jni_Kdu_1nc_1coords_2(JNIEnv *__env, jclass this_class, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Assign__Lkdu_1jni_Kdu_1coords_2(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Assign__Lkdu_1jni_Kdu_1nc_1coords_2(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1coords_Get_1x(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1coords_Get_1y(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Set_1x(JNIEnv *__env, jobject _self, jint _x);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Set_1y(JNIEnv *__env, jobject _self, jint _y);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Transpose(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Plus(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Minus(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Add(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Subtract(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1coords_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_From_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_To_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip);

/*****************************************************************************/
/*                                Kdu_decoder                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1create(JNIEnv *__env, jclass this_class, jobject _subband, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jint _pull_offset, jobject _env, jobject _env_queue, jint _flags);

/*****************************************************************************/
/*                                 Kdu_dims                                  */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1dims_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Assign(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Access_1pos(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Access_1size(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1dims_Area(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Transpose(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Intersection(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Intersects(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Is_1empty(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Contains(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Augment__Lkdu_1jni_Kdu_1coords_2(JNIEnv *__env, jobject _self, jobject _p);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Augment__Lkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Clip_1point(JNIEnv *__env, jobject _self, jobject _pt);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_From_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_To_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip);

/*****************************************************************************/
/*                                Kdu_encoder                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1create(JNIEnv *__env, jclass this_class, jobject _subband, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jobject _env_queue, jint _flags);

/*****************************************************************************/
/*                              Kdu_ilayer_ref                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Is_1null(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1ilayer_1ref_Exists(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                              Kdu_istream_ref                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Is_1null(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1istream_1ref_Exists(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                               Kdu_line_buf                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Pre_1create(JNIEnv *__env, jobject _self, jobject _allocator, jint _width, jboolean _absolute, jboolean _use_shorts, jint _extend_left, jint _extend_right);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Create(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1line_1buf_Check_1status(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1exchangeable(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Exchange(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1floats(JNIEnv *__env, jobject _self, jfloatArray _buffer, jint _first_idx, jint _num_samples);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1floats(JNIEnv *__env, jobject _self, jfloatArray _buffer, jint _first_idx, jint _num_samples);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1ints___3III(JNIEnv *__env, jobject _self, jintArray _buffer, jint _first_idx, jint _num_samples);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1ints___3III(JNIEnv *__env, jobject _self, jintArray _buffer, jint _first_idx, jint _num_samples);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1ints___3SII(JNIEnv *__env, jobject _self, jshortArray _buffer, jint _first_idx, jint _num_samples);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1ints___3SII(JNIEnv *__env, jobject _self, jshortArray _buffer, jint _first_idx, jint _num_samples);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1width(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Is_1absolute(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Kdu_message                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Put_1text___3I(JNIEnv *__env, jobject _self, jintArray _string);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1message_Set_1hex_1mode(JNIEnv *__env, jobject _self, jboolean _new_mode);


class _jni_delegator__kdu_message : public _aux_delegator__kdu_message {
  private: // Data
    JavaVM *jvm;
    jobject _self;
    JNIEnv * _jniEnv( void )
      {
        JNIEnv *__env;
        if (jvm->GetEnv(reinterpret_cast<void **>(&__env),JNI_VERSION_1_1) < 0)
          {
            kdu_thread *thrd = kdu_thread::get_thread_ref();
            if (thrd == NULL)
              throw KDU_NULL_EXCEPTION;
            kdu_jni_env_ref *env_ref = (kdu_jni_env_ref *) thrd->find_thread_object(KDU_JNI_ENV_REF_ID);
            if (env_ref != NULL)
              __env = env_ref->get_env();
            else
              {
                if (jvm->AttachCurrentThread(reinterpret_cast<void **> (&__env),NULL) < 0)
                  throw KDU_NULL_EXCEPTION;
                env_ref = new kdu_jni_env_ref(__env,jvm);
                thrd->add_thread_object(env_ref);
              }
          }
        return __env;
      }
  public: // Member functions
    _jni_delegator__kdu_message(JNIEnv *__env)
      {
        if (__env->GetJavaVM(&( this->jvm)) < 0)
          throw KDU_NULL_EXCEPTION;
        this->_self = NULL;
      }
    ~_jni_delegator__kdu_message()
      {
        if (this->_self != NULL)
          _jniEnv()->DeleteGlobalRef(_self);
      }
    void _init(JNIEnv *__env, jobject _self)
      {
        if (this->_self == NULL)
          this->_self = __env->NewGlobalRef(_self);
      }
    void  put_text(const char * string);
    void  flush(bool end_of_message);
    void  start_message();
  };

/*****************************************************************************/
/*                           Kdu_message_formatter                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1create(JNIEnv *__env, jclass this_class, jobject _output, jint _max_line);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Set_1master_1indent(JNIEnv *__env, jobject _self, jint _val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Put_1text__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Flush(JNIEnv *__env, jobject _self, jboolean _end_of_message);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Start_1message(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                             Kdu_message_queue                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_1queue_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Configure(JNIEnv *__env, jobject _self, jint _max_queued_messages, jboolean _auto_pop, jboolean _throw_exceptions, jint _exception_val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Put_1text__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Start_1message(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1queue_Flush(JNIEnv *__env, jobject _self, jboolean _end_of_message);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1message_1queue_Pop_1message(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Kdu_metareq                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1metareq_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1metareq_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1box_1type(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1qualifier(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1priority(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1byte_1limit(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1recurse(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1root_1bin_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1max_1depth(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1next(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                            Kdu_multi_analysis                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2ILkdu_1jni_Kdu_1roi_1image_2I(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jobject _env, jobject _env_queue, jint _flags, jobject _roi, jint _buffer_rows);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2ZLkdu_1jni_Kdu_1roi_1image_2ZILkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2Z(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jboolean _force_precise, jobject _roi, jboolean _want_fastest, jint _buffer_rows, jobject _env, jobject _env_queue, jboolean _multi_threaded_dwt);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Destroy(JNIEnv *__env, jobject _self, jobject _env);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Get_1size(JNIEnv *__env, jobject _self, jint _comp_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Exchange_1line(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _written, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Is_1line_1precise(JNIEnv *__env, jobject _self, jint _comp_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Is_1line_1absolute(JNIEnv *__env, jobject _self, jint _comp_idx);

/*****************************************************************************/
/*                            Kdu_multi_synthesis                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2II(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jobject _env, jobject _env_queue, jint _flags, jint _buffer_rows);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Create__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1tile_2ZZZILkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2Z(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jboolean _force_precise, jboolean _skip_ycc, jboolean _want_fastest, jint _buffer_rows, jobject _env, jobject _env_queue, jboolean _multi_threaded_dwt);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Start(JNIEnv *__env, jobject _self, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Destroy(JNIEnv *__env, jobject _self, jobject _env);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Get_1size(JNIEnv *__env, jobject _self, jint _comp_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Get_1line(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Is_1line_1precise(JNIEnv *__env, jobject _self, jint _comp_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Is_1line_1absolute(JNIEnv *__env, jobject _self, jint _comp_idx);

/*****************************************************************************/
/*                               Kdu_nc_coords                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1nc_1coords_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1nc_1coords_Native_1destroy(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                 Kdu_node                                  */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1node_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1node_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1node_Compare(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1child(JNIEnv *__env, jobject _self, jint _child_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1directions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1num_1descendants(JNIEnv *__env, jobject _self, jintArray _num_leaf_descendants);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1subband(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1resolution(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1node_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1kernel_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1node_Get_1kernel_1coefficients(JNIEnv *__env, jobject _self, jboolean _vertical);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1node_Get_1bibo_1gains(JNIEnv *__env, jobject _self, jintArray _num_steps, jboolean _vertical);

/*****************************************************************************/
/*                                Kdu_output                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__B(JNIEnv *__env, jobject _self, jbyte _byte);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__I(JNIEnv *__env, jobject _self, jint _word);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__J(JNIEnv *__env, jobject _self, jlong _word);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__F(JNIEnv *__env, jobject _self, jfloat _val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Write(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _count);

/*****************************************************************************/
/*                            Kdu_overlay_params                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1codestream_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1compositing_1layer_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1max_1painting_1border(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1num_1aux_1params(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1aux_1param(JNIEnv *__env, jobject _self, jint _n);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Push_1aux_1params(JNIEnv *__env, jobject _self, jlongArray _aux_params, jint _num_aux_params);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Restore_1aux_1params(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Configure_1ring_1points(JNIEnv *__env, jobject _self, jint _stride, jint _radius);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Get_1ring_1points(JNIEnv *__env, jobject _self, jint _min_y, jint _max_y, jintArray _num_vals);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1overlay_1params_Map_1jpx_1regions(JNIEnv *__env, jobject _self, jobject _regions, jint _num_regions, jobject _image_offset, jobject _subsampling, jboolean _transpose, jboolean _vflip, jboolean _hflip, jobject _expansion_numerator, jobject _expansion_denominator, jobject _compositing_offset);

/*****************************************************************************/
/*                                Kdu_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1params_Native_1create(JNIEnv *__env, jclass this_class, jstring _cluster_name, jboolean _allow_tile_diversity, jboolean _allow_component_diversity, jboolean _allow_instance_diversity, jboolean _force_component_specific_forms, jboolean _treat_instances_like_components);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_New_1object(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Link(JNIEnv *__env, jobject _self, jobject _existing, jint _tile_idx, jint _comp_idx, jint _num_tiles, jint _num_comps);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_New_1instance(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Copy_1from(JNIEnv *__env, jobject _self, jobject _source, jint _source_tile, jint _target_tile, jint _instance, jint _skip_components, jint _discard_levels, jboolean _transpose, jboolean _vflip, jboolean _hflip);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Copy_1all(JNIEnv *__env, jobject _self, jobject _source, jint _skip_components, jint _discard_levels, jboolean _transpose, jboolean _vflip, jboolean _hflip);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1params_Identify_1cluster(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1cluster__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _cluster_name);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1cluster__I(JNIEnv *__env, jobject _self, jint _sequence_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1instance(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1num_1comps(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1num_1tiles(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1relation(JNIEnv *__env, jobject _self, jint _tile_idx, jint _comp_idx, jint _inst_idx, jboolean _read_only);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1unique(JNIEnv *__env, jobject _self, jint _tile_idx, jint _comp_idx, jint _inst_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1next_1inst(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Clear_1marks(JNIEnv *__env, jobject _self, jboolean _for_reading);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Any_1changes(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Check_1typical_1tile(JNIEnv *__env, jobject _self, jint _tile_idx, jstring _excluded_clusters);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Translate_1marker_1segment(JNIEnv *__env, jobject _self, jint _code, jint _num_bytes, jbyteArray _bytes, jint _which_tile, jint _tpart_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Generate_1marker_1segments(JNIEnv *__env, jobject _self, jobject _out, jint _which_tile, jint _tpart_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3IZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jintArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3ZZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jbooleanArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3FZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jfloatArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2III(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jint _value);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2IIZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jboolean _value);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2IIF(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jfloat _value);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2III(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jint _value);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2IIZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jboolean _value);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2IID(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jdouble _value);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set_1derived(JNIEnv *__env, jobject _self, jstring _name);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Parse_1string__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Parse_1string__Ljava_lang_String_2I(JNIEnv *__env, jobject _self, jstring _string, jint _tile_idx);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Textualize_1attributes__Lkdu_1jni_Kdu_1message_2Z(JNIEnv *__env, jobject _self, jobject _output, jboolean _skip_derived);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Textualize_1attributes__Lkdu_1jni_Kdu_1message_2IIZ(JNIEnv *__env, jobject _self, jobject _output, jint _min_tile, jint _max_tile, jboolean _skip_derived);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Describe_1attributes(JNIEnv *__env, jobject _self, jobject _output, jboolean _include_comments);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Describe_1attribute(JNIEnv *__env, jobject _self, jstring _name, jobject _output, jboolean _include_comments);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Delete_1unparsed_1attribute(JNIEnv *__env, jobject _self, jstring _name);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Custom_1parse_1field(JNIEnv *__env, jobject _self, jstring _string, jstring _name, jint _field_idx, jintArray _val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Custom_1textualize_1field(JNIEnv *__env, jobject _self, jobject _output, jstring _name, jint _field_idx, jint _val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize(JNIEnv *__env, jobject _self, jboolean _after_reading);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize_1all__Z(JNIEnv *__env, jobject _self, jboolean _after_reading);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize_1all__IZ(JNIEnv *__env, jobject _self, jint _tile_idx, jboolean _after_reading);

/*****************************************************************************/
/*                               Kdu_precinct                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Check_1loaded(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1unique_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1valid_1blocks(JNIEnv *__env, jobject _self, jint _band_idx, jobject _indices);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1precinct_Open_1block(JNIEnv *__env, jobject _self, jint _band_idx, jobject _block_idx, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Close_1block(JNIEnv *__env, jobject _self, jobject _block, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Size_1packets(JNIEnv *__env, jobject _self, jintArray _cumulative_packets, jintArray _cumulative_bytes, jbooleanArray _is_significant);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1packets(JNIEnv *__env, jobject _self, jint _leading_skip_packets, jint _leading_skip_bytes, jintArray _cumulative_packets, jintArray _cumulative_bytes, jobject _out);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Restart(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Close(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                               Kdu_pull_ifc                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Start(JNIEnv *__env, jobject _self, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Pull(JNIEnv *__env, jobject _self, jobject _line, jobject _env);

/*****************************************************************************/
/*                               Kdu_push_ifc                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Start(JNIEnv *__env, jobject _self, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Push(JNIEnv *__env, jobject _self, jobject _line, jobject _env);

/*****************************************************************************/
/*                               Kdu_range_set                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1create__Lkdu_1jni_Kdu_1range_1set_2(JNIEnv *__env, jclass this_class, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Copy_1from(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Is_1empty(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Contains(JNIEnv *__env, jobject _self, jobject _rhs, jboolean _empty_set_defaults_to_zero);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Equals(JNIEnv *__env, jobject _self, jobject _rhs, jboolean _empty_set_defaults_to_zero);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__Lkdu_1jni_Kdu_1sampled_1range_2Z(JNIEnv *__env, jobject _self, jobject _range, jboolean _allow_merging);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__I(JNIEnv *__env, jobject _self, jint _val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__II(JNIEnv *__env, jobject _self, jint _from, jint _to);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1range_1set_Get_1num_1ranges(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1range_1set_Get_1range(JNIEnv *__env, jobject _self, jint _n);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1range_1set_Access_1range(JNIEnv *__env, jobject _self, jint _n);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Test(JNIEnv *__env, jobject _self, jint _index);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1range_1set_Expand(JNIEnv *__env, jobject _self, jintArray _buf, jint _accept_min, jint _accept_max);

/*****************************************************************************/
/*                           Kdu_region_compositor                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2(JNIEnv *__env, jclass this_class, jobject _env, jobject _env_queue);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Kdu_1compressed_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Jpx_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Mj2_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Pre_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Kdu_1compressed_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Jpx_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Mj2_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1error_1level(JNIEnv *__env, jobject _self, jint _error_level);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1process_1aggregation_1threshold(JNIEnv *__env, jobject _self, jfloat _threshold);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1surface_1initialization_1mode(JNIEnv *__env, jobject _self, jboolean _pre_initialize);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Add_1ilayer(JNIEnv *__env, jobject _self, jint _layer_src, jobject _full_source_dims, jobject _full_target_dims, jboolean _transpose, jboolean _vflip, jboolean _hflip, jint _frame_idx, jint _field_handling);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Change_1ilayer_1frame(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jint _frame_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Add_1primitive_1ilayer(JNIEnv *__env, jobject _self, jint _stream_src, jintArray _single_component_idx, jint _single_access_mode, jobject _full_source_dims, jobject _full_target_dims, jboolean _transpose, jboolean _vflip, jboolean _hflip);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Remove_1ilayer(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jboolean _permanent);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Cull_1inactive_1ilayers(JNIEnv *__env, jobject _self, jint _max_inactive);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1frame(JNIEnv *__env, jobject _self, jobject _expander);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Waiting_1for_1stream_1headers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1scale(JNIEnv *__env, jobject _self, jboolean _transpose, jboolean _vflip, jboolean _hflip, jfloat _scale);
extern "C"
JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1optimal_1scale(JNIEnv *__env, jobject _self, jobject _region, jfloat _scale_anchor, jfloat _min_scale, jfloat _max_scale, jobject _istream_ref, jintArray _component_idx, jboolean _avoid_subsampling);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1buffer_1surface(JNIEnv *__env, jobject _self, jobject _region, jint _background);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Check_1invalid_1scale_1code(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1total_1composition_1dims(JNIEnv *__env, jobject _self, jobject _dims);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1composition_1buffer(JNIEnv *__env, jobject _self, jobject _region, jboolean _working_only);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Push_1composition_1buffer(JNIEnv *__env, jobject _self, jlong _custom_stamp, jint _custom_id_val);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Replace_1composition_1queue_1tail(JNIEnv *__env, jobject _self, jlong _custom_stamp, jint _custom_id_val);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Pop_1composition_1buffer(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Inspect_1composition_1queue(JNIEnv *__env, jobject _self, jint _elt, jlongArray _custom_stamp, jintArray _custom_id_val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Flush_1composition_1queue(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1max_1quality_1layers(JNIEnv *__env, jobject _self, jint _quality_layers);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1max_1available_1quality_1layers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1thread_1env(JNIEnv *__env, jobject _self, jobject _env, jobject _env_queue);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Process(JNIEnv *__env, jobject _self, jint _suggested_increment, jobject _new_region, jint _flags);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Is_1processing_1complete(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Is_1codestream_1processing_1complete(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Refresh(JNIEnv *__env, jobject _self, jbooleanArray _new_imagery);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Invalidate_1rect(JNIEnv *__env, jobject _self, jobject _region);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Halt_1processing(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1num_1ilayers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1ilayer(JNIEnv *__env, jobject _self, jobject _last_ilayer_ref, jint _layer_src, jint _direct_codestream_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1istream(JNIEnv *__env, jobject _self, jobject _last_istream_ref, jboolean _only_active_istreams, jboolean _no_duplicates, jint _codestream_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1visible_1ilayer(JNIEnv *__env, jobject _self, jobject _last_ilayer_ref, jobject _region);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Access_1codestream(JNIEnv *__env, jobject _self, jobject _istream_ref);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1istream_1info(JNIEnv *__env, jobject _self, jobject _istream_ref, jintArray _codestream_idx, jobject _ilayer_ref, jintArray _components_in_use, jint _max_components_in_use, jintArray _principle_component_idx, jfloatArray _principle_component_scale_x, jfloatArray _principle_component_scale_y, jbooleanArray _transpose, jbooleanArray _vflip, jbooleanArray _hflip);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1ilayer_1info(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jintArray _layer_src, jintArray _direct_codestream_idx, jbooleanArray _is_opaque, jintArray _frame_idx, jintArray _field_handling);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1ilayer_1stream(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jint _which, jint _codestream_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1codestream_1packets(JNIEnv *__env, jobject _self, jobject _istream_ref, jobject _region, jlongArray _visible_precinct_samples, jlongArray _visible_packet_samples, jlongArray _max_visible_packet_samples, jint _max_region_layers);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1point(JNIEnv *__env, jobject _self, jobject _point, jint _enumerator, jfloat _visibility_threshold);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Map_1region(JNIEnv *__env, jobject _self, jobject _region, jobject _istream_ref);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Inverse_1map_1region(JNIEnv *__env, jobject _self, jobject _region, jobject _istream_ref);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1ilayer_1region(JNIEnv *__env, jobject _self, jobject _ilayer_ref, jboolean _apply_cropping);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1istream_1region(JNIEnv *__env, jobject _self, jobject _istream_ref, jboolean _apply_cropping);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1compatible_1jpip_1window(JNIEnv *__env, jobject _self, jobject _fsiz, jobject _roi_dims, jintArray _round_direction, jobject _region);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Load_1metadata_1matches(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Generate_1metareq(JNIEnv *__env, jobject _self, jobject _client_window, jint _anchor_flags, jobject _region, jint _num_box_types, jlongArray _box_types, jint _num_descend_box_types, jlongArray _descend_box_types, jboolean _priority, jint _max_descend_depth);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Configure_1overlays(JNIEnv *__env, jobject _self, jboolean _enable, jint _min_display_size, jfloat _blending_factor, jint _max_painting_border, jobject _dependency, jint _dependency_effect, jlongArray _aux_params, jint _num_aux_params);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Update_1overlays(JNIEnv *__env, jobject _self, jboolean _start_from_scratch);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Search_1overlays(JNIEnv *__env, jobject _self, jobject _point, jobject _istream_ref, jfloat _visibility_threshold);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1overlay_1info(JNIEnv *__env, jobject _self, jintArray _total_roi_nodes, jintArray _hidden_roi_nodes);


class _jni_delegator__kdu_region_compositor : public _aux_delegator__kdu_region_compositor {
  private: // Data
    JavaVM *jvm;
    jobject _self;
    JNIEnv * _jniEnv( void )
      {
        JNIEnv *__env;
        if (jvm->GetEnv(reinterpret_cast<void **>(&__env),JNI_VERSION_1_1) < 0)
          {
            kdu_thread *thrd = kdu_thread::get_thread_ref();
            if (thrd == NULL)
              throw KDU_NULL_EXCEPTION;
            kdu_jni_env_ref *env_ref = (kdu_jni_env_ref *) thrd->find_thread_object(KDU_JNI_ENV_REF_ID);
            if (env_ref != NULL)
              __env = env_ref->get_env();
            else
              {
                if (jvm->AttachCurrentThread(reinterpret_cast<void **> (&__env),NULL) < 0)
                  throw KDU_NULL_EXCEPTION;
                env_ref = new kdu_jni_env_ref(__env,jvm);
                thrd->add_thread_object(env_ref);
              }
          }
        return __env;
      }
  public: // Member functions
    _jni_delegator__kdu_region_compositor(JNIEnv *__env)
      {
        if (__env->GetJavaVM(&( this->jvm)) < 0)
          throw KDU_NULL_EXCEPTION;
        this->_self = NULL;
      }
    ~_jni_delegator__kdu_region_compositor()
      {
        if (this->_self != NULL)
          _jniEnv()->DeleteGlobalRef(_self);
      }
    void _init(JNIEnv *__env, jobject _self)
      {
        if (this->_self == NULL)
          this->_self = __env->NewGlobalRef(_self);
      }
    bool  custom_paint_overlay(kdu_compositor_buf *buffer, kdu_dims buffer_region, kdu_dims bounding_region, jpx_metanode node, kdu_overlay_params *painting_params, kdu_coords image_offset, kdu_coords subsampling, bool transpose, bool vflip, bool hflip, kdu_coords expansion_numerator, kdu_coords expansion_denominator, kdu_coords compositing_offset);
    kdu_compositor_buf * allocate_buffer(kdu_coords min_size, kdu_coords &actual_size, bool read_access_required);
    void  delete_buffer(kdu_compositor_buf *buf);
  };

/*****************************************************************************/
/*                          Kdu_region_decompressor                          */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1safe_1expansion_1factors(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jdoubleArray _min_prod, jdoubleArray _max_x, jdoubleArray _max_y, jint _access_mode);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1render_1dims(JNIEnv *__env, jclass this_class, jobject _codestream_region, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1codestream_1point(JNIEnv *__env, jclass this_class, jobject _render_point, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1render_1point(JNIEnv *__env, jclass this_class, jobject _codestream_point, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1render_1cover_1dims(JNIEnv *__env, jclass this_class, jobject _codestream_dims, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Find_1codestream_1cover_1dims(JNIEnv *__env, jclass this_class, jobject _render_dims, jobject _ref_comp_subs, jobject _ref_comp_expand_numerator, jobject _ref_comp_expand_denominator, jboolean _allow_fractional_mapping);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1rendered_1image_1dims__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1channel_1mapping_2IILkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2I(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jobject _expand_numerator, jobject _expand_denominator, jint _access_mode);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1rendered_1image_1dims__(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Set_1white_1stretch(JNIEnv *__env, jobject _self, jint _white_stretch_precision);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Set_1interpolation_1behaviour(JNIEnv *__env, jobject _self, jfloat _max_overshoot, jint _zero_overshoot_threshold);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jint _max_layers, jobject _region, jobject _expand_numerator, jobject _expand_denominator, jboolean _precise, jint _access_mode, jboolean _fastest, jobject _env, jobject _env_queue);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3ILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jintArray _buffer, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3B_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2IZII(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jint _precision_bits, jboolean _measure_row_gap_in_pixels, jint _expand_monochrome, jint _fill_alpha);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3I_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2IZII(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jint _precision_bits, jboolean _measure_row_gap_in_pixels, jint _expand_monochrome, jint _fill_alpha);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3F_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2ZZII(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jboolean _normalize, jboolean _measure_row_gap_in_pixels, jint _expand_monochrome, jint _fill_alpha);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Finish(JNIEnv *__env, jobject _self, jintArray _failure_exception, jboolean _do_cs_terminate);

/*****************************************************************************/
/*                              Kdu_resolution                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1next(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Which(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1dwt_1level(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1valid_1precincts(JNIEnv *__env, jobject _self, jobject _indices);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Open_1precinct(JNIEnv *__env, jobject _self, jobject _precinct_idx);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1id(JNIEnv *__env, jobject _self, jobject _precinct_idx);
extern "C"
JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1relevance(JNIEnv *__env, jobject _self, jobject _precinct_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1packets(JNIEnv *__env, jobject _self, jobject _precinct_idx, jobject _env, jboolean _parse_if_necessary);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1samples(JNIEnv *__env, jobject _self, jobject _precinct_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1node(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1valid_1band_1indices(JNIEnv *__env, jobject _self, jintArray _min_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1subband(JNIEnv *__env, jobject _self, jint _band_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1reversible(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Propagate_1roi(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                               Kdu_roi_image                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1image_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1image_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1roi_1image_Acquire_1node(JNIEnv *__env, jobject _self, jint _component, jobject _tile_region);

/*****************************************************************************/
/*                               Kdu_roi_node                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Release(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Pull(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _width);

/*****************************************************************************/
/*                               Kdu_run_queue                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1run_1queue_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Activate(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1run_1queue_Deactivate(JNIEnv *__env, jobject _self, jobject _caller);

/*****************************************************************************/
/*                           Kdu_sample_allocator                            */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Restart(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Finalize(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                             Kdu_sampled_range                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__Lkdu_1jni_Kdu_1sampled_1range_2(JNIEnv *__env, jclass this_class, jobject _src);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__I(JNIEnv *__env, jclass this_class, jint _val);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__II(JNIEnv *__env, jclass this_class, jint _from, jint _to);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__III(JNIEnv *__env, jclass this_class, jint _from, jint _to, jint _step);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Is_1empty(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1from(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1to(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1step(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1remapping_1id(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1context_1type(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1from(JNIEnv *__env, jobject _self, jint _from);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1to(JNIEnv *__env, jobject _self, jint _to);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1step(JNIEnv *__env, jobject _self, jint _step);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1remapping_1id(JNIEnv *__env, jobject _self, jint _which, jint _id_val);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1context_1type(JNIEnv *__env, jobject _self, jint _ctp);

/*****************************************************************************/
/*                                 Kdu_serve                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1serve_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Initialize(JNIEnv *__env, jobject _self, jobject _target, jint _max_chunk_size, jint _chunk_prefix_bytes, jboolean _ignore_relevance_info);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Set_1window(JNIEnv *__env, jobject _self, jobject _window, jobject _pref_updates, jobject _model_instructions, jboolean _is_stateless, jint _context_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_Get_1window(JNIEnv *__env, jobject _self, jobject _window, jint _context_id);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_Get_1image_1done(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_Push_1extra_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _num_bytes);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Window_1finished(JNIEnv *__env, jobject _self, jint _context_id);

/*****************************************************************************/
/*                             Kdu_serve_target                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1codestream_1ranges(JNIEnv *__env, jobject _self, jintArray _num_ranges, jint _compositing_layer_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1codestream_1siz_1info(JNIEnv *__env, jobject _self, jint _codestream_id, jobject _image_dims, jobject _tile_partition, jobject _tile_indices, jintArray _num_components, jintArray _num_output_components, jintArray _max_discard_levels, jintArray _max_quality_layers, jobject _component_subs, jobject _output_component_subs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1codestream_1rd_1info(JNIEnv *__env, jobject _self, jint _codestream_id, jintArray _num_layer_slopes, jintArray _num_layer_lengths, jintArray _layer_log_slopes, jlongArray _layer_lengths);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1serve_1target_Attach_1to_1codestream(JNIEnv *__env, jobject _self, jint _codestream_id, jlong _thread_handle);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Detach_1from_1codestream(JNIEnv *__env, jobject _self, jint _codestream_id, jlong _thread_handle);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Lock_1codestreams(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jlong _thread_handle);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Release_1codestreams(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jlong _thread_handle);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1serve_1target_Access_1context(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_1target_Find_1roi(JNIEnv *__env, jobject _self, jint _stream_id, jstring _roi_name);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1roi_1details(JNIEnv *__env, jobject _self, jint _index, jobject _resolution, jobject _region);

/*****************************************************************************/
/*                                Kdu_servex                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1servex_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Open(JNIEnv *__env, jobject _self, jstring _filename, jint _phld_threshold, jint _per_client_cache, jlong _cache_fp, jboolean _cache_exists, jlong _sub_start, jlong _sub_lim);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Close(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                          Kdu_simple_file_source                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1create__Ljava_lang_String_2Z(JNIEnv *__env, jclass this_class, jstring _fname, jboolean _allow_seeks);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Open(JNIEnv *__env, jobject _self, jstring _fname, jboolean _allow_seeks, jboolean _return_on_failure);

/*****************************************************************************/
/*                          Kdu_simple_file_target                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1create__Ljava_lang_String_2Z(JNIEnv *__env, jclass this_class, jstring _fname, jboolean _append_to_existing);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Open(JNIEnv *__env, jobject _self, jstring _fname, jboolean _append_to_existing, jboolean _return_on_failure);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Strip_1tail(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes);

/*****************************************************************************/
/*                          Kdu_simple_video_source                          */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1create__Ljava_lang_String_2_3J(JNIEnv *__env, jclass this_class, jstring _fname, jlongArray _flags);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Open(JNIEnv *__env, jobject _self, jstring _fname, jlongArray _flags);

/*****************************************************************************/
/*                          Kdu_simple_video_target                          */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1create__Ljava_lang_String_2JJJ(JNIEnv *__env, jclass this_class, jstring _fname, jlong _timescale, jlong _frame_period, jlong _flags);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Open(JNIEnv *__env, jobject _self, jstring _fname, jlong _timescale, jlong _frame_period, jlong _flags);

/*****************************************************************************/
/*                           Kdu_stripe_compressor                           */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jint _num_layer_specs, jlongArray _layer_sizes, jintArray _layer_slopes, jint _min_slope_threshold, jboolean _no_prediction, jboolean _force_precise, jboolean _record_layer_info_in_comment, jdouble _size_tolerance, jint _num_components, jboolean _want_fastest, jobject _env, jobject _env_queue, jint _env_dbuf_height);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Finish(JNIEnv *__env, jobject _self, jint _num_layer_specs, jlongArray _layer_sizes, jintArray _layer_slopes);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Get_1recommended_1stripe_1heights(JNIEnv *__env, jobject _self, jint _preferred_min_height, jint _absolute_max_height, jintArray _stripe_heights, jintArray _max_stripe_heights);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3B_3I_3I_3I_3I_3II(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jint _flush_period);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3S_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jshortArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3I_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3F_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period);

/*****************************************************************************/
/*                          Kdu_stripe_decompressor                          */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jboolean _force_precise, jboolean _want_fastest, jobject _env, jobject _env_queue, jint _env_dbuf_height);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Finish(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Get_1recommended_1stripe_1heights(JNIEnv *__env, jobject _self, jint _preferred_min_height, jint _absolute_max_height, jintArray _stripe_heights, jintArray _max_stripe_heights);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3B_3I_3I_3I_3I_3I_3I(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jintArray _pad_flags);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3S_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jshortArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3I_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3F_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed);

/*****************************************************************************/
/*                                Kdu_subband                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1band_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1subband_Access_1resolution(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Is_1top_1level_1band(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1K_1max(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1K_1max_1prime(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Get_1reversible(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1subband_Get_1delta(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1subband_Get_1msb_1wmse(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Get_1roi_1weight(JNIEnv *__env, jobject _self, jfloatArray _energy_weight);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1valid_1blocks(JNIEnv *__env, jobject _self, jobject _indices);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1block_1size(JNIEnv *__env, jobject _self, jobject _nominal_size, jobject _first_size);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1block_1geometry(JNIEnv *__env, jobject _self, jbooleanArray _transpose, jbooleanArray _vflip, jbooleanArray _hflip);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Block_1row_1generated(JNIEnv *__env, jobject _self, jint _block_height, jboolean _subband_finished, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Attach_1block_1notifier(JNIEnv *__env, jobject _self, jobject _client_queue, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Advance_1block_1rows_1needed(JNIEnv *__env, jobject _self, jobject _client_queue, jlong _delta_rows_needed, jlong _quantum_bits, jlong _num_quantum_blocks, jobject _env);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Detach_1block_1notifier(JNIEnv *__env, jobject _self, jobject _client_queue, jobject _env);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1subband_Open_1block(JNIEnv *__env, jobject _self, jobject _block_idx, jintArray _return_tpart, jobject _env);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Close_1block(JNIEnv *__env, jobject _self, jobject _block, jobject _env);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1conservative_1slope_1threshold(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                               Kdu_synthesis                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1create__Lkdu_1jni_Kdu_1node_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFILkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2I(JNIEnv *__env, jclass this_class, jobject _node, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jint _pull_offset, jobject _env, jobject _env_queue, jint _flags);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1create__Lkdu_1jni_Kdu_1resolution_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1thread_1env_2Lkdu_1jni_Kdu_1thread_1queue_2(JNIEnv *__env, jclass this_class, jobject _resolution, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _env, jobject _env_queue);

/*****************************************************************************/
/*                             Kdu_thread_entity                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1entity_New_1instance(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Is_1group_1owner(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1thread_1id(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Check_1current_1thread(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Change_1group_1owner_1thread(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Create(JNIEnv *__env, jobject _self, jlong _cpu_affinity, jboolean _also_set_owner_affinity);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Set_1min_1thread_1concurrency(JNIEnv *__env, jobject _self, jint _min_concurrency);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1num_1threads(JNIEnv *__env, jobject _self, jstring _domain_name);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Add_1thread(JNIEnv *__env, jobject _self, jstring _domain_name);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Declare_1first_1owner_1wait_1safe(JNIEnv *__env, jobject _self, jboolean _is_safe);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Set_1yield_1frequency(JNIEnv *__env, jobject _self, jint _worker_yield_freq);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1job_1count_1stats(JNIEnv *__env, jobject _self, jlongArray _group_owner_job_count);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Attach_1queue(JNIEnv *__env, jobject _self, jobject _queue, jobject _super_queue, jstring _domain_name, jlong _min_sequencing_idx, jint _queue_flags);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Advance_1work_1domains(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1condition(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Wait_1for_1condition(JNIEnv *__env, jobject _self, jstring _debug_text);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Signal_1condition(JNIEnv *__env, jobject _self, jobject _cond);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Join(JNIEnv *__env, jobject _self, jobject _root_queue, jboolean _descendants_only, jintArray _exc_code);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Terminate(JNIEnv *__env, jobject _self, jobject _root_queue, jboolean _descendants_only, jintArray _exc_code);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Handle_1exception(JNIEnv *__env, jobject _self, jint _exc_code);

/*****************************************************************************/
/*                        Kdu_thread_entity_condition                        */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_1condition_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_1condition_Native_1destroy(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                              Kdu_thread_env                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1env_Get_1block(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1env_Cs_1terminate(JNIEnv *__env, jobject _self, jobject _codestream, jintArray _exc_code);

/*****************************************************************************/
/*                             Kdu_thread_queue                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Is_1attached(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Force_1detach(JNIEnv *__env, jobject _self, jobject _caller);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Get_1sequence_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Get_1max_1jobs(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1queue_Update_1dependencies(JNIEnv *__env, jobject _self, jint _new_dependencies, jint _delta_max_dependencies, jobject _caller);

/*****************************************************************************/
/*                          Kdu_thread_safe_message                          */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1init(JNIEnv *__env, jobject _self);


class _jni_delegator__kdu_thread_safe_message : public _aux_delegator__kdu_thread_safe_message {
  private: // Data
    JavaVM *jvm;
    jobject _self;
    JNIEnv * _jniEnv( void )
      {
        JNIEnv *__env;
        if (jvm->GetEnv(reinterpret_cast<void **>(&__env),JNI_VERSION_1_1) < 0)
          {
            kdu_thread *thrd = kdu_thread::get_thread_ref();
            if (thrd == NULL)
              throw KDU_NULL_EXCEPTION;
            kdu_jni_env_ref *env_ref = (kdu_jni_env_ref *) thrd->find_thread_object(KDU_JNI_ENV_REF_ID);
            if (env_ref != NULL)
              __env = env_ref->get_env();
            else
              {
                if (jvm->AttachCurrentThread(reinterpret_cast<void **> (&__env),NULL) < 0)
                  throw KDU_NULL_EXCEPTION;
                env_ref = new kdu_jni_env_ref(__env,jvm);
                thrd->add_thread_object(env_ref);
              }
          }
        return __env;
      }
  public: // Member functions
    _jni_delegator__kdu_thread_safe_message(JNIEnv *__env)
      {
        if (__env->GetJavaVM(&( this->jvm)) < 0)
          throw KDU_NULL_EXCEPTION;
        this->_self = NULL;
      }
    ~_jni_delegator__kdu_thread_safe_message()
      {
        if (this->_self != NULL)
          _jniEnv()->DeleteGlobalRef(_self);
      }
    void _init(JNIEnv *__env, jobject _self)
      {
        if (this->_self == NULL)
          this->_self = __env->NewGlobalRef(_self);
      }
    void  flush(bool end_of_message);
    void  start_message();
  };

/*****************************************************************************/
/*                                Kdu_tiffdir                                */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1create(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Init(JNIEnv *__env, jobject _self, jboolean _littlendian, jboolean _bigtiff);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Opendir(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1header(JNIEnv *__env, jobject _self, jobject _tgt, jlong _dir_offset);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Writedir(JNIEnv *__env, jobject _self, jobject _tgt, jlong _dir_offset);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Is_1littlendian(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Is_1native_1littlendian(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Close(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1dirlength(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1taglength(JNIEnv *__env, jobject _self, jlong _tag_type);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1fieldlength(JNIEnv *__env, jobject _self, jlong _tag_type);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Delete_1tag(JNIEnv *__env, jobject _self, jlong _tag_type);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Open_1tag(JNIEnv *__env, jobject _self, jlong _tag_type);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3B(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jbyteArray _data);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3I(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jintArray _data);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3D(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jdoubleArray _data);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JJ_3J(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _length, jlongArray _data);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Create_1tag(JNIEnv *__env, jobject _self, jlong _tag_type);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3B(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jbyteArray _data);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3I(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jintArray _data);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3D(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jdoubleArray _data);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3J(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jlongArray _data);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI(JNIEnv *__env, jobject _self, jlong _tag_type, jint _val16);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JD(JNIEnv *__env, jobject _self, jlong _tag_type, jdouble _valdbl);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JJ(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _val64);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Copy_1tag(JNIEnv *__env, jobject _self, jobject _src, jlong _tag_type);

/*****************************************************************************/
/*                                 Kdu_tile                                  */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Close(JNIEnv *__env, jobject _self, jobject _env);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1tnum(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_Get_1tile_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1ycc(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Set_1components_1of_1interest(JNIEnv *__env, jobject _self, jint _num_components_of_interest, jintArray _components_of_interest);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1block_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jintArray _num_stage_inputs, jintArray _num_stage_outputs, jintArray _num_block_inputs, jintArray _num_block_outputs, jintArray _block_input_indices, jintArray _block_output_indices, jfloatArray _irrev_block_offsets, jintArray _rev_block_offsets, jintArray _stage_input_indices);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1matrix_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jfloatArray _coefficients);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1rxform_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jintArray _coefficients, jintArray _active_outputs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1dependency_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jbooleanArray _is_reversible, jfloatArray _irrev_coefficients, jfloatArray _irrev_offsets, jintArray _rev_coefficients, jintArray _rev_offsets, jintArray _active_outputs);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1num_1components(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1num_1layers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Parse_1all_1relevant_1packets(JNIEnv *__env, jobject _self, jboolean _start_from_scratch_if_possible, jobject _env);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tile_Get_1parsed_1packet_1stats(JNIEnv *__env, jobject _self, jint _component_idx, jint _discard_levels, jint _num_layers, jlongArray _layer_bytes, jlongArray _layer_packets);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_Access_1component(JNIEnv *__env, jobject _self, jint _component_idx);
extern "C"
JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1tile_Find_1component_1gain_1info(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _restrict_to_interest);

/*****************************************************************************/
/*                               Kdu_tile_comp                               */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1reversible(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1subsampling(JNIEnv *__env, jobject _self, jobject _factors);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1bit_1depth(JNIEnv *__env, jobject _self, jboolean _internal);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1signed(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1num_1resolutions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Access_1resolution__I(JNIEnv *__env, jobject _self, jint _res_level);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Access_1resolution__(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                                Kdu_window                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_Native_1create__Lkdu_1jni_Kdu_1window_2(JNIEnv *__env, jclass this_class, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Is_1empty(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Copy_1from(JNIEnv *__env, jobject _self, jobject _src, jboolean _copy_expansions);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Copy_1metareq_1from(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Metareq_1contains(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Imagery_1contains(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Contains(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Imagery_1equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Equals(JNIEnv *__env, jobject _self, jobject _rhs);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1resolution(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1resolution(JNIEnv *__env, jobject _self, jobject _resolution);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_Get_1round_1direction(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1round_1direction(JNIEnv *__env, jobject _self, jint _direction);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1region(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1region(JNIEnv *__env, jobject _self, jobject _region);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1components(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1codestreams(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1contexts(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Create_1context_1expansion(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1context_1expansion(JNIEnv *__env, jobject _self, jint _which);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_Parse_1context(JNIEnv *__env, jobject _self, jstring _string);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_Get_1max_1layers(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1max_1layers(JNIEnv *__env, jobject _self, jint _val);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Get_1metadata_1only(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1metadata_1only(JNIEnv *__env, jobject _self, jboolean _val);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1metareq(JNIEnv *__env, jobject _self, jint _index);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Init_1metareq(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Add_1metareq(JNIEnv *__env, jobject _self, jlong _box_type, jint _qualifier, jboolean _priority, jint _byte_limit, jboolean _recurse, jlong _root_bin_id, jint _max_depth);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_Parse_1metareq(JNIEnv *__env, jobject _self, jstring _string);

/*****************************************************************************/
/*                            Kdu_window_context                             */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1context_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1context_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1context_Get_1num_1members(JNIEnv *__env, jobject _self, jintArray _remapping_ids);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1context_Get_1codestream(JNIEnv *__env, jobject _self, jintArray _remapping_ids, jint _member_idx);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1context_Get_1components(JNIEnv *__env, jobject _self, jintArray _remapping_ids, jint _member_idx, jintArray _num_components);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1context_Perform_1remapping(JNIEnv *__env, jobject _self, jintArray _remapping_ids, jint _member_idx, jobject _resolution, jobject _region);

/*****************************************************************************/
/*                             Kdu_window_model                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1model_Native_1create__Lkdu_1jni_Kdu_1window_1model_2(JNIEnv *__env, jclass this_class, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Copy_1from(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Clear(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Init__Z(JNIEnv *__env, jobject _self, jboolean _stateless);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Init__ZZI(JNIEnv *__env, jobject _self, jboolean _stateless, jboolean _background_full, jint _default_stream_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1model_Is_1stateless(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1model_Is_1empty(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Append(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Set_1codestream_1context(JNIEnv *__env, jobject _self, jint _stream_min, jint _stream_max);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Add_1instruction__IJII(JNIEnv *__env, jobject _self, jint _databin_class, jlong _bin_id, jint _flags, jint _limit);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1model_Add_1instruction__IIIIIIJJII(JNIEnv *__env, jobject _self, jint _tmin, jint _tmax, jint _cmin, jint _cmax, jint _rmin, jint _rmax, jlong _pmin, jlong _pmax, jint _flags, jint _limit);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1meta_1instructions(JNIEnv *__env, jobject _self, jlongArray _bin_id, jintArray _buf);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1first_1atomic_1stream(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1header_1instructions__II_3I(JNIEnv *__env, jobject _self, jint _stream_idx, jint _tnum, jintArray _buf);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1header_1instructions__I_3I_3I(JNIEnv *__env, jobject _self, jint _stream_idx, jintArray _tnum, jintArray _buf);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1precinct_1instructions(JNIEnv *__env, jobject _self, jint _stream_idx, jintArray _tnum, jintArray _cnum, jintArray _rnum, jlongArray _pnum, jintArray _buf);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1model_Get_1precinct_1block(JNIEnv *__env, jobject _self, jint _stream_idx, jint _tnum, jint _cnum, jint _rnum, jint _t_across, jint _p_across, jlong _id_base, jlong _id_gap, jobject _region, jintArray _buf);

/*****************************************************************************/
/*                             Kdu_window_prefs                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Native_1create__Lkdu_1jni_Kdu_1window_1prefs_2(JNIEnv *__env, jclass this_class, jobject _src);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Init(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Copy_1from(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Update(JNIEnv *__env, jobject _self, jobject _src);
extern "C"
JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Parse_1prefs(JNIEnv *__env, jobject _self, jstring _string);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Set_1pref(JNIEnv *__env, jobject _self, jint _pref_flag, jboolean _make_required);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Set_1max_1bandwidth(JNIEnv *__env, jobject _self, jlong _max_bw, jboolean _make_required);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Set_1bandwidth_1slice(JNIEnv *__env, jobject _self, jlong _bw_slice, jboolean _make_required);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_1prefs_Get_1colour_1description_1priority(JNIEnv *__env, jobject _self, jint _space, jint _prec, jbyte _approx);

/*****************************************************************************/
/*                                Mcc_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mcc_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mcc_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mcc_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Mco_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mco_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mco_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mco_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Mct_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mct_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mct_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mct_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Mj2_source                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1source_Native_1create__(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Close(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Get_1movie_1dims(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1source_Get_1next_1track(JNIEnv *__env, jobject _self, jlong _prev_track_idx);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1source_Get_1track_1type(JNIEnv *__env, jobject _self, jlong _track_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Access_1video_1track(JNIEnv *__env, jobject _self, jlong _track_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Find_1stream(JNIEnv *__env, jobject _self, jint _stream_idx, jlongArray _track_idx, jintArray _frame_idx, jintArray _field_idx);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Count_1codestreams(JNIEnv *__env, jobject _self, jintArray _count);

/*****************************************************************************/
/*                                Mj2_target                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1target_Exists(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Close(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1target_Add_1video_1track(JNIEnv *__env, jobject _self);

/*****************************************************************************/
/*                             Mj2_video_source                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1track_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1compositing_1order(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1graphics_1mode___3S_3S_3S(JNIEnv *__env, jobject _self, jshortArray _op_red, jshortArray _op_green, jshortArray _op_blue);
extern "C"
JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1graphics_1mode__(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1geometry(JNIEnv *__env, jobject _self, jdoubleArray _presentation_width, jdoubleArray _presentation_height, jdoubleArray _matrix, jboolean _for_movie);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1cardinal_1geometry(JNIEnv *__env, jobject _self, jobject _pre_dims, jbooleanArray _transpose, jbooleanArray _vflip, jbooleanArray _hflip, jboolean _for_movie);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1dimensions(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1resolution(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1palette(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1colour(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1stream_1idx(JNIEnv *__env, jobject _self, jint _field_idx);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1image_1box(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1video_1source_Can_1open_1stream(JNIEnv *__env, jobject _self, jint _field_idx, jboolean _need_main_header);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1frame_1instant__I(JNIEnv *__env, jobject _self, jint _frame_idx);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1frame_1period__I(JNIEnv *__env, jobject _self, jint _frame_idx);

/*****************************************************************************/
/*                             Mj2_video_target                              */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1target_Get_1track_1idx(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1compositing_1order(JNIEnv *__env, jobject _self, jshort _layer_idx);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1graphics_1mode(JNIEnv *__env, jobject _self, jshort _graphics_mode, jshort _op_red, jshort _op_green, jshort _op_blue);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1colour(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1palette(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1channels(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1resolution(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1timescale(JNIEnv *__env, jobject _self, jlong _ticks_per_second);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1field_1order(JNIEnv *__env, jobject _self, jint _order);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1max_1frames_1per_1chunk(JNIEnv *__env, jobject _self, jlong _max_frames);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1frame_1period(JNIEnv *__env, jobject _self, jlong _num_ticks);

/*****************************************************************************/
/*                                Org_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Org_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Org_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Org_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Poc_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Poc_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Poc_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Poc_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Qcd_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Qcd_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Qcd_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Qcd_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Rgn_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Rgn_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Rgn_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Rgn_1params_Native_1create(JNIEnv *__env, jclass this_class);

/*****************************************************************************/
/*                                Siz_params                                 */
/*****************************************************************************/
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Siz_1params_Native_1init_1class(JNIEnv *__env, jclass this_class);
extern "C"
JNIEXPORT void JNICALL Java_kdu_1jni_Siz_1params_Native_1destroy(JNIEnv *__env, jobject _self);
extern "C"
JNIEXPORT jlong JNICALL Java_kdu_1jni_Siz_1params_Native_1create(JNIEnv *__env, jclass this_class);

#endif // KDU_JNI_H
